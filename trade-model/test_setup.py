#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import sys
import importlib
from typing import List, Tuple


def check_python_version() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python."""
    version = sys.version_info
    if version.major == 3 and version.minor >= 11:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - —Ç—Ä–µ–±—É–µ—Ç—Å—è Python 3.11+")
        return False


def check_dependencies() -> Tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    required_packages = [
        'pandas',
        'numpy', 
        'sklearn',
        'xgboost',
        'sqlalchemy',
        'psycopg2',
        'joblib',
        'matplotlib',
        'dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'sklearn':
                importlib.import_module('sklearn')
            elif package == 'dotenv':
                importlib.import_module('dotenv')
            else:
                importlib.import_module(package)
            print(f"‚úÖ {package} - OK")
        except ImportError:
            print(f"‚ùå {package} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            missing_packages.append(package)
    
    return len(missing_packages) == 0, missing_packages


def check_project_structure() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    import os
    
    required_files = [
        'db.py',
        'train.py', 
        'predict.py',
        'requirements.txt',
        'env.example',
        'README.md'
    ]
    
    required_dirs = [
        'data',
        'models'
    ]
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} - OK")
        else:
            print(f"‚ùå {file} - –ù–ï –ù–ê–ô–î–ï–ù")
            all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    for dir_name in required_dirs:
        if os.path.exists(dir_name) and os.path.isdir(dir_name):
            print(f"‚úÖ {dir_name}/ - OK")
        else:
            print(f"‚ùå {dir_name}/ - –ù–ï –ù–ê–ô–î–ï–ù–ê")
            all_good = False
    
    return all_good


def check_env_file() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    import os
    
    if os.path.exists('.env'):
        print("‚úÖ .env - OK")
        return True
    elif os.path.exists('env.example'):
        print("‚ö†Ô∏è  .env - –ù–ï –ù–ê–ô–î–ï–ù, –Ω–æ –µ—Å—Ç—å env.example")
        print("   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        return False
    else:
        print("‚ùå .env –∏ env.example - –ù–ï –ù–ê–ô–î–ï–ù–´")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ï–ö–¢–ê")
    print("=" * 50)
    
    all_checks_passed = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python:")
    if not check_python_version():
        all_checks_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    deps_ok, missing = check_dependencies()
    if not deps_ok:
        all_checks_passed = False
        print(f"\n‚ö†Ô∏è  –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   pip install -r requirements.txt")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:")
    if not check_project_structure():
        all_checks_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    if not check_env_file():
        all_checks_passed = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if all_checks_passed:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train.py")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python predict.py")
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
        print("\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
    
    print("=" * 50)


if __name__ == "__main__":
    main()
