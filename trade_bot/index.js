// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config();

const fastify = require('fastify');
const config = require('./src/config');
const logger = require('./src/utils/logger');
const databaseService = require('./src/services/databaseService');
const flowMonitoringService = require('./src/services/flowMonitoringService');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Fastify —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const app = fastify({
	logger: config.server.logger
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤ –∏ —Ä–æ—É—Ç–æ–≤
async function registerPlugins() {
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º CORS –Ω–∞–ø—Ä—è–º—É—é
	await app.register(require('@fastify/cors'), {
		origin: true,
		credentials: true
	});

	// –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
	app.addHook('onResponse', async (request, reply) => {
		reply.header('Access-Control-Allow-Origin', request.headers.origin || '*');
		reply.header('Access-Control-Allow-Credentials', 'true');
		reply.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
		reply.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
	});

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã
	await app.register(require('./src/plugins'));

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
	await app.register(require('./src/routes/health'));
	await app.register(require('./src/routes/trading'), { prefix: '/api/trading' });
	await app.register(require('./src/routes/bot'), { prefix: '/api/bot' });
	await app.register(require('./src/routes/okx'), { prefix: '/api/okx' });
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
async function initializeServices() {
	try {
		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		await databaseService.connect();

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
		if (config.okx.apiKey) {
			const okxConnected = await require('./src/services/okxService').checkConnection();
			if (okxConnected) {
				logger.info('‚úÖ OKX API –ø–æ–¥–∫–ª—é—á–µ–Ω');
			} else {
				logger.warn('‚ö†Ô∏è OKX API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
			}
		} else {
			logger.warn('‚ö†Ô∏è OKX API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
		}

		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
		if (process.env.AUTO_START_MONITORING === 'true') {
			await flowMonitoringService.start();
			logger.info('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Flow –¥–∞–Ω–Ω—ã—Ö');
		}

	} catch (error) {
		logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
		throw error;
	}
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function start() {
	try {
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã –∏ —Ä–æ—É—Ç—ã
		await registerPlugins();

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
		await initializeServices();

		// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
		await app.listen({
			port: config.server.port,
			host: config.server.host
		});

		logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.server.port}`);
		logger.info(`üìö Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://${config.server.host}:${config.server.port}/docs`);
		logger.info(`ü§ñ Bot API: http://${config.server.host}:${config.server.port}/api/bot`);

	} catch (err) {
		logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
		console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', err);
		process.exit(1);
	}
}

// Graceful shutdown —Ñ—É–Ω–∫—Ü–∏—è
async function gracefulShutdown(signal) {
	logger.info(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);

	try {
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
		if (flowMonitoringService.isRunning) {
			await flowMonitoringService.stop();
		}

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
		if (databaseService.isConnected) {
			await databaseService.disconnect();
		}

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
		await app.close();

		logger.info('‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω');
		process.exit(0);
	} catch (error) {
		logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown:', error);
		process.exit(1);
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
process.on('SIGINT', () => gracefulShutdown('SIGINT'));
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
	logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
	process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
	logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
	process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
start();
