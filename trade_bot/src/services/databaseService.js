const { PrismaClient } = require('@prisma/client');
const logger = require('../utils/logger');

class DatabaseService {
	constructor() {
		this.prisma = new PrismaClient({
			log: [
				{ level: 'query', emit: 'event' },
				{ level: 'error', emit: 'event' },
				{ level: 'info', emit: 'event' },
				{ level: 'warn', emit: 'event' },
			],
		});

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
		this.prisma.$on('query', (e) => {
			if (process.env.NODE_ENV === 'development') {
				logger.debug('Prisma Query:', e.query);
			}
		});

		this.prisma.$on('error', (e) => {
			logger.error('Prisma Error:', e);
		});

		this.isConnected = false;
	}

	async connect() {
		try {
			await this.prisma.$connect();
			this.isConnected = true;
			logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (Prisma)');
		} catch (error) {
			logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
			throw error;
		}
	}

	async disconnect() {
		if (this.prisma) {
			await this.prisma.$disconnect();
			this.isConnected = false;
			logger.info('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
		}
	}

	// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ BTC Flow
	async getLatestBTCFlow(limit = 1) {
		try {
			const flows = await this.prisma.bTCFlow.findMany({
				orderBy: { date: 'desc' },
				take: limit,
			});
			return flows;
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BTC Flow –¥–∞–Ω–Ω—ã—Ö:', error);
			throw error;
		}
	}

	// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ ETH Flow
	async getLatestETHFlow(limit = 1) {
		try {
			const flows = await this.prisma.eTFFlow.findMany({
				orderBy: { date: 'desc' },
				take: limit,
			});
			return flows;
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ETH Flow –¥–∞–Ω–Ω—ã—Ö:', error);
			throw error;
		}
	}

	// –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	async getNewBTCFlowData(since) {
		try {
			const flows = await this.prisma.bTCFlow.findMany({
				where: {
					date: {
						gt: since
					}
				},
				orderBy: { date: 'asc' },
			});
			return flows;
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö BTC Flow –¥–∞–Ω–Ω—ã—Ö:', error);
			throw error;
		}
	}

	async getNewETHFlowData(since) {
		try {
			const flows = await this.prisma.eTFFlow.findMany({
				where: {
					date: {
						gt: since
					}
				},
				orderBy: { date: 'asc' },
			});
			return flows;
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö ETH Flow –¥–∞–Ω–Ω—ã—Ö:', error);
			throw error;
		}
	}

	// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
	async createTradingPosition(positionData) {
		try {
			const position = await this.prisma.tradingPosition.create({
				data: positionData
			});
			logger.info(`üìà –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ${position.id} (${position.symbol} ${position.side})`);
			return position;
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏:', error);
			throw error;
		}
	}

	// –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
	async updateTradingPosition(id, updateData) {
		try {
			const position = await this.prisma.tradingPosition.update({
				where: { id },
				data: updateData
			});

			logger.info(`üìä –ü–æ–∑–∏—Ü–∏—è ${id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
			return position;
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏:', error);
			throw error;
		}
	}

	// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
	async getOpenPositions() {
		try {
			const positions = await this.prisma.tradingPosition.findMany({
				where: { status: 'open' },
				orderBy: { createdAt: 'desc' },
			});
			return positions;
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:', error);
			throw error;
		}
	}

	// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
	async getAllPositions(limit = 50) {
		try {
			const positions = await this.prisma.tradingPosition.findMany({
				orderBy: { createdAt: 'desc' },
				take: limit,
			});
			return positions;
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π:', error);
			throw error;
		}
	}

	// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
	async getTradingStats() {
		try {
			const stats = await this.prisma.tradingPosition.groupBy({
				by: ['status'],
				_count: {
					status: true
				},
				_sum: {
					profitLoss: true
				}
			});

			const totalPositions = await this.prisma.tradingPosition.count();
			const openPositions = await this.prisma.tradingPosition.count({
				where: { status: 'open' }
			});

			return {
				totalPositions,
				openPositions,
				closedPositions: totalPositions - openPositions,
				stats
			};
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏:', error);
			throw error;
		}
	}
}

module.exports = new DatabaseService();