const config = require('../config');
const logger = require('../utils/logger');
const databaseService = require('./databaseService');
const okxService = require('./okxService');

class FlowMonitoringService {
	constructor() {
		this.isRunning = false;
		this.monitoringInterval = null;
		this.lastCheckTime = {
			btc: new Date(),
			eth: new Date()
		};
		this.stats = {
			totalSignals: 0,
			btcSignals: 0,
			ethSignals: 0,
			successfulTrades: 0,
			failedTrades: 0,
			lastSignal: null
		};
	}

	// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	async start() {
		if (this.isRunning) {
			logger.warn('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
			return;
		}

		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
			if (!databaseService.isConnected) {
				await databaseService.connect();
			}

			const okxConnected = await okxService.checkConnection();
			if (!okxConnected) {
				throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX API');
			}

			this.isRunning = true;
			logger.info('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Flow –¥–∞–Ω–Ω—ã—Ö');

			// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
			this.monitoringInterval = setInterval(() => {
				this.checkFlowData();
			}, config.trading.checkInterval);

			// –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
			await this.checkFlowData();

		} catch (error) {
			logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
			throw error;
		}
	}

	// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	async stop() {
		if (!this.isRunning) {
			logger.warn('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
			return;
		}

		this.isRunning = false;

		if (this.monitoringInterval) {
			clearInterval(this.monitoringInterval);
			this.monitoringInterval = null;
		}

		logger.info('üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
	}

	// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	async checkFlowData() {
		try {
			logger.debug('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö Flow –¥–∞–Ω–Ω—ã—Ö...');

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º BTC Flow
			await this.checkBTCFlow();

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º ETH Flow
			await this.checkETHFlow();

		} catch (error) {
			logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Flow –¥–∞–Ω–Ω—ã—Ö:', error);
		}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ BTC Flow –¥–∞–Ω–Ω—ã—Ö
	async checkBTCFlow() {
		try {
			const newFlows = await databaseService.getNewBTCFlowData(this.lastCheckTime.btc);

			if (newFlows.length > 0) {
				logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ ${newFlows.length} –Ω–æ–≤—ã—Ö BTC Flow –∑–∞–ø–∏—Å–µ–π`);

				for (const flow of newFlows) {
					await this.processFlowSignal('BTC', flow);
				}

				this.lastCheckTime.btc = new Date();
			}
		} catch (error) {
			logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ BTC Flow:', error);
		}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ ETH Flow –¥–∞–Ω–Ω—ã—Ö
	async checkETHFlow() {
		try {
			const newFlows = await databaseService.getNewETHFlowData(this.lastCheckTime.eth);

			if (newFlows.length > 0) {
				logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ ${newFlows.length} –Ω–æ–≤—ã—Ö ETH Flow –∑–∞–ø–∏—Å–µ–π`);

				for (const flow of newFlows) {
					await this.processFlowSignal('ETH', flow);
				}

				this.lastCheckTime.eth = new Date();
			}
		} catch (error) {
			logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ETH Flow:', error);
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ Flow
	async processFlowSignal(asset, flowData) {
		try {
			const flowValue = parseFloat(flowData.total);
			const threshold = config.trading.minFlowThreshold;

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥
			if (Math.abs(flowValue) < threshold) {
				logger.debug(`üìà ${asset} Flow ${flowValue} –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${threshold}`);
				return;
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
			const side = flowValue > 0 ? 'long' : 'short';
			const symbol = config.trading.symbols[asset.toLowerCase()];

			logger.info(`üö® –°–∏–≥–Ω–∞–ª ${asset}: Flow = ${flowValue}, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ = ${side}`);

			// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
			await this.executeTrade(symbol, side, flowValue, flowData);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
			this.stats.totalSignals++;
			this.stats[`${asset.toLowerCase()}Signals`]++;
			this.stats.lastSignal = {
				asset,
				flowValue,
				side,
				timestamp: new Date().toISOString()
			};

		} catch (error) {
			logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ ${asset}:`, error);
			this.stats.failedTrades++;
		}
	}

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
	async executeTrade(symbol, side, flowValue, flowData) {
		try {
			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
			const ticker = await okxService.getTicker(symbol);
			const currentPrice = ticker.price;

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
			const positionSize = this.calculatePositionSize(currentPrice, flowValue);

			logger.info(`üí∞ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏: ${symbol} ${side} ${positionSize} @ ${currentPrice}`);

			// –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
			const order = await okxService.placeMarketOrder(symbol, side, positionSize);

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î
			const positionData = {
				symbol,
				side,
				size: positionSize,
				entry_price: currentPrice,
				total: flowValue,
				okx_order_id: order.ordId,
				status: 'open'
			};

			const savedPosition = await databaseService.createTradingPosition(positionData);

			logger.info(`‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${savedPosition.id}, OKX Order ID: ${order.ordId}`);
			this.stats.successfulTrades++;

		} catch (error) {
			logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ ${symbol}:`, error);
			this.stats.failedTrades++;
			throw error;
		}
	}

	// –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
	calculatePositionSize(currentPrice, flowValue) {
		const maxPositionValue = config.trading.maxPositionSize;

		// –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
		let positionValue = maxPositionValue;

		// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
		const flowStrength = Math.abs(flowValue) / config.trading.minFlowThreshold;
		positionValue = Math.min(positionValue * Math.min(flowStrength, 2), maxPositionSize);

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
		const tokenAmount = positionValue / currentPrice;

		// –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
		return Math.round(tokenAmount * 100000) / 100000;
	}

	// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	getStatus() {
		console.log('=== DEBUG: getStatus() ===');
		console.log('this.isRunning:', this.isRunning);
		console.log('this.lastCheckTime:', this.lastCheckTime);
		console.log('this.stats:', this.stats);
		
		const status = {
			isRunning: this.isRunning,
			lastCheckTime: this.lastCheckTime,
			stats: this.stats,
			config: {
				checkInterval: config.trading.checkInterval,
				minFlowThreshold: config.trading.minFlowThreshold,
				maxPositionSize: config.trading.maxPositionSize
			}
		};
		
		console.log('Returning status:', JSON.stringify(status, null, 2));
		return status;
	}

	// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	getStats() {
		return {
			...this.stats,
			uptime: this.isRunning ? Date.now() - this.startTime : 0,
			successRate: this.stats.totalSignals > 0
				? (this.stats.successfulTrades / this.stats.totalSignals * 100).toFixed(2) + '%'
				: '0%'
		};
	}

	// –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	resetStats() {
		this.stats = {
			totalSignals: 0,
			btcSignals: 0,
			ethSignals: 0,
			successfulTrades: 0,
			failedTrades: 0,
			lastSignal: null
		};
		logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
	}
}

module.exports = new FlowMonitoringService();
