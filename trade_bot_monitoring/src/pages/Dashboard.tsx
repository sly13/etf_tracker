import React, { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  Typography,
  Box,
  Chip,
  LinearProgress,
  Alert,
  Button,
  Paper,
  Tooltip,
} from "@mui/material";
import { PlayArrow, Stop, InfoOutlined } from "@mui/icons-material";
import { botApi, okxApi } from "../services/api";
import { MonitoringStatus, TradingStats } from "../types";
import { safeFormatNumber } from "../utils/formatters";
import BTCFlowsChart from "../components/BTCFlowsChart";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–∫–æ–Ω–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
const InfoIcon: React.FC<{ title: string }> = ({ title }) => (
  <Tooltip title={title} arrow placement="top">
    <InfoOutlined
      sx={{
        fontSize: 16,
        color: "text.secondary",
        ml: 0.5,
        cursor: "help",
      }}
    />
  </Tooltip>
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–∞
const getFeatureDescription = (feature: string): string => {
  const descriptions: { [key: string]: string } = {
    price_to_ma30:
      "–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∫ 30-–¥–Ω–µ–≤–Ω–æ–º—É —Å–∫–æ–ª—å–∑—è—â–µ–º—É —Å—Ä–µ–¥–Ω–µ–º—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞",
    ma_7: "7-–¥–Ω–µ–≤–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ - –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ —Ü–µ–Ω—ã",
    return_lag_2: "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 2 –¥–Ω—è –Ω–∞–∑–∞–¥ - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω—ã",
    macd_signal:
      "–°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è MACD - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–º–µ–Ω—Ç–æ–≤ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏",
    rsi: "Relative Strength Index - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞",
    return_prev: "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å - –Ω–µ–¥–∞–≤–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã",
    return_3d: "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 3 –¥–Ω—è - –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞",
    return_7d: "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π - –Ω–µ–¥–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞",
    volatility: "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –º–µ—Ä–∞ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏ —Ü–µ–Ω—ã",
    ma_30: "30-–¥–Ω–µ–≤–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥",
    price_to_ma7: "–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫ 7-–¥–Ω–µ–≤–Ω–æ–º—É —Å–∫–æ–ª—å–∑—è—â–µ–º—É —Å—Ä–µ–¥–Ω–µ–º—É",
    ma7_to_ma30: "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∫ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º—É —Ç—Ä–µ–Ω–¥—É",
    hl_spread: "–†–∞–∑–º–∞—Ö —Ü–µ–Ω (high-low spread) - –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å",
    volume_ratio: "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ —Å—Ä–µ–¥–Ω–µ–º—É - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤",
    etf_flow_change: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏—Ç–æ–∫–∞ ETF - –ø–æ—Ç–æ–∫ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ –ë–∏—Ç–∫–æ–∏–Ω",
    etf_flow_ratio: "–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ ETF –∫ —Å—Ä–µ–¥–Ω–µ–º—É",
    return_lag_1: "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥",
    return_lag_3: "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 3 –¥–Ω—è –Ω–∞–∑–∞–¥",
    volume_lag_1: "–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥",
    volume_lag_2: "–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 2 –¥–Ω—è –Ω–∞–∑–∞–¥",
    volume_lag_3: "–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 3 –¥–Ω—è –Ω–∞–∑–∞–¥",
    etf_flow_lag_1: "–ü—Ä–∏—Ç–æ–∫ ETF –∑–∞ 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥",
    etf_flow_lag_2: "–ü—Ä–∏—Ç–æ–∫ ETF –∑–∞ 2 –¥–Ω—è –Ω–∞–∑–∞–¥",
    etf_flow_lag_3: "–ü—Ä–∏—Ç–æ–∫ ETF –∑–∞ 3 –¥–Ω—è –Ω–∞–∑–∞–¥",
    macd: "MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä - —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∫–æ–ª—å–∑—è—â–∏–º–∏ —Å—Ä–µ–¥–Ω–∏–º–∏",
  };

  return (
    descriptions[feature] ||
    `–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: ${feature.replace(/_/g, " ")}`
  );
};

const Dashboard: React.FC = () => {
  const [monitoringStatus, setMonitoringStatus] =
    useState<MonitoringStatus | null>(null);
  const [tradingStats, setTradingStats] = useState<TradingStats | null>(null);
  const [okxConnected, setOkxConnected] = useState<boolean>(false);
  const [prediction, setPrediction] = useState<any>(null);
  const [predictionError, setPredictionError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadDashboardData();
    const interval = setInterval(loadDashboardData, 5000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval);
  }, []);

  const loadDashboardData = async () => {
    try {
      setError(null);
      const [statusRes, statsRes, okxRes, predictionRes] =
        await Promise.allSettled([
          botApi.getMonitoringStatus(),
          botApi.getTradingStats(),
          okxApi.checkConnection(),
          botApi.getPrediction(),
        ]);

      if (statusRes.status === "fulfilled") {
        setMonitoringStatus(statusRes.value.data);
      }

      if (statsRes.status === "fulfilled") {
        setTradingStats(statsRes.value.data);
      }

      if (okxRes.status === "fulfilled") {
        setOkxConnected(okxRes.value.data.connected);
      }

      if (predictionRes.status === "fulfilled") {
        setPrediction(predictionRes.value.data);
        setPredictionError(null);
      } else {
        setPredictionError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–∏–∫—à–µ–Ω–∞");
      }
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
      console.error("Dashboard load error:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleStartMonitoring = async () => {
    try {
      await botApi.startMonitoring();
      loadDashboardData();
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
    }
  };

  const handleStopMonitoring = async () => {
    try {
      await botApi.stopMonitoring();
      loadDashboardData();
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
    }
  };

  if (loading) {
    return <LinearProgress />;
  }

  return (
    <Box>
      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      <Box sx={{ display: "flex", flexDirection: "column", gap: 3 }}>
        {/* –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ */}
        <Box>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ü§ñ –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
              </Typography>
              <Box sx={{ display: "flex", alignItems: "center", mb: 2 }}>
                <Chip
                  label={monitoringStatus?.isRunning ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
                  color={monitoringStatus?.isRunning ? "success" : "default"}
                  sx={{ mr: 2 }}
                />
                <Chip
                  label={okxConnected ? "OKX –ø–æ–¥–∫–ª—é—á–µ–Ω" : "OKX –æ—Ç–∫–ª—é—á–µ–Ω"}
                  color={okxConnected ? "success" : "error"}
                />
              </Box>
              <Box sx={{ display: "flex", gap: 1 }}>
                <Button
                  variant="contained"
                  startIcon={<PlayArrow />}
                  onClick={handleStartMonitoring}
                  disabled={monitoringStatus?.isRunning}
                  color="success"
                >
                  –ó–∞–ø—É—Å—Ç–∏—Ç—å
                </Button>
                <Button
                  variant="contained"
                  startIcon={<Stop />}
                  onClick={handleStopMonitoring}
                  disabled={!monitoringStatus?.isRunning}
                  color="error"
                >
                  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Box>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ */}
        <Box>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
              </Typography>
              {monitoringStatus?.stats && (
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {monitoringStatus?.stats?.totalSignals || 0}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    BTC —Å–∏–≥–Ω–∞–ª–æ–≤: {monitoringStatus?.stats?.btcSignals || 0}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    ETH —Å–∏–≥–Ω–∞–ª–æ–≤: {monitoringStatus?.stats?.ethSignals || 0}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:{" "}
                    {monitoringStatus?.stats?.successfulTrades || 0}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:{" "}
                    {monitoringStatus?.stats?.failedTrades || 0}
                  </Typography>
                </Box>
              )}
            </CardContent>
          </Card>
        </Box>

        {/* –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <Box>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                üí∞ –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </Typography>
              {tradingStats && (
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {tradingStats?.totalPositions || 0}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {tradingStats?.openPositions || 0}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –ó–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {tradingStats?.closedPositions || 0}
                  </Typography>
                </Box>
              )}
            </CardContent>
          </Card>
        </Box>

        {/* –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª */}
        <Box>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                üîî –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
              </Typography>
              {monitoringStatus?.stats?.lastSignal ? (
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    –ê–∫—Ç–∏–≤: {monitoringStatus?.stats?.lastSignal?.asset || "N/A"}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Flow: {monitoringStatus?.stats?.lastSignal?.flowValue || 0}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:{" "}
                    {monitoringStatus?.stats?.lastSignal?.side || "N/A"}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –í—Ä–µ–º—è:{" "}
                    {monitoringStatus?.stats?.lastSignal?.timestamp
                      ? new Date(
                          monitoringStatus.stats.lastSignal.timestamp
                        ).toLocaleString()
                      : "N/A"}
                  </Typography>
                </Box>
              ) : (
                <Typography variant="body2" color="text.secondary">
                  –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
                </Typography>
              )}
            </CardContent>
          </Card>
        </Box>

        {/* ML Prediction */}
        <Box>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ü§ñ ML Prediction
              </Typography>
              {predictionError ? (
                <Box>
                  <Alert severity="error">{predictionError}</Alert>
                </Box>
              ) : prediction ? (
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    –°—Ç–∞—Ç—É—Å: {prediction.success ? "‚úÖ –£—Å–ø–µ—à–Ω–æ" : "‚ùå –û—à–∏–±–∫–∞"}
                    <InfoIcon title="–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ML –º–æ–¥–µ–ª–∏: —É—Å–ø–µ—à–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫" />
                  </Typography>
                  {prediction.success && prediction.data ? (
                    <Box sx={{ mt: 2 }}>
                      {/* –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ */}
                      <Box
                        sx={{
                          mb: 2,
                          p: 2,
                          bgcolor: "grey.50",
                          borderRadius: 1,
                        }}
                      >
                        <Typography variant="h6" color="primary" gutterBottom>
                          üìà –ü—Ä–æ–≥–Ω–æ–∑: {prediction.data.prediction || "N/A"}
                          <InfoIcon title="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: '–†–æ—Å—Ç' –æ–∑–Ω–∞—á–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ü–µ–Ω—ã –ë–∏—Ç–∫–æ–∏–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, '–ü–∞–¥–µ–Ω–∏–µ' - —Å–Ω–∏–∂–µ–Ω–∏—è" />
                        </Typography>
                        <Typography
                          variant="h5"
                          color="primary.main"
                          fontWeight="bold"
                        >
                          {prediction.data.confidence || "N/A"}
                          <InfoIcon title="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ (—á–µ–º –≤—ã—à–µ, —Ç–µ–º –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–∞ –º–æ–¥–µ–ª—å –≤ —Å–≤–æ–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏)" />
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${prediction.data.price || "N/A"}
                          <InfoIcon title="–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ë–∏—Ç–∫–æ–∏–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)" />
                        </Typography>
                      </Box>

                      {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
                      {prediction.data && (
                        <Box sx={{ mt: 2 }}>
                          <Typography variant="subtitle2" gutterBottom>
                            üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
                          </Typography>

                          {/* –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ */}
                          <Box
                            sx={{
                              mb: 2,
                              p: 1,
                              bgcolor: "blue.50",
                              borderRadius: 1,
                            }}
                          >
                            <Typography variant="body2" fontWeight="bold">
                              –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:
                              <InfoIcon title="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ –ë–∏—Ç–∫–æ–∏–Ω–∞ –∏ –ø—Ä–∏—Ç–æ–∫–∞—Ö ETF –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" />
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              –ü—Ä–æ–≥–Ω–æ–∑: {prediction.data.prediction_text}
                              <InfoIcon title="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö" />
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:{" "}
                              {(prediction.data.probability_up * 100).toFixed(
                                1
                              )}
                              %
                              <InfoIcon title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —Ü–µ–Ω–∞ –ë–∏—Ç–∫–æ–∏–Ω–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å (–æ—Ç 0% –¥–æ 100%)" />
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              –î–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:{" "}
                              {prediction.data.data_points_used}
                              <InfoIcon title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π (–¥–Ω–µ–π), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞" />
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              –°–∏–º–≤–æ–ª:{" "}
                              {prediction.data.data_info?.symbol || "N/A"}
                              <InfoIcon title="–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑ (BTCUSDT - –ë–∏—Ç–∫–æ–∏–Ω –∫ –¥–æ–ª–ª–∞—Ä—É –°–®–ê)" />
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              –ü–µ—Ä–∏–æ–¥:{" "}
                              {prediction.data.data_info?.lookback_days ||
                                "N/A"}{" "}
                              –¥–Ω–µ–π
                              <InfoIcon title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞" />
                            </Typography>
                          </Box>

                          {/* –¢–æ–ø –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ */}
                          {prediction.data.feature_importance && (
                            <Box sx={{ mt: 2 }}>
                              <Typography variant="subtitle2" gutterBottom>
                                üîç –¢–æ–ø-5 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:
                                <InfoIcon title="–ù–∞–∏–±–æ–ª–µ–µ –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–µ" />
                              </Typography>
                              {Object.entries(
                                prediction.data.feature_importance
                              )
                                .sort(
                                  ([, a], [, b]) =>
                                    parseFloat(b as string) -
                                    parseFloat(a as string)
                                )
                                .slice(0, 5)
                                .map(([feature, importance]) => (
                                  <Box
                                    key={feature}
                                    sx={{
                                      display: "flex",
                                      justifyContent: "space-between",
                                      mb: 0.5,
                                    }}
                                  >
                                    <Typography
                                      variant="body2"
                                      sx={{ textTransform: "capitalize" }}
                                    >
                                      {feature.replace(/_/g, " ")}:
                                      <InfoIcon
                                        title={getFeatureDescription(feature)}
                                      />
                                    </Typography>
                                    <Typography
                                      variant="body2"
                                      fontWeight="bold"
                                    >
                                      {(
                                        parseFloat(importance as string) * 100
                                      ).toFixed(1)}
                                      %
                                    </Typography>
                                  </Box>
                                ))}
                            </Box>
                          )}
                        </Box>
                      )}

                      <Typography
                        variant="caption"
                        color="text.secondary"
                        sx={{ mt: 2, display: "block" }}
                      >
                        –û–±–Ω–æ–≤–ª–µ–Ω–æ:{" "}
                        {new Date(prediction.data.timestamp).toLocaleString()}
                        <InfoIcon title="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ ML –º–æ–¥–µ–ª–∏" />
                      </Typography>
                    </Box>
                  ) : (
                    <Box sx={{ mt: 2 }}>
                      <Alert severity="error" sx={{ mb: 1 }}>
                        –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–∏–∫—à–µ–Ω–∞
                      </Alert>
                      <Typography variant="body2" color="error">
                        –°–æ–æ–±—â–µ–Ω–∏–µ: {prediction.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}
                      </Typography>
                      <Typography variant="body2" color="error">
                        –î–µ—Ç–∞–ª–∏: {prediction.error || "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π"}
                      </Typography>
                    </Box>
                  )}
                </Box>
              ) : (
                <Typography variant="body2" color="text.secondary">
                  –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–∏–∫—à–µ–Ω–∞...
                </Typography>
              )}
            </CardContent>
          </Card>
        </Box>

        {/* BTC Flows Chart */}
        <Box sx={{ mb: 3 }}>
          <BTCFlowsChart />
        </Box>

        {/* –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è */}
        <Box>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
              </Typography>
              {monitoringStatus?.config && (
                <Box sx={{ display: "flex", flexWrap: "wrap", gap: 2 }}>
                  <Box sx={{ flex: "1 1 33%", minWidth: "200px" }}>
                    <Paper sx={{ p: 2 }}>
                      <Typography variant="subtitle2">
                        –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
                      </Typography>
                      <Typography variant="h6">
                        {monitoringStatus?.config?.checkInterval
                          ? monitoringStatus.config.checkInterval / 1000
                          : 0}
                        —Å
                      </Typography>
                    </Paper>
                  </Box>
                  <Box sx={{ flex: "1 1 33%", minWidth: "200px" }}>
                    <Paper sx={{ p: 2 }}>
                      <Typography variant="subtitle2">
                        –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                      </Typography>
                      <Typography variant="h6">
                        {safeFormatNumber(
                          monitoringStatus?.config?.minFlowThreshold
                        )}
                      </Typography>
                    </Paper>
                  </Box>
                  <Box sx={{ flex: "1 1 33%", minWidth: "200px" }}>
                    <Paper sx={{ p: 2 }}>
                      <Typography variant="subtitle2">
                        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                      </Typography>
                      <Typography variant="h6">
                        ${monitoringStatus?.config?.maxPositionSize || 0}
                      </Typography>
                    </Paper>
                  </Box>
                </Box>
              )}
            </CardContent>
          </Card>
        </Box>
      </Box>
    </Box>
  );
};

export default Dashboard;
