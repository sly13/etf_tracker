"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@nestjs/core");
const app_module_1 = require("./app.module");
const universal_etf_flow_service_1 = require("./api/etf/universal-etf-flow.service");
const admin_service_1 = require("./admin-panel/admin/admin.service");
const telegram_bot_service_1 = require("./api/telegram-bot/telegram-bot.service");
async function bootstrap() {
    const app = await core_1.NestFactory.create(app_module_1.AppModule);
    app.enableCors({
        origin: [
            'http://localhost:3065',
            'http://localhost:3066',
            'http://10.0.2.2:3066',
            'http://127.0.0.1:3066',
            'http://172.20.10.9:3066',
            'https://admin-etf.vadimsemenko.ru',
        ],
        methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
        allowedHeaders: [
            'Content-Type',
            'Authorization',
            'Accept',
            'Origin',
            'X-Requested-With',
        ],
        credentials: true,
        preflightContinue: false,
        optionsSuccessStatus: 204,
    });
    app.setGlobalPrefix('api');
    const etfFlowService = app.get(universal_etf_flow_service_1.UniversalETFFlowService);
    const adminService = app.get(admin_service_1.AdminService);
    const telegramBotService = app.get(telegram_bot_service_1.TelegramBotService);
    console.log('üöÄ –ó–∞–ø—É—Å–∫ ETF Flow Tracker —Å–µ—Ä–≤–µ—Ä–∞...');
    console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    try {
        await adminService.createDefaultAdmin();
        console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω');
    }
    catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
    }
    console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ETF...');
    if (process.env.NODE_ENV === 'development') {
        console.log('üîß Development —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö ETF');
    }
    else {
        try {
            const results = await etfFlowService.parseAllETFFlowData();
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:');
            console.log(`   Ethereum: ${results.ethereum.success ? '‚úÖ' : '‚ùå'} ${results.ethereum.count} –∑–∞–ø–∏—Å–µ–π`);
            console.log(`   Bitcoin: ${results.bitcoin.success ? '‚úÖ' : '‚ùå'} ${results.bitcoin.count} –∑–∞–ø–∏—Å–µ–π`);
            if (results.ethereum.error) {
                console.log(`   –û—à–∏–±–∫–∞ Ethereum: ${results.ethereum.error}`);
            }
            if (results.bitcoin.error) {
                console.log(`   –û—à–∏–±–∫–∞ Bitcoin: ${results.bitcoin.error}`);
            }
        }
        catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ETF:', error.message);
            console.log('üìù –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
        }
    }
    await app.listen(process.env.PORT ?? 3066);
    console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT ?? 3066}`);
    console.log('üéØ ETF Flow Tracker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log('üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ Telegram –±–æ—Ç–∞:');
    try {
        if (telegramBotService.isBotInitialized()) {
            console.log('   ‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        else {
            console.log('   ‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    }
    catch (error) {
        console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞: ${error.message}`);
    }
}
void bootstrap();
//# sourceMappingURL=main.js.map