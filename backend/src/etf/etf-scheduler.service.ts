import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { UniversalETFFlowService } from './universal-etf-flow.service';
import { NotificationService } from '../notifications/notification.service';
import { schedulerConfig } from '../config/scheduler.config';

@Injectable()
export class ETFSchedulerService {
  private readonly logger = new Logger(ETFSchedulerService.name);

  constructor(
    private readonly etfFlowService: UniversalETFFlowService,
    private readonly notificationService: NotificationService,
  ) {}

  // –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å –≤ 00 –º–∏–Ω—É—Ç
  @Cron(CronExpression.EVERY_HOUR)
  async handleHourlyETFDataUpdate() {
    if (!schedulerConfig.enableAutoUpdate) {
      this.logger.log('‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      return;
    }

    this.logger.log('üïê –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ETF –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // –ü–∞—Ä—Å–∏–Ω–≥ Ethereum –¥–∞–Ω–Ω—ã—Ö
      this.logger.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ Ethereum ETF –¥–∞–Ω–Ω—ã—Ö...');
      const ethereumData =
        await this.etfFlowService.parseETFFlowData('ethereum');
      await this.etfFlowService.saveETFFlowData('ethereum', ethereumData);
      this.logger.log(
        `‚úÖ Ethereum –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${ethereumData.length} –∑–∞–ø–∏—Å–µ–π`,
      );

      // –ü–∞—Ä—Å–∏–Ω–≥ Bitcoin –¥–∞–Ω–Ω—ã—Ö
      this.logger.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ Bitcoin ETF –¥–∞–Ω–Ω—ã—Ö...');
      const bitcoinData = await this.etfFlowService.parseETFFlowData('bitcoin');
      await this.etfFlowService.saveETFFlowData('bitcoin', bitcoinData);
      this.logger.log(
        `‚úÖ Bitcoin –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${bitcoinData.length} –∑–∞–ø–∏—Å–µ–π`,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await this.sendETFUpdateNotification(ethereumData, bitcoinData);

      this.logger.log(
        'üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ETF –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!',
      );
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ETF –¥–∞–Ω–Ω—ã—Ö:',
        error,
      );
    }
  }

  // –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞
  @Cron('0 9 * * *')
  async handleDailyETFDataUpdate() {
    this.logger.log('üåÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ETF –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      this.logger.log('üìä –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö ETF –¥–∞–Ω–Ω—ã—Ö...');
      await this.etfFlowService.parseAllETFFlowData();
      this.logger.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ETF –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ETF –¥–∞–Ω–Ω—ã—Ö:',
        error,
      );
    }
  }

  // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async manualUpdate() {
    this.logger.log('üîÑ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ETF –¥–∞–Ω–Ω—ã—Ö...');
    await this.handleHourlyETFDataUpdate();
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ETF
   */
  private async sendETFUpdateNotification(
    ethereumData: any[],
    bitcoinData: any[],
  ) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
      const latestEthereum = ethereumData[0];
      const latestBitcoin = bitcoinData[0];

      if (!latestEthereum || !latestBitcoin) {
        this.logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ –Ω—É–ª–µ–≤—ã–µ –ø–æ—Ç–æ–∫–∏)
      const ethereumFlow = latestEthereum.total || 0;
      const bitcoinFlow = latestBitcoin.total || 0;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
      if (Math.abs(ethereumFlow) > 0.1 || Math.abs(bitcoinFlow) > 0.1) {
        const notificationData = {
          bitcoinFlow,
          ethereumFlow,
          bitcoinTotal: bitcoinFlow,
          ethereumTotal: ethereumFlow,
          date: latestEthereum.date || new Date().toISOString(),
        };

        await this.notificationService.sendETFUpdateNotification(
          notificationData,
        );
        this.logger.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ETF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } else {
        this.logger.log('üìä –ü–æ—Ç–æ–∫–∏ ETF —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ ETF:', error);
    }
  }
}
