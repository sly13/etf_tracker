import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../../shared/prisma/prisma.service';

@Injectable()
export class SubscriptionService {
  private readonly logger = new Logger(SubscriptionService.name);

  constructor(private readonly prismaService: PrismaService) {}

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUserSubscription(
    userId: string,
    subscriptionData: {
      revenueCatUserId?: string;
      originalTransactionId?: string;
      productId?: string;
      isActive?: boolean;
      isPremium?: boolean;
      autoRenew?: boolean;
      purchaseDate?: Date;
      expirationDate?: Date;
      originalPurchaseDate?: Date;
      environment?: string;
      platform?: string;
      price?: number;
      currency?: string;
    },
    deviceId?: string,
  ): Promise<any> {
    this.logger.log('üí≥ === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===');
    this.logger.log(`üë§ User ID: ${userId}`);
    this.logger.log(`üë§ User ID type: ${typeof userId}`);
    this.logger.log(
      'üì¶ Subscription Data:',
      JSON.stringify(subscriptionData, null, 2),
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId –Ω–µ undefined
    if (!userId) {
      this.logger.error('‚ùå User ID is undefined or empty');
      throw new Error('User ID is required');
    }

    try {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ deviceId
      let user;

      if (deviceId) {
        this.logger.log(`üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ deviceId: ${deviceId}`);
        this.logger.log(`üîç DeviceId type: ${typeof deviceId}`);
        this.logger.log(`üîç DeviceId length: ${deviceId.length}`);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å deviceId (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å ios_/android_)
        const cleanDeviceId = deviceId.replace(/^(ios_|android_|web_)/, '');
        this.logger.log(`üîç Clean deviceId: ${cleanDeviceId}`);

        // –ò—â–µ–º –ø–æ deviceId
        user = await this.prismaService.user.findFirst({
          where: { deviceId: cleanDeviceId },
        });

        if (user) {
          this.logger.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ deviceId: ${user.id}`);
          this.logger.log(
            `üîç deviceId: ${user.deviceId}, deviceToken: ${user.deviceToken}`,
          );
        } else {
          this.logger.log(
            `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ deviceId: ${cleanDeviceId}`,
          );
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ deviceId, –∏—â–µ–º –ø–æ RevenueCat userId
      if (!user) {
        this.logger.log(
          `üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ deviceId, –∏—â–µ–º –ø–æ RevenueCat userId: ${userId}`,
        );
        user = await this.prismaService.user.findFirst({
          where: { deviceId: userId },
        });
      }

      if (user) {
        this.logger.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.id}`);
        this.logger.log(
          `üîç deviceId: ${user.deviceId}, deviceToken: ${user.deviceToken}`,
        );
      } else {
        this.logger.log(
          `üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ deviceToken, –Ω–∏ –ø–æ deviceId`,
        );
      }

      if (!user) {
        this.logger.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! DeviceId: ${deviceId}`);
        this.logger.error(
          `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ NotificationService.registerDevice()`,
        );
        this.logger.error(
          `‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π`,
        );

        throw new Error(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å deviceId ${deviceId} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π.`,
        );
      }

      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingSubscription = await (
        this.prismaService as any
      ).subscription.findFirst({
        where: {
          userId: user.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ RevenueCat userId
        },
        orderBy: {
          createdAt: 'desc',
        },
      });

      if (existingSubscription) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        const updatedSubscription = await (
          this.prismaService as any
        ).subscription.update({
          where: { id: existingSubscription.id },
          data: {
            ...subscriptionData,
            updatedAt: new Date(),
          },
        });

        this.logger.log(
          '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:',
          JSON.stringify(updatedSubscription, null, 2),
        );
        return updatedSubscription;
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        this.logger.log(`üîç Creating new subscription for user.id: ${user.id}`);
        this.logger.log(`üîç user.id type: ${typeof user.id}`);

        const createData = {
          userId: user.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          ...subscriptionData,
        };

        this.logger.log(`üîç Create data:`, JSON.stringify(createData, null, 2));

        const newSubscription = await (
          this.prismaService as any
        ).subscription.create({
          data: createData,
        });

        this.logger.log(
          '‚úÖ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:',
          JSON.stringify(newSubscription, null, 2),
        );
        return newSubscription;
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserSubscriptionStatus(userId: string): Promise<any> {
    this.logger.log('üîç === –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ü–û–î–ü–ò–°–ö–ò ===');
    this.logger.log(`üë§ User ID: ${userId}`);

    try {
      const subscription = await (
        this.prismaService as any
      ).subscription.findFirst({
        where: { userId },
        orderBy: { createdAt: 'desc' },
        include: {
          user: {
            select: {
              id: true,
              deviceId: true,
              telegramChatId: true,
              os: true,
            },
          },
        },
      });

      if (subscription) {
        this.logger.log(
          '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:',
          JSON.stringify(subscription, null, 2),
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        const isCurrentlyActive =
          subscription.isActive &&
          (!subscription.expirationDate ||
            subscription.expirationDate > new Date());

        this.logger.log(`üîç –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: ${isCurrentlyActive}`);
        this.logger.log(`üìÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${subscription.expirationDate}`);
        this.logger.log(`üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: ${subscription.autoRenew}`);

        return {
          ...subscription,
          isCurrentlyActive,
        };
      } else {
        this.logger.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return null;
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç RevenueCat (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  logRevenueCatData(data: any): void {
    this.logger.log('üí≥ === REVENUECAT DATA RECEIVED ===');
    this.logger.log('üìÖ Timestamp:', new Date().toISOString());
    this.logger.log('üì¶ Full Data:', JSON.stringify(data, null, 2));
    this.logger.log('üí≥ ================================');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    if (data) {
      this.logger.log('üîç === DATA ANALYSIS ===');
      Object.keys(data).forEach((key) => {
        this.logger.log(`üìù ${key}:`, JSON.stringify(data[key], null, 2));
      });
      this.logger.log('üîç ====================');
    }
  }
}
