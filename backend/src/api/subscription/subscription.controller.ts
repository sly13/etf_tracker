import { Controller, Post, Body, Logger } from '@nestjs/common';
import { SubscriptionService } from './subscription.service';

@Controller('subscription')
export class SubscriptionController {
  private readonly logger = new Logger(SubscriptionController.name);

  constructor(private readonly subscriptionService: SubscriptionService) {}

  @Post('status')
  async getSubscriptionStatus(@Body() body: any): Promise<any> {
    this.logger.log('üìä === –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ü–û–î–ü–ò–°–ö–ò ===');
    this.logger.log('üì¶ Request Data:', JSON.stringify(body, null, 2));

    const { deviceId, userId } = body;

    if (!deviceId && !userId) {
      return {
        success: false,
        error: 'DeviceId or UserId is required',
      };
    }

    try {
      let user;

      if (deviceId) {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ deviceId
        const cleanDeviceId = deviceId.replace(/^(ios_|android_|web_)/, '');
        user = await this.subscriptionService.findUserByDeviceId(cleanDeviceId);
      } else if (userId) {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
        user = await this.subscriptionService.findUserByDeviceId(userId);
      }

      if (!user) {
        this.logger.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return {
          success: false,
          error: 'User not found',
          subscription: null,
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptionStatus =
        await this.subscriptionService.getUserSubscriptionStatus(user.id);

      return {
        success: true,
        user: {
          id: user.id,
          deviceId: user.deviceId,
          os: user.os,
        },
        subscription: subscriptionStatus,
      };
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  @Post('check-or-create-user')
  async checkOrCreateUser(@Body() body: any): Promise<any> {
    this.logger.log('üë§ === –ü–†–û–í–ï–†–ö–ê/–°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===');
    this.logger.log('üì¶ Request Data:', JSON.stringify(body, null, 2));

    const { deviceId } = body;

    if (!deviceId) {
      return {
        success: false,
        error: 'DeviceId is required',
      };
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const cleanDeviceId = deviceId.replace(/^(ios_|android_|web_)/, '');

      let user =
        await this.subscriptionService.findUserByDeviceId(cleanDeviceId);

      if (!user) {
        this.logger.log(
          `üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –¥–ª—è deviceId: ${cleanDeviceId}`,
        );

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await this.subscriptionService.createUserForDevice(deviceId);

        return {
          success: true,
          user: user,
          created: true,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
        };
      } else {
        this.logger.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.id}`);

        return {
          success: true,
          user: user,
          created: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        };
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  @Post('sync-purchase')
  async syncPurchase(@Body() body: any): Promise<any> {
    this.logger.log('üí≥ === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–û–ö–£–ü–ö–ò ===');
    this.logger.log('üìÖ Timestamp:', new Date().toISOString());
    this.logger.log('üì¶ Purchase Data:', JSON.stringify(body, null, 2));
    this.logger.log('üí≥ ======================================');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–≤—ã–Ω–æ—Å–∏–º –∏–∑ try –±–ª–æ–∫–∞)
    const {
      userId,
      deviceId,
      customerInfo,
      productId,
      transactionId,
      originalTransactionId,
      purchaseDate,
      expirationDate,
      isActive,
      isPremium,
      autoRenew,
      environment,
      platform,
      price,
      currency,
    } = body;

    // –ï—Å–ª–∏ userId –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º RevenueCat ID –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const finalUserId =
      userId || customerInfo?.originalAppUserId || 'test_user_' + Date.now();

    try {
      this.logger.log(`üîç Final User ID: ${finalUserId}`);
      this.logger.log(`üîç Device ID: ${deviceId}`);
      this.logger.log(`üîç Device ID type: ${typeof deviceId}`);
      this.logger.log(
        `üîç Device ID length: ${deviceId?.length || 'undefined'}`,
      );
      this.logger.log(`üîç Final User ID type: ${typeof finalUserId}`);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const subscriptionData = {
        revenueCatUserId: customerInfo?.originalAppUserId,
        originalTransactionId: originalTransactionId || transactionId,
        productId: productId,
        isActive: isActive || false,
        isPremium: isPremium || false,
        autoRenew: autoRenew || false,
        purchaseDate: purchaseDate ? new Date(purchaseDate) : new Date(),
        expirationDate: expirationDate ? new Date(expirationDate) : undefined,
        originalPurchaseDate: purchaseDate
          ? new Date(purchaseDate)
          : new Date(),
        environment: environment || 'Production',
        platform: platform || 'ios',
        price: price || null,
        currency: currency || null,
      };

      this.logger.log(
        'üì¶ Processed Subscription Data:',
        JSON.stringify(subscriptionData, null, 2),
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
      this.logger.log(`üîç Calling service with finalUserId: ${finalUserId}`);
      this.logger.log(`üîç finalUserId type: ${typeof finalUserId}`);
      this.logger.log(`üí≥ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${finalUserId}`);
      this.logger.log(`üì¶ –ü—Ä–æ–¥—É–∫—Ç: ${productId}, –¶–µ–Ω–∞: ${price} ${currency}`);
      this.logger.log(`üì± Device ID: ${deviceId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ deviceId –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      if (!deviceId) {
        this.logger.warn('‚ö†Ô∏è Device ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ');
        this.logger.warn(
          '‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º —Å –ø–æ–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        );
      } else {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.logger.log(
          'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ø–æ–∫—É–ø–∫–∏',
        );

        try {
          const cleanDeviceId = deviceId.replace(/^(ios_|android_|web_)/, '');
          let user =
            await this.subscriptionService.findUserByDeviceId(cleanDeviceId);

          if (!user) {
            this.logger.log('üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
            user = await this.subscriptionService.createUserForDevice(deviceId);
            this.logger.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.id}`);
          } else {
            this.logger.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.id}`);
          }
        } catch (userError) {
          this.logger.error(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
            userError,
          );
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ updateUserSubscription —Ç–æ–∂–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
      }

      const result = await this.subscriptionService.updateUserSubscription(
        finalUserId,
        subscriptionData,
        deviceId,
      );

      this.logger.log('‚úÖ Purchase synced successfully');
      return { success: true, subscription: result };
    } catch (error) {
      this.logger.error('‚ùå Error syncing purchase:', error);

      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
        this.logger.error(
          'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ NotificationService',
        );
        this.logger.error(
          'üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç registerDevice() –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ',
        );
      }

      return {
        success: false,
        error: error.message,
        details: {
          deviceId: deviceId,
          userId: finalUserId,
          timestamp: new Date().toISOString(),
        },
      };
    }
  }
}
