/* eslint-disable @typescript-eslint/no-misused-promises */
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PrismaService } from '../../shared/prisma/prisma.service';
import { UniversalETFFlowService } from '../etf/universal-etf-flow.service';
import TelegramBot from 'node-telegram-bot-api';

export interface ETFNotificationData {
  bitcoinFlow: number;
  ethereumFlow: number;
  bitcoinTotal: number;
  ethereumTotal: number;
  date: string;
  bitcoinData?: any;
  ethereumData?: any;
}

@Injectable()
export class TelegramBotService {
  private readonly logger = new Logger(TelegramBotService.name);
  private bot: TelegramBot;
  private isInitialized = false;

  constructor(
    private configService: ConfigService,
    private prismaService: PrismaService,
    private etfFlowService: UniversalETFFlowService,
  ) {
    this.logger.log('üöÄ TelegramBotService constructor called');
    void this.initializeBot();
  }

  private initializeBot() {
    this.logger.log('üîß Initializing Telegram bot...');
    const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');

    this.logger.log(`üîç Checking TELEGRAM_BOT_TOKEN...`);
    this.logger.log(`üîç Token exists: ${!!token}`);
    this.logger.log(`üîç Token length: ${token?.length || 0}`);

    if (!token) {
      this.logger.warn(
        '‚ö†Ô∏è TELEGRAM_BOT_TOKEN not found in environment variables',
      );
      this.logger.warn('‚ö†Ô∏è Bot will not be initialized');
      return;
    }

    this.logger.log(
      `üîë Telegram bot token found: ${token.substring(0, 10)}...`,
    );

    try {
      this.bot = new TelegramBot(token, { polling: true });
      this.logger.log('‚úÖ Telegram bot instance created');

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      this.bot.on('polling_error', (error) => {
        this.logger.error('‚ùå Polling error:', error);
      });

      this.bot.on('error', (error) => {
        this.logger.error('‚ùå Bot error:', error);
      });

      this.bot.on('message', (msg) => {
        this.logger.log(
          `üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${JSON.stringify(msg, null, 2)}`,
        );
      });

      this.logger.log('üîß Setting up bot handlers...');

      this.setupBotHandlers();
      this.isInitialized = true;
      this.logger.log('üéØ ETF Flow Tracker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ polling –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω
      this.logger.log('üîÑ Polling status:', this.bot.isPolling());
    } catch (error) {
      this.logger.error('‚ùå Error initializing Telegram bot:', error);
    }
  }

  private setupBotHandlers() {
    this.logger.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram –±–æ—Ç–∞...');

    // Setup bot commands menu
    this.setupBotCommandsMenu();

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.bot.on('message', (msg) => {
      this.logger.log(
        `üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from?.first_name} (${msg.chat.id}): ${msg.text || '[–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}`,
      );
      this.logger.log(`üì® –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${JSON.stringify(msg, null, 2)}`);
    });

    // /start command with parameters
    this.bot.onText(/\/start(.*)/, (msg, match) => {
      this.logger.log(
        `üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç ${msg.from?.first_name} (${msg.chat.id})`,
      );
      this.logger.log(`üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "${msg.text}"`);
      this.logger.log(`üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã: match=${JSON.stringify(match)}`);
      this.logger.log(`üöÄ Match groups: ${match?.length || 0} –≥—Ä—É–ø–ø`);
      if (match) {
        for (let i = 0; i < match.length; i++) {
          this.logger.log(`üöÄ Match[${i}]: "${match[i]}"`);
        }
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏—à–ª–∞
      this.logger.log(`üîó === –ü–û–õ–ù–ê–Ø –°–°–´–õ–ö–ê ===`);
      this.logger.log(`üîó –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${JSON.stringify(msg, null, 2)}`);
      this.logger.log(`üîó –¢–µ–∫—Å—Ç: "${msg.text}"`);
      this.logger.log(`üîó Entities: ${JSON.stringify(msg.entities)}`);
      this.logger.log(`üîó ====================`);
      this.logger.log(`üöÄ Entities: ${JSON.stringify(msg.entities)}`);
      this.logger.log(`üöÄ Caption: "${msg.caption || '–Ω–µ—Ç'}"`);
      this.logger.log(`üöÄ Contact: ${JSON.stringify(msg.contact)}`);
      this.logger.log(`üöÄ Location: ${JSON.stringify(msg.location)}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ entities
      if (msg.entities) {
        for (const entity of msg.entities) {
          if (entity.type === 'bot_command') {
            this.logger.log(
              `üöÄ Bot command entity: offset=${entity.offset}, length=${entity.length}`,
            );
            const commandText = msg.text?.substring(
              entity.offset,
              entity.offset + entity.length,
            );
            this.logger.log(`üöÄ Command text: "${commandText}"`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            const afterCommand = msg.text?.substring(
              entity.offset + entity.length,
            );
            this.logger.log(`üöÄ After command: "${afterCommand}"`);
            if (afterCommand && afterCommand.trim()) {
              this.logger.log(
                `üöÄ Found parameters after command: "${afterCommand.trim()}"`,
              );
            }
          }
        }
      }
      void (async () => {
        const chatId = msg.chat.id;
        const userName = msg.from?.first_name || 'User';
        const startParam = match?.[1]?.trim(); // Parameter after /start
        let appName = 'etf.flow'; // Default app

        this.logger.log(
          `üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start: chatId=${chatId}, userName=${userName}, startParam="${startParam}"`,
        );
        this.logger.log(`üîç === –ê–ù–ê–õ–ò–ó –ü–ê–†–ê–ú–ï–¢–†–û–í /start ===`);
        this.logger.log(`üìù –ü–æ–ª–Ω—ã–π startParam: "${startParam}"`);
        this.logger.log(`üìè –î–ª–∏–Ω–∞ startParam: ${startParam?.length || 0}`);

        try {
          // If there's a parameter, parse it
          if (startParam) {
            let deviceId = startParam;

            // Check if parameter contains app name (format: "etf_flow_deviceId_os")
            if (startParam.includes('_')) {
              const parts = startParam.split('_');
              if (parts.length >= 3 && startParam.startsWith('etf_flow_')) {
                appName = 'etf.flow'; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                const os = parts[parts.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —ç—Ç–æ OS
                // –£–±–∏—Ä–∞–µ–º "etf_flow_" –∏–∑ –Ω–∞—á–∞–ª–∞ –∏ "_os" –∏–∑ –∫–æ–Ω—Ü–∞
                deviceId = startParam.substring(9, startParam.lastIndexOf('_'));

                this.logger.log(
                  `üîç –ü–∞—Ä—Å–∏–Ω–≥: appName=${appName}, deviceId=${deviceId}, os=${os}`,
                );
                this.logger.log(`üîç === –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê ===`);
                this.logger.log(`üì± AppName: ${appName}`);
                this.logger.log(`üì± DeviceId (–¥–æ –æ—á–∏—Å—Ç–∫–∏): ${deviceId}`);
                this.logger.log(`üñ•Ô∏è OS: ${os}`);
              } else {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                appName = parts[0];
                deviceId = parts.slice(1).join('_');
              }
            }

            // deviceId —É–∂–µ —á–∏—Å—Ç—ã–π (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
            const cleanDeviceId = deviceId;

            this.logger.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: deviceId=${cleanDeviceId}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º deviceId –≤ —á–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            await this.bot.sendMessage(
              chatId,
              `üîç <b>–û—Ç–ª–∞–¥–∫–∞:</b>\n` +
                `üì± DeviceId: <code>${cleanDeviceId}</code>\n` +
                `üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`,
              { parse_mode: 'HTML' },
            );

            // Try to find user by deviceId
            const userByDeviceId = await this.prismaService.user.findUnique({
              where: { deviceId: cleanDeviceId },
              include: { application: true },
            });

            this.logger.log(
              `üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userByDeviceId ? `–Ω–∞–π–¥–µ–Ω (ID: ${userByDeviceId.id})` : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`,
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ —á–∞—Ç
            if (userByDeviceId) {
              await this.bot.sendMessage(
                chatId,
                `‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!</b>\n` +
                  `üÜî ID: <code>${userByDeviceId.id}</code>\n` +
                  `üì± DeviceId: <code>${userByDeviceId.deviceId}</code>\n` +
                  `üì± App: ${userByDeviceId.application.displayName}\n` +
                  `üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram...`,
                { parse_mode: 'HTML' },
              );
            } else {
              await this.bot.sendMessage(
                chatId,
                `‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n` +
                  `üîç –ò—Å–∫–∞–ª–∏ –ø–æ deviceId: <code>${cleanDeviceId}</code>\n` +
                  `‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏...`,
                { parse_mode: 'HTML' },
              );
            }

            if (userByDeviceId) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram Chat ID –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              const existingTelegramUser =
                await this.prismaService.user.findUnique({
                  where: { telegramChatId: chatId.toString() },
                });

              if (
                existingTelegramUser &&
                existingTelegramUser.id !== userByDeviceId.id
              ) {
                this.logger.warn(
                  `‚ö†Ô∏è Telegram Chat ID ${chatId} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (${existingTelegramUser.id})`,
                );
                await this.bot.sendMessage(
                  chatId,
                  '‚ùå –≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                );
                return;
              }

              // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              const currentSettings = (userByDeviceId.settings as any) || {};
              const currentProfile = currentSettings.profile || {};

              // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram
              const updatedSettings = {
                ...currentSettings,
                profile: {
                  ...currentProfile,
                  firstName:
                    currentProfile.firstName ||
                    msg.from?.first_name ||
                    currentProfile.firstName,
                  lastName:
                    currentProfile.lastName ||
                    msg.from?.last_name ||
                    currentProfile.lastName,
                },
                preferences: {
                  ...currentSettings.preferences,
                  language:
                    currentSettings.preferences?.language ||
                    msg.from?.language_code ||
                    currentSettings.preferences?.language,
                },
                notifications: {
                  ...currentSettings.notifications,
                  enableTelegramNotifications: true,
                },
              };

              // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              this.logger.log(
                `üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram Chat ID ${chatId} –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userByDeviceId.id} (deviceId: ${userByDeviceId.deviceId})`,
              );

              const updateResult = await this.prismaService.user.update({
                where: { id: userByDeviceId.id },
                data: {
                  telegramChatId: chatId.toString(),
                  lastUsed: new Date(),
                  settings: updatedSettings,
                },
              });

              this.logger.log(
                `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ID=${updateResult.id}, telegramChatId=${updateResult.telegramChatId}`,
              );

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
              if (updateResult.telegramChatId !== chatId.toString()) {
                this.logger.error(
                  `‚ùå –û–®–ò–ë–ö–ê: telegramChatId –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è! –û–∂–∏–¥–∞–ª–æ—Å—å: ${chatId}, –ø–æ–ª—É—á–µ–Ω–æ: ${updateResult.telegramChatId}`,
                );
              } else {
                this.logger.log(
                  `‚úÖ telegramChatId —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: ${updateResult.telegramChatId}`,
                );
              }

              const welcomeMessage = `
ü§ñ <b>Welcome to ${userByDeviceId.application.displayName}!</b>

üëã Hello, ${userName}!

üîî <b>Telegram notifications activated!</b>

üì± Application: ${userByDeviceId.application.displayName}
üë§ User: ${currentProfile.firstName || 'Not specified'} ${currentProfile.lastName || ''}
üÜî Device ID: ${userByDeviceId.deviceId}
üñ•Ô∏è OS: ${userByDeviceId.os || 'Unknown'}

üìä You will receive notifications about:
‚Ä¢ Bitcoin ETF flows
‚Ä¢ Ethereum ETF flows
‚Ä¢ Significant flow changes

<i>Use /help to see available commands</i>
            `.trim();

              await this.bot.sendMessage(chatId, welcomeMessage, {
                parse_mode: 'HTML',
              });

              this.logger.log(
                `‚úÖ User ${userName} (${chatId}) automatically linked to deviceId: ${startParam}`,
              );
              return;
            } else {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ deviceId - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ deviceId
              this.logger.log(
                `‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å deviceId ${cleanDeviceId} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–∂–∏–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.`,
              );

              const waitingMessage = `
ü§ñ <b>Welcome to ETF Flow Tracker!</b>

üëã Hello, ${userName}!

‚è≥ <b>Waiting for app registration...</b>

üì± Please open the ETF Flow Tracker app on your device and complete the registration process.

üÜî Your Device ID: <code>${cleanDeviceId}</code>

Once you register in the app, your Telegram account will be automatically linked and you'll start receiving notifications.

<i>Use /help to see available commands</i>
              `.trim();

              await this.bot.sendMessage(chatId, waitingMessage, {
                parse_mode: 'HTML',
              });

              this.logger.log(
                `‚è≥ User ${userName} (${chatId}) waiting for app registration with deviceId: ${cleanDeviceId}`,
              );
              return;
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram Chat ID
          const existingUser = await this.prismaService.user.findUnique({
            where: { telegramChatId: chatId.toString() },
            include: { application: true },
          });

          if (existingUser) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentSettings = (existingUser.settings as any) || {};

            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            const updatedSettings = {
              ...currentSettings,
              notifications: {
                ...currentSettings.notifications,
                enableTelegramNotifications: true,
              },
            };

            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await this.prismaService.user.update({
              where: { id: existingUser.id },
              data: {
                telegramChatId: chatId.toString(),
                lastUsed: new Date(),
                settings: updatedSettings,
              },
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è deviceId (–ø–æ–¥–∫–ª—é—á–µ–Ω–æ –ª–∏ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
            let welcomeMessage = '';
            if (
              existingUser.deviceId &&
              !existingUser.deviceId.startsWith('telegram_')
            ) {
              // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
              welcomeMessage = `
ü§ñ <b>Welcome back!</b>

üëã Hello, ${userName}!

üîî <b>Telegram notifications activated!</b>

üìä You will receive notifications about:
‚Ä¢ Bitcoin ETF flows
‚Ä¢ Ethereum ETF flows
‚Ä¢ Significant flow changes

‚úÖ <b>Mobile app connected!</b>
üÜî Device ID: <code>${existingUser.deviceId}</code>

<i>Use /help to see available commands</i>
              `.trim();
            } else {
              // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
              welcomeMessage = `
ü§ñ <b>Welcome back!</b>

üëã Hello, ${userName}!

üîî <b>Telegram notifications activated!</b>

üìä You will receive notifications about:
‚Ä¢ Bitcoin ETF flows
‚Ä¢ Ethereum ETF flows
‚Ä¢ Significant flow changes

‚ö†Ô∏è <b>Mobile app not connected</b>
üì± Install the mobile app for full functionality:
‚Ä¢ iOS: [App Store Link]
‚Ä¢ Android: [Google Play Link]

üÜî Your Telegram Device ID: <code>telegram_${chatId}</code>

üí° <i>Use /app for detailed installation instructions</i>
              `.trim();
            }

            await this.bot.sendMessage(chatId, welcomeMessage, {
              parse_mode: 'HTML',
            });

            this.logger.log(
              `‚úÖ User ${userName} (${chatId}) activated Telegram notifications`,
            );
          } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            const defaultApp = await this.prismaService.application.findFirst({
              where: { name: appName },
            });

            if (!defaultApp) {
              this.logger.error(`‚ùå Application "${appName}" not found`);
              await this.bot.sendMessage(
                chatId,
                `‚ùå Application "${appName}" not found. Please contact support.`,
              );
              return;
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Telegram-only –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            this.logger.log(
              `‚ö†Ô∏è –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø! –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`,
            );
            this.logger.log(
              `‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: chatId=${chatId}, appName=${appName}, startParam=${startParam}`,
            );

            await this.bot.sendMessage(
              chatId,
              `‚ö†Ô∏è <b>–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!</b>\n` +
                `üîç –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n` +
                `üì± App: ${appName}\n` +
                `üîó ChatId: <code>${chatId}</code>\n` +
                `üìù StartParam: <code>${startParam}</code>`,
              { parse_mode: 'HTML' },
            );

            const newUserSettings = {
              notifications: {
                enableETFUpdates: true,
                enableSignificantFlow: true,
                enableTestNotifications: false,
                enableTelegramNotifications: true,
                minFlowThreshold: 0.1,
                significantChangePercent: 20.0,
              },
              preferences: {
                language: msg.from?.language_code || 'en',
                deviceType: 'telegram',
              },
              profile: {
                firstName: msg.from?.first_name || 'Telegram',
                lastName: msg.from?.last_name || 'User',
              },
            };

            await this.prismaService.user.create({
              data: {
                applicationId: defaultApp.id,
                deviceId: null, // –ù–µ—Ç deviceId - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                deviceToken: `telegram_token_${chatId}`, // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è FCM —Ç–æ–∫–µ–Ω–∞
                telegramChatId: chatId.toString(),
                os: 'telegram',
                settings: newUserSettings,
                isActive: true,
                lastUsed: new Date(),
              },
            });

            const welcomeMessage = `
ü§ñ <b>Welcome to ${defaultApp.displayName}!</b>

üëã Hello, ${userName}!

üîî <b>Telegram notifications activated!</b>

üìä You will receive notifications about:
‚Ä¢ Bitcoin ETF flows
‚Ä¢ Ethereum ETF flows
‚Ä¢ Significant flow changes

üì± <b>‚ö†Ô∏è To get full functionality, please install the mobile app:</b>

1Ô∏è‚É£ <b>Download the app:</b>
   ‚Ä¢ iOS: [App Store Link]
   ‚Ä¢ Android: [Google Play Link]

2Ô∏è‚É£ <b>After installation:</b>
   ‚Ä¢ Open the app
   ‚Ä¢ Go to Settings ‚Üí Telegram Notifications
   ‚Ä¢ Use this Device ID: <code>telegram_${chatId}</code>
   ‚Ä¢ Or scan QR code from app settings

3Ô∏è‚É£ <b>Benefits of mobile app:</b>
   ‚Ä¢ Real-time push notifications
   ‚Ä¢ Detailed ETF analytics
   ‚Ä¢ Portfolio tracking
   ‚Ä¢ Custom alerts

üí° <i>You can still receive basic notifications via Telegram without the app</i>

<i>Use /help to see available commands</i>
          `.trim();

            await this.bot.sendMessage(chatId, welcomeMessage, {
              parse_mode: 'HTML',
            });

            this.logger.log(
              `‚úÖ New Telegram-only user ${userName} (${chatId}) created in ${defaultApp.displayName} - no deviceId (app installation required)`,
            );
          }
        } catch (error) {
          this.logger.error('‚ùå Error processing /start command:', error);
        }
      })();
    });

    // /start command without parameters
    this.bot.onText(/^\/start$/, async (msg) => {
      const chatId = msg.chat.id;
      const userName = msg.from?.first_name || 'User';

      this.logger.log(
        `üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç ${userName} (${chatId})`,
      );

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram Chat ID
        const existingUser = await this.prismaService.user.findUnique({
          where: { telegramChatId: chatId.toString() },
          include: { application: true },
        });

        if (existingUser) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
          const welcomeMessage = `
ü§ñ <b>Welcome back to ETF Tracker!</b>

üëã Hello, ${userName}!

üîî <b>Telegram notifications are active!</b>

üìã <b>Available commands:</b>

<b>Basic Commands:</b>
/start - Subscribe to ETF notifications
/stop - Unsubscribe from notifications
/status - Check subscription status
/help - Show detailed help
/app - Get app installation instructions
/link - Link Telegram to mobile app

<b>ETF Data Commands:</b>
/bitcoin - Get Bitcoin ETF flow data
/ethereum - Get Ethereum ETF flow data
/summary - Get both Bitcoin & Ethereum summary

<b>About the bot:</b>
I send notifications about new ETF flow data:
‚Ä¢ Bitcoin ETF flows
‚Ä¢ Ethereum ETF flows
‚Ä¢ Significant changes (>20%)

üîî Notifications are sent automatically when new data appears.

<i>Use /help for detailed information about each command!</i>
          `.trim();

          await this.bot.sendMessage(chatId, welcomeMessage, {
            parse_mode: 'HTML',
          });

          this.logger.log(
            `‚úÖ Existing user ${userName} (${chatId}) received welcome message`,
          );
        } else {
          // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≤—è–∑–∫–µ
          const linkMessage = `
ü§ñ <b>Welcome to ETF Tracker Bot!</b>

üëã Hello, ${userName}!

üì± To receive notifications, you need to first register in the ETF Flow Tracker application.

üîó <b>How to link Telegram:</b>
1. Open the ETF Flow Tracker application
2. Go to settings
3. Find the "Device ID" section
4. Copy your Device ID
5. Send command: <code>/link YOUR_DEVICE_ID</code>

üìã <b>Available commands:</b>

<b>Basic Commands:</b>
/start - Subscribe to ETF notifications
/stop - Unsubscribe from notifications
/status - Check subscription status
/help - Show detailed help
/app - Get app installation instructions
/link - Link Telegram to mobile app

<b>ETF Data Commands:</b>
/bitcoin - Get Bitcoin ETF flow data
/ethereum - Get Ethereum ETF flow data
/summary - Get both Bitcoin & Ethereum summary

<b>About the bot:</b>
I send notifications about new ETF flow data:
‚Ä¢ Bitcoin ETF flows
‚Ä¢ Ethereum ETF flows
‚Ä¢ Significant changes (>20%)

üîî Notifications are sent automatically when new data appears.

<i>After linking, you will receive notifications automatically!</i>
          `.trim();

          await this.bot.sendMessage(chatId, linkMessage, {
            parse_mode: 'HTML',
          });

          this.logger.log(
            `üìù New user ${userName} (${chatId}) received linking instructions`,
          );
        }
      } catch (error) {
        this.logger.error(
          '‚ùå Error processing /start command without parameters:',
          error,
        );
        await this.bot.sendMessage(
          chatId,
          '‚ùå Error processing command. Please try again later.',
        );
      }
    });

    // /stop command
    this.bot.onText(/\/stop/, async (msg) => {
      const chatId = msg.chat.id;
      const userName = msg.from?.first_name || 'User';

      try {
        const user = await this.prismaService.user.findUnique({
          where: { telegramChatId: chatId.toString() },
        });

        if (user) {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const currentSettings = (user.settings as any) || {};

          // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          const updatedSettings = {
            ...currentSettings,
            notifications: {
              ...currentSettings.notifications,
              enableTelegramNotifications: false,
            },
          };

          await this.prismaService.user.update({
            where: { id: user.id },
            data: {
              settings: updatedSettings,
            },
          });

          const stopMessage = `
üîï <b>Telegram notifications disabled</b>

üëã Goodbye, ${userName}!

You will no longer receive Telegram notifications about ETF flows.

<i>Use /start to reactivate</i>
          `.trim();

          await this.bot.sendMessage(chatId, stopMessage, {
            parse_mode: 'HTML',
          });

          this.logger.log(
            `‚ùå User ${userName} (${chatId}) disabled Telegram notifications`,
          );
        } else {
          await this.bot.sendMessage(
            chatId,
            '‚ùå You are not registered in the system.',
          );
        }
      } catch (error) {
        this.logger.error('‚ùå Error processing /stop command:', error);
      }
    });

    // /status command
    this.bot.onText(/\/status/, async (msg) => {
      const chatId = msg.chat.id;

      try {
        const user = await this.prismaService.user.findUnique({
          where: { telegramChatId: chatId.toString() },
          include: { application: true },
        });

        if (user) {
          // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const settings = (user.settings as any) || {};
          const profile = settings.profile || {};
          const notifications = settings.notifications || {};

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          let appStatus = '';
          let deviceIdDisplay = '';

          if (user.deviceId) {
            if (user.deviceId.startsWith('telegram_')) {
              appStatus = '‚ö†Ô∏è Telegram-only (Mobile app not connected)';
              deviceIdDisplay = `${user.deviceId} (Telegram ID)`;
            } else {
              appStatus = '‚úÖ Mobile app connected';
              deviceIdDisplay = user.deviceId;
            }
          } else {
            appStatus = '‚ùå Mobile app not connected';
            deviceIdDisplay = 'Not specified';
          }

          const statusMessage = `
üìä <b>Account Status</b>

üë§ User: ${profile.firstName || 'Not specified'} ${profile.lastName || ''}
üì± Application: ${user.application.displayName}
üñ•Ô∏è OS: ${user.os || 'Unknown'}
üÜî Device ID: ${deviceIdDisplay}
üì≤ Mobile App: ${appStatus}

üîî <b>Notifications:</b>
‚Ä¢ Telegram: ${notifications.enableTelegramNotifications ? '‚úÖ Enabled' : '‚ùå Disabled'}
‚Ä¢ ETF Updates: ${notifications.enableETFUpdates ? '‚úÖ Enabled' : '‚ùå Disabled'}
‚Ä¢ Significant Changes: ${notifications.enableSignificantFlow ? '‚úÖ Enabled' : '‚ùå Disabled'}

üìÖ Registration: ${new Date(user.createdAt).toLocaleDateString('en-US')}
üîó Telegram: ${user.telegramChatId ? '‚úÖ Linked' : '‚ùå Not linked'}
üïê Last Used: ${new Date(user.lastUsed).toLocaleString('en-US')}

${
  !user.deviceId || user.deviceId.startsWith('telegram_')
    ? 'üí° <i>Use /app to get mobile app installation instructions</i>'
    : '<i>Use /start to activate or /stop to disable</i>'
}
          `.trim();

          await this.bot.sendMessage(chatId, statusMessage, {
            parse_mode: 'HTML',
          });
        } else {
          await this.bot.sendMessage(
            chatId,
            '‚ùå You are not registered in the system. Use /start to register.',
          );
        }
      } catch (error) {
        this.logger.error('‚ùå Error processing /status command:', error);
      }
    });

    // /help command
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.prismaService.user.findUnique({
        where: { telegramChatId: chatId.toString() },
        include: { application: true },
      });

      let deviceStatusMessage = '';
      if (user) {
        if (user.deviceId) {
          deviceStatusMessage = `
‚úÖ <b>Mobile app connected!</b>
üÜî Device ID: <code>${user.deviceId}</code>
üì± You have full functionality enabled.
          `.trim();
        } else {
          deviceStatusMessage = `
‚ö†Ô∏è <b>Mobile app not connected</b>
üì± Install the app for full functionality:
‚Ä¢ iOS: [App Store Link]
‚Ä¢ Android: [Google Play Link]

üÜî Your Telegram Device ID: <code>telegram_${chatId}</code>
          `.trim();
        }
      }

      const helpMessage = `
üìã <b>Available commands:</b>

/start - Subscribe to ETF notifications
/stop - Unsubscribe from notifications
/status - Check subscription status
/help - Show this help
/app - Get app installation instructions

üìä <b>ETF Data Commands:</b>
/bitcoin - Get Bitcoin ETF flow data
/ethereum - Get Ethereum ETF flow data
/summary - Get both Bitcoin & Ethereum summary

üìä <b>About the bot:</b>
I send notifications about new ETF flow data:
‚Ä¢ Bitcoin ETF flows
‚Ä¢ Ethereum ETF flows
‚Ä¢ Significant changes (>20%)

üîî Notifications are sent automatically when new data appears.

${deviceStatusMessage}
      `.trim();

      await this.bot.sendMessage(chatId, helpMessage, {
        parse_mode: 'HTML',
      });
    });

    // /app command - Get app installation instructions
    this.bot.onText(/\/app/, async (msg) => {
      const chatId = msg.chat.id;
      const userName = msg.from?.first_name || 'User';

      try {
        const user = await this.prismaService.user.findUnique({
          where: { telegramChatId: chatId.toString() },
          include: { application: true },
        });

        if (!user) {
          await this.bot.sendMessage(
            chatId,
            '‚ùå You are not registered. Please use /start first.',
          );
          return;
        }

        const appMessage = `
üì± <b>${user.application.displayName} - Installation Guide</b>

üëã Hello, ${userName}!

üîó <b>Download Links:</b>
‚Ä¢ iOS: [App Store Link]
‚Ä¢ Android: [Google Play Link]

üìã <b>Installation Steps:</b>

1Ô∏è‚É£ <b>Download & Install:</b>
   ‚Ä¢ Click the appropriate link above
   ‚Ä¢ Install the app on your device

2Ô∏è‚É£ <b>Connect to Telegram:</b>
   ‚Ä¢ Open the app
   ‚Ä¢ Go to Settings ‚Üí Telegram Notifications
   ‚Ä¢ Enter this Device ID: <code>telegram_${chatId}</code>
   ‚Ä¢ Or scan QR code from app settings

3Ô∏è‚É£ <b>Verify Connection:</b>
   ‚Ä¢ Use /status command to check connection
   ‚Ä¢ You should see "Mobile app connected"

üéØ <b>Benefits of Mobile App:</b>
‚Ä¢ Real-time push notifications
‚Ä¢ Detailed ETF analytics & charts
‚Ä¢ Portfolio tracking
‚Ä¢ Custom alerts & thresholds
‚Ä¢ Offline data access
‚Ä¢ Better performance

üí° <b>Note:</b>
You can still receive basic notifications via Telegram without the app, but the mobile app provides much more functionality.

<i>Use /status to check your connection status</i>
        `.trim();

        await this.bot.sendMessage(chatId, appMessage, {
          parse_mode: 'HTML',
        });

        this.logger.log(
          `üì± User ${userName} (${chatId}) requested app installation instructions`,
        );
      } catch (error) {
        this.logger.error('‚ùå Error processing /app command:', error);
        await this.bot.sendMessage(
          chatId,
          '‚ùå Error getting app information. Please try again later.',
        );
      }
    });

    // /ethereum command - Get Ethereum ETF data
    this.bot.onText(/\/ethereum/, async (msg) => {
      const chatId = msg.chat.id;
      const userName = msg.from?.first_name || 'User';

      try {
        const ethereumData =
          await this.etfFlowService.getETFFlowData('ethereum');

        if (!ethereumData || ethereumData.length === 0) {
          await this.bot.sendMessage(
            chatId,
            'üìä <b>Ethereum ETF Data</b>\n\n‚ùå No data available at the moment.',
            { parse_mode: 'HTML' },
          );
          return;
        }

        // Get latest data
        const latestData = ethereumData[0] as any;
        const totalFlow = latestData.total || 0;

        // Calculate 7-day average
        const sevenDayData = ethereumData.slice(0, 7);
        const sevenDayAverage =
          sevenDayData.reduce((sum, day) => sum + (day.total || 0), 0) /
          sevenDayData.length;

        const message = `
üìä <b>Ethereum ETF Flow Data</b>

üìÖ <b>Latest Data (${latestData.date}):</b>
üí∞ Total Flow: <b>${totalFlow.toLocaleString()} ETH</b>

üìà <b>7-Day Average:</b>
üìä Average Flow: <b>${sevenDayAverage.toLocaleString()} ETH</b>

üè¢ <b>Top Performers:</b>
‚Ä¢ BlackRock: ${(latestData.blackrock || 0).toLocaleString()} ETH
‚Ä¢ Fidelity: ${(latestData.fidelity || 0).toLocaleString()} ETH
‚Ä¢ Bitwise: ${(latestData.bitwise || 0).toLocaleString()} ETH
‚Ä¢ Grayscale: ${(latestData.grayscale || 0).toLocaleString()} ETH

üìä <b>All Funds:</b>
‚Ä¢ BlackRock: ${(latestData.blackrock || 0).toLocaleString()} ETH
‚Ä¢ Fidelity: ${(latestData.fidelity || 0).toLocaleString()} ETH
‚Ä¢ Bitwise: ${(latestData.bitwise || 0).toLocaleString()} ETH
‚Ä¢ 21Shares: ${(latestData.twentyOneShares || 0).toLocaleString()} ETH
‚Ä¢ VanEck: ${(latestData.vanEck || 0).toLocaleString()} ETH
‚Ä¢ Invesco: ${(latestData.invesco || 0).toLocaleString()} ETH
‚Ä¢ Franklin: ${(latestData.franklin || 0).toLocaleString()} ETH
‚Ä¢ Grayscale: ${(latestData.grayscale || 0).toLocaleString()} ETH
‚Ä¢ Grayscale ETH: ${(latestData.grayscaleCrypto || 0).toLocaleString()} ETH

<i>Data source: Farside.co.uk</i>
        `.trim();

        await this.bot.sendMessage(chatId, message, {
          parse_mode: 'HTML',
        });

        this.logger.log(
          `üìä User ${userName} (${chatId}) requested Ethereum ETF data`,
        );
      } catch (error) {
        this.logger.error('‚ùå Error processing /ethereum command:', error);
        await this.bot.sendMessage(
          chatId,
          '‚ùå Error getting Ethereum ETF data. Please try again later.',
        );
      }
    });

    // /bitcoin command - Get Bitcoin ETF data
    this.bot.onText(/\/bitcoin/, async (msg) => {
      const chatId = msg.chat.id;
      const userName = msg.from?.first_name || 'User';

      try {
        const bitcoinData = await this.etfFlowService.getETFFlowData('bitcoin');

        if (!bitcoinData || bitcoinData.length === 0) {
          await this.bot.sendMessage(
            chatId,
            'üìä <b>Bitcoin ETF Data</b>\n\n‚ùå No data available at the moment.',
            { parse_mode: 'HTML' },
          );
          return;
        }

        // Get latest data
        const latestData = bitcoinData[0] as any;
        const totalFlow = latestData.total || 0;

        // Calculate 7-day average
        const sevenDayData = bitcoinData.slice(0, 7);
        const sevenDayAverage =
          sevenDayData.reduce((sum, day) => sum + (day.total || 0), 0) /
          sevenDayData.length;

        const message = `
üìä <b>Bitcoin ETF Flow Data</b>

üìÖ <b>Latest Data (${latestData.date}):</b>
üí∞ Total Flow: <b>${totalFlow.toLocaleString()} BTC</b>

üìà <b>7-Day Average:</b>
üìä Average Flow: <b>${sevenDayAverage.toLocaleString()} BTC</b>

üè¢ <b>Top Performers:</b>
‚Ä¢ BlackRock: ${(latestData.blackrock || 0).toLocaleString()} BTC
‚Ä¢ Fidelity: ${(latestData.fidelity || 0).toLocaleString()} BTC
‚Ä¢ Bitwise: ${(latestData.bitwise || 0).toLocaleString()} BTC
‚Ä¢ Grayscale: ${(latestData.grayscale || 0).toLocaleString()} BTC

üìä <b>All Funds:</b>
‚Ä¢ BlackRock: ${(latestData.blackrock || 0).toLocaleString()} BTC
‚Ä¢ Fidelity: ${(latestData.fidelity || 0).toLocaleString()} BTC
‚Ä¢ Bitwise: ${(latestData.bitwise || 0).toLocaleString()} BTC
‚Ä¢ 21Shares: ${(latestData.twentyOneShares || 0).toLocaleString()} BTC
‚Ä¢ VanEck: ${(latestData.vanEck || 0).toLocaleString()} BTC
‚Ä¢ Invesco: ${(latestData.invesco || 0).toLocaleString()} BTC
‚Ä¢ Franklin: ${(latestData.franklin || 0).toLocaleString()} BTC
‚Ä¢ Valkyrie: ${(latestData.valkyrie || 0).toLocaleString()} BTC
‚Ä¢ WisdomTree: ${(latestData.wisdomTree || 0).toLocaleString()} BTC
‚Ä¢ Grayscale: ${(latestData.grayscale || 0).toLocaleString()} BTC
‚Ä¢ Grayscale BTC: ${(latestData.grayscaleBtc || 0).toLocaleString()} BTC

<i>Data source: Farside.co.uk</i>
        `.trim();

        await this.bot.sendMessage(chatId, message, {
          parse_mode: 'HTML',
        });

        this.logger.log(
          `üìä User ${userName} (${chatId}) requested Bitcoin ETF data`,
        );
      } catch (error) {
        this.logger.error('‚ùå Error processing /bitcoin command:', error);
        await this.bot.sendMessage(
          chatId,
          '‚ùå Error getting Bitcoin ETF data. Please try again later.',
        );
      }
    });

    // /summary command - Get both Bitcoin and Ethereum ETF data
    this.bot.onText(/\/summary/, async (msg) => {
      const chatId = msg.chat.id;
      const userName = msg.from?.first_name || 'User';

      try {
        const [bitcoinData, ethereumData] = await Promise.all([
          this.etfFlowService.getETFFlowData('bitcoin'),
          this.etfFlowService.getETFFlowData('ethereum'),
        ]);

        if (
          (!bitcoinData || bitcoinData.length === 0) &&
          (!ethereumData || ethereumData.length === 0)
        ) {
          await this.bot.sendMessage(
            chatId,
            'üìä <b>ETF Summary</b>\n\n‚ùå No data available at the moment.',
            { parse_mode: 'HTML' },
          );
          return;
        }

        let message = 'üìä <b>ETF Flow Summary</b>\n\n';

        // Bitcoin data
        if (bitcoinData && bitcoinData.length > 0) {
          const latestBtc = bitcoinData[0] as any;
          const btcTotal = latestBtc.total || 0;
          const btcSevenDay = bitcoinData.slice(0, 7);
          const btcAverage =
            btcSevenDay.reduce((sum, day) => sum + (day.total || 0), 0) /
            btcSevenDay.length;

          message += `üü† <b>Bitcoin ETF (${latestBtc.date}):</b>\n`;
          message += `üí∞ Total Flow: <b>${btcTotal.toLocaleString()} BTC</b>\n`;
          message += `üìà 7-Day Avg: <b>${btcAverage.toLocaleString()} BTC</b>\n\n`;
        }

        // Ethereum data
        if (ethereumData && ethereumData.length > 0) {
          const latestEth = ethereumData[0] as any;
          const ethTotal = latestEth.total || 0;
          const ethSevenDay = ethereumData.slice(0, 7);
          const ethAverage =
            ethSevenDay.reduce((sum, day) => sum + (day.total || 0), 0) /
            ethSevenDay.length;

          message += `üîµ <b>Ethereum ETF (${latestEth.date}):</b>\n`;
          message += `üí∞ Total Flow: <b>${ethTotal.toLocaleString()} ETH</b>\n`;
          message += `üìà 7-Day Avg: <b>${ethAverage.toLocaleString()} ETH</b>\n\n`;
        }

        message +=
          'üí° <i>Use /bitcoin or /ethereum for detailed breakdown</i>\n';
        message += '<i>Data source: Farside.co.uk</i>';

        await this.bot.sendMessage(chatId, message, {
          parse_mode: 'HTML',
        });

        this.logger.log(
          `üìä User ${userName} (${chatId}) requested ETF summary`,
        );
      } catch (error) {
        this.logger.error('‚ùå Error processing /summary command:', error);
        await this.bot.sendMessage(
          chatId,
          '‚ùå Error getting ETF summary. Please try again later.',
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
    });

    this.bot.on('polling_error', (error) => {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
    });

    this.logger.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  async sendETFUpdateNotification(data: ETFNotificationData): Promise<boolean> {
    if (!this.isInitialized) {
      this.logger.warn('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return false;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
      const activeUsers = await this.prismaService.user.findMany({
        where: {
          isActive: true,
          telegramChatId: { not: null },
          settings: {
            path: ['notifications', 'enableTelegramNotifications'],
            equals: true,
          },
        },
      });

      if (activeUsers.length === 0) {
        this.logger.log(
          'üì± –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏',
        );
        return true;
      }

      const message = this.formatETFMessage(data);
      let successCount = 0;
      let errorCount = 0;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      for (const user of activeUsers) {
        try {
          await this.bot.sendMessage(parseInt(user.telegramChatId!), message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
          });
          successCount++;
        } catch (error) {
          errorCount++;
          this.logger.warn(
            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramChatId}:`,
            error.message,
          );

          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –æ—Ç–∫–ª—é—á–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          if (error.response?.body?.error_code === 403) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentSettings = (user.settings as any) || {};

            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            const updatedSettings = {
              ...currentSettings,
              notifications: {
                ...currentSettings.notifications,
                enableTelegramNotifications: false,
              },
            };

            await this.prismaService.user.update({
              where: { id: user.id },
              data: {
                settings: updatedSettings,
              },
            });
            this.logger.log(
              `üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegramChatId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã`,
            );
          }
        }
      }

      this.logger.log(
        `‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`,
      );
      return successCount > 0;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
   */
  async sendSignificantFlowNotification(
    type: 'bitcoin' | 'ethereum',
    flow: number,
    previousFlow: number,
  ): Promise<boolean> {
    if (!this.isInitialized) {
      this.logger.warn('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return false;
    }

    try {
      const change = flow - previousFlow;
      const changePercent =
        previousFlow !== 0 ? (change / Math.abs(previousFlow)) * 100 : 0;

      const isPositive = change > 0;
      const emoji = isPositive ? 'üìà' : 'üìâ';
      const cryptoName = type === 'bitcoin' ? 'Bitcoin' : 'Ethereum';

      const message = `
${emoji} <b>${cryptoName} ETF - –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ</b>

${isPositive ? '–ü—Ä–∏—Ç–æ–∫' : '–û—Ç—Ç–æ–∫'}: <b>${Math.abs(change).toFixed(2)}M$</b>
–ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>${changePercent.toFixed(1)}%</b>
–¢–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫: <b>${flow.toFixed(2)}M$</b>
–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫: <b>${previousFlow.toFixed(2)}M$</b>

<i>${new Date().toLocaleString('ru-RU')}</i>
      `.trim();

      const activeUsers = await this.prismaService.user.findMany({
        where: { isActive: true },
      });

      let successCount = 0;
      for (const user of activeUsers) {
        if (!user.telegramChatId) continue;

        try {
          await this.bot.sendMessage(parseInt(user.telegramChatId), message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
          });
          successCount++;
        } catch (error) {
          if (error.response?.body?.error_code === 403) {
            await this.prismaService.user.update({
              where: { telegramChatId: user.telegramChatId },
              data: { isActive: false },
            });
          }
        }
      }

      this.logger.log(
        `‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ${type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      );
      return successCount > 0;
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏:',
        error,
      );
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendTestNotification(): Promise<boolean> {
    if (!this.isInitialized) {
      this.logger.warn('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return false;
    }

    try {
      const message = `
üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>

ETF Tracker —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

<i>${new Date().toLocaleString('ru-RU')}</i>
      `.trim();

      const activeUsers = await this.prismaService.user.findMany({
        where: { isActive: true },
      });

      let successCount = 0;
      for (const user of activeUsers) {
        if (!user.telegramChatId) continue;

        try {
          await this.bot.sendMessage(parseInt(user.telegramChatId), message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
          });
          successCount++;
        } catch (error) {
          if (error.response?.body?.error_code === 403) {
            await this.prismaService.user.update({
              where: { telegramChatId: user.telegramChatId },
              data: { isActive: false },
            });
          }
        }
      }

      this.logger.log(
        `‚úÖ Telegram —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      );
      return successCount > 0;
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
        error,
      );
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–∞–Ω–Ω—ã—Ö ETF
   */
  private formatETFMessage(data: ETFNotificationData): string {
    const bitcoinFlowText =
      data.bitcoinFlow >= 0
        ? `+${data.bitcoinFlow.toFixed(2)}M$`
        : `${data.bitcoinFlow.toFixed(2)}M$`;

    const ethereumFlowText =
      data.ethereumFlow >= 0
        ? `+${data.ethereumFlow.toFixed(2)}M$`
        : `${data.ethereumFlow.toFixed(2)}M$`;

    const bitcoinEmoji = data.bitcoinFlow >= 0 ? 'üìà' : 'üìâ';
    const ethereumEmoji = data.ethereumFlow >= 0 ? 'üìà' : 'üìâ';

    let message = `
üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ETF –ø–æ—Ç–æ–∫–æ–≤</b>

${bitcoinEmoji} <b>Bitcoin ETF:</b> ${bitcoinFlowText}
${ethereumEmoji} <b>Ethereum ETF:</b> ${ethereumFlowText}

<b>–û–±—â–∏–µ –∏—Ç–æ–≥–∏:</b>
üí∞ Bitcoin: ${data.bitcoinTotal.toFixed(2)}M$
üí∞ Ethereum: ${data.ethereumTotal.toFixed(2)}M$

<i>${new Date().toLocaleString('ru-RU')}</i>
    `.trim();

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (data.bitcoinData || data.ethereumData) {
      message += '\n\n<b>–î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–æ–Ω–¥–∞–º:</b>\n';

      if (data.bitcoinData) {
        message += '\n<b>Bitcoin ETF:</b>\n';
        const btcFunds = this.formatFundDetails(data.bitcoinData);
        message += btcFunds;
      }

      if (data.ethereumData) {
        message += '\n<b>Ethereum ETF:</b>\n';
        const ethFunds = this.formatFundDetails(data.ethereumData);
        message += ethFunds;
      }
    }

    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ —Ñ–æ–Ω–¥–∞–º
   */
  private formatFundDetails(fundData: any): string {
    const funds: string[] = [];

    if (fundData.blackrock && fundData.blackrock !== 0) {
      funds.push(`BlackRock: ${fundData.blackrock.toFixed(2)}M$`);
    }
    if (fundData.fidelity && fundData.fidelity !== 0) {
      funds.push(`Fidelity: ${fundData.fidelity.toFixed(2)}M$`);
    }
    if (fundData.bitwise && fundData.bitwise !== 0) {
      funds.push(`Bitwise: ${fundData.bitwise.toFixed(2)}M$`);
    }
    if (fundData.twentyOneShares && fundData.twentyOneShares !== 0) {
      funds.push(`21Shares: ${fundData.twentyOneShares.toFixed(2)}M$`);
    }
    if (fundData.vanEck && fundData.vanEck !== 0) {
      funds.push(`VanEck: ${fundData.vanEck.toFixed(2)}M$`);
    }
    if (fundData.invesco && fundData.invesco !== 0) {
      funds.push(`Invesco: ${fundData.invesco.toFixed(2)}M$`);
    }
    if (fundData.franklin && fundData.franklin !== 0) {
      funds.push(`Franklin: ${fundData.franklin.toFixed(2)}M$`);
    }
    if (fundData.grayscale && fundData.grayscale !== 0) {
      funds.push(`Grayscale: ${fundData.grayscale.toFixed(2)}M$`);
    }
    if (fundData.valkyrie && fundData.valkyrie !== 0) {
      funds.push(`Valkyrie: ${fundData.valkyrie.toFixed(2)}M$`);
    }
    if (fundData.wisdomTree && fundData.wisdomTree !== 0) {
      funds.push(`WisdomTree: ${fundData.wisdomTree.toFixed(2)}M$`);
    }
    if (fundData.grayscaleEth && fundData.grayscaleEth !== 0) {
      funds.push(`Grayscale ETH: ${fundData.grayscaleEth.toFixed(2)}M$`);
    }
    if (fundData.grayscaleBtc && fundData.grayscaleBtc !== 0) {
      funds.push(`Grayscale BTC: ${fundData.grayscaleBtc.toFixed(2)}M$`);
    }

    return funds.length > 0 ? funds.join('\n') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async getUserStats(): Promise<{
    total: number;
    active: number;
    inactive: number;
  }> {
    try {
      const [total, active] = await Promise.all([
        this.prismaService.user.count(),
        this.prismaService.user.count({
          where: { isActive: true },
        }),
      ]);

      return {
        total,
        active,
        inactive: total - active,
      };
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return { total: 0, active: 0, inactive: 0 };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
   */
  isBotInitialized(): boolean {
    return this.isInitialized;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
   */
  async getBotInfo(): Promise<any> {
    if (!this.isInitialized || !this.bot) {
      return null;
    }

    try {
      const botInfo = await this.bot.getMe();
      return botInfo;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendTestMessage(chatId: string, message: string): Promise<boolean> {
    if (!this.isInitialized || !this.bot) {
      this.logger.warn('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return false;
    }

    try {
      await this.bot.sendMessage(chatId, `üß™ ${message}`);
      this.logger.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
      return true;
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`,
        error,
      );
      return false;
    }
  }

  private async setupBotCommandsMenu() {
    try {
      const commands = [
        { command: 'start', description: 'Subscribe to ETF notifications' },
        { command: 'help', description: 'Show detailed help and commands' },
        { command: 'status', description: 'Check your subscription status' },
        { command: 'bitcoin', description: 'Get Bitcoin ETF flow data' },
        { command: 'ethereum', description: 'Get Ethereum ETF flow data' },
        {
          command: 'summary',
          description: 'Get both Bitcoin & Ethereum summary',
        },
        { command: 'link', description: 'Link Telegram to mobile app' },
        { command: 'app', description: 'Get app installation instructions' },
        { command: 'stop', description: 'Unsubscribe from notifications' },
      ];

      await this.bot.setMyCommands(commands);
      this.logger.log('‚úÖ Bot commands menu setup completed');
    } catch (error) {
      this.logger.error('‚ùå Error setting up bot commands menu:', error);
    }
  }
}
