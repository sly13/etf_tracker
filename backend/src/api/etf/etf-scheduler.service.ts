import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { UniversalETFFlowService } from './universal-etf-flow.service';
import { NotificationService } from '../notifications/notification.service';
import { ETFNotificationService } from './etf-notification.service';
import { schedulerConfig } from '../../shared/config/scheduler.config';

@Injectable()
export class ETFSchedulerService {
  private readonly logger = new Logger(ETFSchedulerService.name);

  constructor(
    private readonly etfFlowService: UniversalETFFlowService,
    private readonly notificationService: NotificationService,
    private readonly etfNotificationService: ETFNotificationService,
  ) {}

  // –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å –≤ 00 –º–∏–Ω—É—Ç
  @Cron(CronExpression.EVERY_HOUR)
  async handleHourlyETFDataUpdate() {
    if (!schedulerConfig.enableAutoUpdate) {
      this.logger.log('‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      return;
    }

    this.logger.log('üïê –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ETF –¥–∞–Ω–Ω—ã—Ö...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const shouldUpdate = await this.etfFlowService.shouldUpdateToday();
    if (!shouldUpdate) {
      this.logger.log(
        '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã',
      );
      return;
    }

    try {
      // –ü–∞—Ä—Å–∏–Ω–≥ Ethereum –¥–∞–Ω–Ω—ã—Ö
      this.logger.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ Ethereum ETF –¥–∞–Ω–Ω—ã—Ö...');
      const ethereumData =
        await this.etfFlowService.parseETFFlowData('ethereum');
      const ethereumSaveResult = await this.etfFlowService.saveETFFlowData(
        'ethereum',
        ethereumData,
      );
      this.logger.log(
        `‚úÖ Ethereum –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${ethereumData.length} –∑–∞–ø–∏—Å–µ–π, –Ω–æ–≤—ã—Ö: ${ethereumSaveResult.newDataCount}`,
      );

      // –ü–∞—Ä—Å–∏–Ω–≥ Bitcoin –¥–∞–Ω–Ω—ã—Ö
      this.logger.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ Bitcoin ETF –¥–∞–Ω–Ω—ã—Ö...');
      const bitcoinData = await this.etfFlowService.parseETFFlowData('bitcoin');
      const bitcoinSaveResult = await this.etfFlowService.saveETFFlowData(
        'bitcoin',
        bitcoinData,
      );
      this.logger.log(
        `‚úÖ Bitcoin –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${bitcoinData.length} –∑–∞–ø–∏—Å–µ–π, –Ω–æ–≤—ã—Ö: ${bitcoinSaveResult.newDataCount}`,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö ETF
      const allNewRecords = [
        ...(ethereumSaveResult.newRecords || []),
        ...(bitcoinSaveResult.newRecords || []),
      ];

      if (allNewRecords.length > 0) {
        this.logger.log(
          `üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${allNewRecords.length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π ETF –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`,
        );
        await this.etfNotificationService.sendETFNotificationsForNewRecords(
          'etf.flow',
        );
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      if (ethereumSaveResult.hasNewData || bitcoinSaveResult.hasNewData) {
        await this.sendETFUpdateNotification(
          ethereumData,
          bitcoinData,
          ethereumSaveResult,
          bitcoinSaveResult,
        );
      } else {
        this.logger.log(
          'üì≠ –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è',
        );
      }

      this.logger.log(
        'üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ETF –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!',
      );
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ETF –¥–∞–Ω–Ω—ã—Ö:',
        error,
      );
    }
  }

  // –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞
  @Cron('0 9 * * *')
  async handleDailyETFDataUpdate() {
    this.logger.log('üåÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ETF –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      this.logger.log('üìä –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö ETF –¥–∞–Ω–Ω—ã—Ö...');
      await this.etfFlowService.parseAllETFFlowData();
      this.logger.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ETF –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ETF –¥–∞–Ω–Ω—ã—Ö:',
        error,
      );
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  @Cron('*/15 * * * *')
  async handleETFNotificationsUpdate() {
    if (!schedulerConfig.enableAutoUpdate) {
      return;
    }

    this.logger.log('üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π ETF –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    try {
      await this.etfNotificationService.sendETFNotificationsForNewRecords(
        'etf.flow',
      );
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö ETF:',
        error,
      );
    }
  }

  // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async manualUpdate() {
    this.logger.log('üîÑ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ETF –¥–∞–Ω–Ω—ã—Ö...');
    await this.handleHourlyETFDataUpdate();
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ETF
   */
  private async sendETFUpdateNotification(
    ethereumData: any[],
    bitcoinData: any[],
    ethereumSaveResult?: any,
    bitcoinSaveResult?: any,
  ) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const ethereumNewData = ethereumSaveResult?.newData;
      const bitcoinNewData = bitcoinSaveResult?.newData;

      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (!ethereumNewData && !bitcoinNewData) {
        this.logger.log('üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const latestEthereum = ethereumData[0];
      const latestBitcoin = bitcoinData[0];

      if (!latestEthereum || !latestBitcoin) {
        this.logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ
      const ethereumFlow = ethereumNewData?.total || latestEthereum.total || 0;
      const bitcoinFlow = bitcoinNewData?.total || latestBitcoin.total || 0;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
      if (Math.abs(ethereumFlow) > 0.1 || Math.abs(bitcoinFlow) > 0.1) {
        const notificationData = {
          bitcoinFlow,
          ethereumFlow,
          bitcoinTotal: bitcoinFlow,
          ethereumTotal: ethereumFlow,
          date:
            ethereumNewData?.date ||
            latestEthereum.date ||
            new Date().toISOString(),
          bitcoinData: bitcoinNewData || latestBitcoin,
          ethereumData: ethereumNewData || latestEthereum,
        };

        await this.notificationService.sendETFNotifications(
          notificationData,
          'etf.flow', // appName
        );
        this.logger.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ETF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } else {
        this.logger.log('üìä –ü–æ—Ç–æ–∫–∏ ETF —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ ETF:', error);
    }
  }
}
