import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../../shared/prisma/prisma.service';
import * as puppeteer from 'puppeteer';
import {
  ETFFlowData,
  BTCFlowData,
  SolFlowData,
  ParsingResult,
} from './etf-types';
import { parseEthereum } from './parsers/ethereum.parser';
import { parseBitcoin } from './parsers/bitcoin.parser';
import { parseSolana } from './parsers/solana.parser';

@Injectable()
export class UniversalETFFlowService {
  private readonly logger = new Logger(UniversalETFFlowService.name);

  private readonly urls = {
    ethereum: 'https://farside.co.uk/ethereum-etf-flow-all-data/',
    bitcoin: 'https://farside.co.uk/bitcoin-etf-flow-all-data/',
    solana: process.env.SOLANA_FLOW_URL || 'https://farside.co.uk/sol/',
  };

  constructor(private readonly prisma: PrismaService) {}

  async parseETFFlowData(
    type: 'ethereum' | 'bitcoin' | 'solana',
  ): Promise<ETFFlowData[] | BTCFlowData[] | SolFlowData[]> {
    let browser: puppeteer.Browser | undefined;

    try {
      this.logger.log(
        `–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç–æ–∫–∞—Ö ${type.toUpperCase()} ETF —Å –ø–æ–º–æ—â—å—é Puppeteer`,
      );

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Puppeteer –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
      const puppeteerOptions: any = {
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-extensions',
          '--disable-plugins',
          '--disable-default-apps',
          '--disable-sync',
          '--disable-translate',
          '--hide-scrollbars',
          '--mute-audio',
          '--no-default-browser-check',
          '--no-pings',
          '--password-store=basic',
          '--use-mock-keychain',
          '--disable-blink-features=AutomationControlled',
          '--disable-ipc-flooding-protection',
        ],
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π Chrome –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (process.env.PUPPETEER_EXECUTABLE_PATH) {
        puppeteerOptions.executablePath = process.env.PUPPETEER_EXECUTABLE_PATH;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      if (process.env.PUPPETEER_ARGS) {
        puppeteerOptions.args.push(...process.env.PUPPETEER_ARGS.split(' '));
      }

      browser = await puppeteer.launch(puppeteerOptions);

      const page: puppeteer.Page = await browser.newPage();

      await page.setUserAgent(
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36',
      );

      await page.setViewport({ width: 1920, height: 1080 });

      this.logger.log(
        `–ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ ${type.toUpperCase()} ETF...`,
      );

      await page.goto(this.urls[type], {
        waitUntil: 'networkidle2',
        timeout: 30000,
      });

      this.logger.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã...');

      await page.waitForSelector('table.etf', { timeout: 10000 });

      this.logger.log('–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...');

      const rowCount = await page.evaluate(() => {
        const table = document.querySelector('table.etf');
        if (!table) return 0;

        const tbody = table.querySelector('tbody');
        if (!tbody) return 0;

        return tbody.querySelectorAll('tr').length;
      });

      this.logger.log(
        `–ù–∞–π–¥–µ–Ω–æ ${rowCount} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ ${type.toUpperCase()} ETF`,
      );
      if (type === 'ethereum') {
        const flowData = await parseEthereum(page);
        this.logger.log(
          `–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${flowData.length} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Ç–æ–∫–∞—Ö ETHEREUM ETF`,
        );
        return flowData;
      } else if (type === 'bitcoin') {
        const flowData = await parseBitcoin(page);
        this.logger.log(
          `–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${flowData.length} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Ç–æ–∫–∞—Ö BITCOIN ETF`,
        );
        return flowData;
      } else {
        const flowData = await parseSolana(page);
        this.logger.log(
          `–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${flowData.length} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Ç–æ–∫–∞—Ö SOLANA ETF`,
        );
        return flowData;
      }
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö ${type.toUpperCase()} ETF:`,
        error,
      );
      throw error;
    } finally {
      if (browser) {
        this.logger.log('–ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...');
        await browser.close();
      }
    }
  }

  async saveETFFlowData(
    type: 'ethereum' | 'bitcoin' | 'solana',
    flowData: ETFFlowData[] | BTCFlowData[] | SolFlowData[],
  ): Promise<{
    hasNewData: boolean;
    newDataCount: number;
    newData?: any;
    newRecords: any[];
  }> {
    try {
      this.logger.log(
        `–ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç–æ–∫–∞—Ö ${type.toUpperCase()} ETF –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`,
      );

      this.logger.log(
        `–°–æ—Ö—Ä–∞–Ω—è—é ${flowData.length} –∑–∞–ø–∏—Å–µ–π ${type.toUpperCase()} ETF`,
      );

      let newDataCount = 0;
      let latestNewData: any = null;
      const newRecords: any[] = [];

      for (const data of flowData) {
        const date = new Date(data.date);

        if (type === 'ethereum') {
          const ethData = data as ETFFlowData;
          // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const existingRecord = await this.prisma.eTFFlow.findUnique({
            where: { date },
            select: {
              id: true,
              total: true,
              blackrock: true,
              fidelity: true,
              bitwise: true,
              twentyOneShares: true,
              vanEck: true,
              invesco: true,
              franklin: true,
              grayscale: true,
              grayscaleEth: true,
            },
          });

          const wasExisting = !!existingRecord;

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
          await this.prisma.eTFFlow.upsert({
            where: { date },
            update: {
              blackrock: ethData.blackrock,
              fidelity: ethData.fidelity,
              bitwise: ethData.bitwise,
              twentyOneShares: ethData.twentyOneShares,
              vanEck: ethData.vanEck,
              invesco: ethData.invesco,
              franklin: ethData.franklin,
              grayscale: ethData.grayscale,
              grayscaleEth: ethData.grayscaleCrypto,
              total: ethData.total,
              updatedAt: new Date(),
            },
            create: {
              date,
              blackrock: ethData.blackrock,
              fidelity: ethData.fidelity,
              bitwise: ethData.bitwise,
              twentyOneShares: ethData.twentyOneShares,
              vanEck: ethData.vanEck,
              invesco: ethData.invesco,
              franklin: ethData.franklin,
              grayscale: ethData.grayscale,
              grayscaleEth: ethData.grayscaleCrypto,
              total: ethData.total,
            },
          });

          // –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
          const companies = [
            { name: 'blackrock', value: ethData.blackrock },
            { name: 'fidelity', value: ethData.fidelity },
            { name: 'bitwise', value: ethData.bitwise },
            { name: 'twentyOneShares', value: ethData.twentyOneShares },
            { name: 'vanEck', value: ethData.vanEck },
            { name: 'invesco', value: ethData.invesco },
            { name: 'franklin', value: ethData.franklin },
            { name: 'grayscale', value: ethData.grayscale },
            { name: 'grayscaleEth', value: ethData.grayscaleCrypto },
          ];

          for (const company of companies) {
            const previousValue = existingRecord?.[company.name] || 0;
            const currentValue = company.value || 0;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∏–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            const isNewRecord = this.isNewRecord(previousValue, currentValue);

            if (isNewRecord) {
              const newRecord = await this.createETFNewRecord({
                date,
                assetType: 'ethereum',
                company: company.name,
                amount: currentValue,
                previousAmount: previousValue,
              });

              if (newRecord) {
                newRecords.push(newRecord);
                this.logger.log(
                  `üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å Ethereum ETF: ${company.name} - ${currentValue}M (–±—ã–ª–æ: ${previousValue}M)`,
                );
              }
            }
          }

          // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ –±—ã–ª–æ, —Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          if (!wasExisting) {
            newDataCount++;
            latestNewData = ethData;
            this.logger.log(
              `üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å Ethereum ETF –¥–ª—è –¥–∞—Ç—ã: ${ethData.date}`,
            );
          }
        } else if (type === 'bitcoin') {
          const btcData = data as BTCFlowData;

          // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const existingRecord = await this.prisma.bTCFlow.findUnique({
            where: { date },
            select: {
              id: true,
              total: true,
              blackrock: true,
              fidelity: true,
              bitwise: true,
              twentyOneShares: true,
              invesco: true,
              franklin: true,
              valkyrie: true,
              vanEck: true,
              wisdomTree: true,
              grayscale: true,
              grayscaleBtc: true,
            },
          });

          const wasExisting = !!existingRecord;

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
          await this.prisma.bTCFlow.upsert({
            where: { date },
            update: {
              blackrock: btcData.blackrock,
              fidelity: btcData.fidelity,
              bitwise: btcData.bitwise,
              twentyOneShares: btcData.twentyOneShares,
              invesco: btcData.invesco,
              franklin: btcData.franklin,
              valkyrie: btcData.valkyrie,
              vanEck: btcData.vanEck,
              wisdomTree: btcData.wisdomTree,
              grayscale: btcData.grayscale,
              grayscaleBtc: btcData.grayscaleBtc,
              total: btcData.total,
              updatedAt: new Date(),
            },
            create: {
              date,
              blackrock: btcData.blackrock,
              fidelity: btcData.fidelity,
              bitwise: btcData.bitwise,
              twentyOneShares: btcData.twentyOneShares,
              invesco: btcData.invesco,
              franklin: btcData.franklin,
              valkyrie: btcData.valkyrie,
              vanEck: btcData.vanEck,
              wisdomTree: btcData.wisdomTree,
              grayscale: btcData.grayscale,
              grayscaleBtc: btcData.grayscaleBtc,
              total: btcData.total,
            },
          });

          // –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
          const companies = [
            { name: 'blackrock', value: btcData.blackrock },
            { name: 'fidelity', value: btcData.fidelity },
            { name: 'bitwise', value: btcData.bitwise },
            { name: 'twentyOneShares', value: btcData.twentyOneShares },
            { name: 'invesco', value: btcData.invesco },
            { name: 'franklin', value: btcData.franklin },
            { name: 'valkyrie', value: btcData.valkyrie },
            { name: 'vanEck', value: btcData.vanEck },
            { name: 'wisdomTree', value: btcData.wisdomTree },
            { name: 'grayscale', value: btcData.grayscale },
            { name: 'grayscaleBtc', value: btcData.grayscaleBtc },
          ];

          for (const company of companies) {
            const previousValue = existingRecord?.[company.name] || 0;
            const currentValue = company.value || 0;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∏–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            const isNewRecord = this.isNewRecord(previousValue, currentValue);

            if (isNewRecord) {
              const newRecord = await this.createETFNewRecord({
                date,
                assetType: 'bitcoin',
                company: company.name,
                amount: currentValue,
                previousAmount: previousValue,
              });

              if (newRecord) {
                newRecords.push(newRecord);
                this.logger.log(
                  `üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å Bitcoin ETF: ${company.name} - ${currentValue}M (–±—ã–ª–æ: ${previousValue}M)`,
                );
              }
            }
          }

          // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ –±—ã–ª–æ, —Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          if (!wasExisting) {
            newDataCount++;
            latestNewData = data;
            this.logger.log(
              `üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å Bitcoin ETF –¥–ª—è –¥–∞—Ç—ã: ${data.date}`,
            );
          }
        } else {
          const solData = data as SolFlowData;

          const existingRecord = await (this.prisma as any).solFlow.findUnique({
            where: { date },
            select: {
              id: true,
              total: true,
              bitwise: true,
              grayscale: true,
            },
          });

          const wasExisting = !!existingRecord;

          await (this.prisma as any).solFlow.upsert({
            where: { date },
            update: {
              bitwise: solData.bitwise,
              grayscale: solData.grayscale,
              total: solData.total,
              updatedAt: new Date(),
            },
            create: {
              date,
              bitwise: solData.bitwise,
              grayscale: solData.grayscale,
              total: solData.total,
            },
          });

          const companies = [
            { name: 'bitwise', value: solData.bitwise },
            { name: 'grayscale', value: solData.grayscale },
          ];
          for (const company of companies) {
            const previousValue = existingRecord?.[company.name] || 0;
            const currentValue = company.value || 0;
            const isNewRecord = this.isNewRecord(previousValue, currentValue);
            if (isNewRecord) {
              const newRecord = await this.createETFNewRecord({
                date,
                assetType: 'solana',
                company: company.name,
                amount: currentValue,
                previousAmount: previousValue,
              });

              if (newRecord) newRecords.push(newRecord);
            }
          }

          if (!wasExisting) {
            newDataCount++;
            latestNewData = data;
            // –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è Solana
          }
        }
      }

      this.logger.log(
        `–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç–æ–∫–∞—Ö ${type.toUpperCase()} ETF —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${newDataCount}, –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${newRecords.length}`,
      );

      return {
        hasNewData: newDataCount > 0,
        newDataCount,
        newData: latestNewData,
        newRecords,
      };
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ${type.toUpperCase()} ETF:`,
        error,
      );
      throw error;
    }
  }

  async getETFFlowData(type: 'ethereum'): Promise<ETFFlowData[]>;
  async getETFFlowData(type: 'bitcoin'): Promise<BTCFlowData[]>;
  async getETFFlowData(type: 'solana'): Promise<SolFlowData[]>;
  async getETFFlowData(
    type: 'ethereum' | 'bitcoin' | 'solana',
  ): Promise<ETFFlowData[] | BTCFlowData[] | SolFlowData[]> {
    try {
      if (type === 'ethereum') {
        const flows = await this.prisma.eTFFlow.findMany({
          orderBy: { date: 'desc' },
        });

        return flows.map((flow) => ({
          date: flow.date.toISOString().split('T')[0],
          blackrock: flow.blackrock || 0,
          fidelity: flow.fidelity || 0,
          bitwise: flow.bitwise || 0,
          twentyOneShares: flow.twentyOneShares || 0,
          vanEck: flow.vanEck || 0,
          invesco: flow.invesco || 0,
          franklin: flow.franklin || 0,
          grayscale: flow.grayscale || 0,
          grayscaleCrypto: flow.grayscaleEth || 0,
          total: flow.total || 0,
        }));
      } else if (type === 'bitcoin') {
        const flows = await this.prisma.bTCFlow.findMany({
          orderBy: { date: 'desc' },
        });

        return flows.map(
          (flow) =>
            ({
              date: flow.date.toISOString().split('T')[0],
              blackrock: flow.blackrock || 0,
              fidelity: flow.fidelity || 0,
              bitwise: flow.bitwise || 0,
              twentyOneShares: flow.twentyOneShares || 0,
              invesco: flow.invesco || 0,
              franklin: flow.franklin || 0,
              valkyrie: flow.valkyrie || 0,
              vanEck: flow.vanEck || 0,
              wisdomTree: flow.wisdomTree || 0,
              grayscale: flow.grayscale || 0,
              grayscaleBtc: flow.grayscaleBtc || 0,
              total: flow.total || 0,
            }) as BTCFlowData,
        );
      } else {
        const flows = await (this.prisma as any).solFlow.findMany({
          orderBy: { date: 'desc' },
        });

        return flows.map((flow) => ({
          date: flow.date.toISOString().split('T')[0],
          bitwise: flow.bitwise || 0,
          grayscale: flow.grayscale || 0,
          total: flow.total || 0,
        }));
      }
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ${type.toUpperCase()} ETF:`,
        error,
      );
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
   */
  private isNewRecord(previousValue: number, currentValue: number): boolean {
    // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ 0 –∏–ª–∏ null, –∞ —Ç–µ–∫—É—â–µ–µ > 0 - —ç—Ç–æ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    if ((previousValue === 0 || previousValue === null) && currentValue > 0) {
      return true;
    }

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 10% –∏ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 1M - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    if (previousValue > 0 && currentValue > 0) {
      const changePercent =
        Math.abs(currentValue - previousValue) / previousValue;
      const changeAmount = Math.abs(currentValue - previousValue);

      if (changePercent > 0.1 && changeAmount > 1) {
        return true;
      }
    }

    return false;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å ETFNewRecord
   */
  private async createETFNewRecord(data: {
    date: Date;
    assetType: 'bitcoin' | 'ethereum' | 'solana';
    company: string;
    amount: number;
    previousAmount: number;
  }): Promise<any> {
    try {
      const dedupeKey = `${data.date.toISOString().split('T')[0]}_${data.assetType}_${data.company}_${data.amount.toFixed(2)}`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —Ç–∞–∫—É—é –∑–∞–ø–∏—Å—å
      const existingRecord = await this.prisma.eTFNewRecord.findUnique({
        where: { dedupeKey },
      });

      if (existingRecord) {
        this.logger.log(`–ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${dedupeKey}`);
        return null;
      }

      const newRecord = await this.prisma.eTFNewRecord.create({
        data: {
          date: data.date,
          assetType: data.assetType,
          company: data.company,
          amount: data.amount,
          previousAmount: data.previousAmount,
          dedupeKey,
        },
      });

      this.logger.log(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å ETF: ${dedupeKey}`);
      return newRecord;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ ETF:`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getNewRecordsForNotifications(): Promise<any[]> {
    try {
      const records = await this.prisma.eTFNewRecord.findMany({
        where: {
          deliveries: {
            none: {}, // –ó–∞–ø–∏—Å–∏ –±–µ–∑ –¥–æ—Å—Ç–∞–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          },
        },
        orderBy: {
          detectedAt: 'desc',
        },
        take: 50, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      });

      return records;
    } catch (error) {
      this.logger.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:',
        error,
      );
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
   */
  async shouldUpdateToday(): Promise<boolean> {
    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0); // –ù–∞—á–∞–ª–æ –¥–Ω—è

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è Ethereum –∏ Bitcoin
      const [latestEthereum, latestBitcoin, latestSolana] = await Promise.all([
        this.prisma.eTFFlow.findFirst({
          orderBy: { date: 'desc' },
          select: { date: true },
        }),
        this.prisma.bTCFlow.findFirst({
          orderBy: { date: 'desc' },
          select: { date: true },
        }),
        (this.prisma as any).solFlow.findFirst({
          orderBy: { date: 'desc' },
          select: { date: true },
        }),
      ]);

      const ethereumDate = latestEthereum?.date;
      const bitcoinDate = latestBitcoin?.date;
      const solanaDate = latestSolana?.date;

      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ–æ–±—â–µ, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
      if (!ethereumDate || !bitcoinDate || !solanaDate) {
        this.logger.log('üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        return true;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const ethereumToday = ethereumDate >= today;
      const bitcoinToday = bitcoinDate >= today;
      const solanaToday = solanaDate >= today;

      if (ethereumToday && bitcoinToday && solanaToday) {
        this.logger.log(
          '‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
        );
        return false;
      }

      this.logger.log('üìä –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      return true;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ –æ–±–Ω–æ–≤–∏—Ç—å
    }
  }

  async parseAllETFFlowData(): Promise<{
    ethereum: ParsingResult & {
      hasNewData?: boolean;
      newDataCount?: number;
      newData?: any;
    };
    bitcoin: ParsingResult & {
      hasNewData?: boolean;
      newDataCount?: number;
      newData?: any;
    };
    solana: ParsingResult & {
      hasNewData?: boolean;
      newDataCount?: number;
      newData?: any;
    };
  }> {
    this.logger.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç–æ–∫–∞—Ö –≤—Å–µ—Ö ETF...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const shouldUpdate = await this.shouldUpdateToday();
    if (!shouldUpdate) {
      this.logger.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ - –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã');
      return {
        ethereum: {
          success: true,
          count: 0,
          hasNewData: false,
          newDataCount: 0,
        },
        bitcoin: {
          success: true,
          count: 0,
          hasNewData: false,
          newDataCount: 0,
        },
        solana: {
          success: true,
          count: 0,
          hasNewData: false,
          newDataCount: 0,
        },
      };
    }

    const results = {
      ethereum: {
        success: false,
        count: 0,
        hasNewData: false,
        newDataCount: 0,
      } as ParsingResult & {
        hasNewData: boolean;
        newDataCount: number;
        newData?: any;
      },
      bitcoin: {
        success: false,
        count: 0,
        hasNewData: false,
        newDataCount: 0,
      } as ParsingResult & {
        hasNewData: boolean;
        newDataCount: number;
        newData?: any;
      },
      solana: {
        success: false,
        count: 0,
        hasNewData: false,
        newDataCount: 0,
      } as ParsingResult & {
        hasNewData: boolean;
        newDataCount: number;
        newData?: any;
      },
    };

    try {
      this.logger.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ Ethereum ETF...');
      const ethereumData = await this.parseETFFlowData('ethereum');
      if (ethereumData && ethereumData.length > 0) {
        const saveResult = await this.saveETFFlowData('ethereum', ethereumData);
        results.ethereum = {
          success: true,
          count: ethereumData.length,
          hasNewData: saveResult.hasNewData,
          newDataCount: saveResult.newDataCount,
          newData: saveResult.newData,
        };
        this.logger.log(
          `‚úÖ Ethereum ETF: ${ethereumData.length} –∑–∞–ø–∏—Å–µ–π, –Ω–æ–≤—ã—Ö: ${saveResult.newDataCount}`,
        );
      }
    } catch (error) {
      results.ethereum = {
        success: false,
        count: 0,
        hasNewData: false,
        newDataCount: 0,
        error: error.message,
      };
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Ethereum ETF:', error);
    }

    try {
      this.logger.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ Bitcoin ETF...');
      const bitcoinData = await this.parseETFFlowData('bitcoin');
      if (bitcoinData && bitcoinData.length > 0) {
        const saveResult = await this.saveETFFlowData('bitcoin', bitcoinData);
        results.bitcoin = {
          success: true,
          count: bitcoinData.length,
          hasNewData: saveResult.hasNewData,
          newDataCount: saveResult.newDataCount,
          newData: saveResult.newData,
        };
        this.logger.log(
          `‚úÖ Bitcoin ETF: ${bitcoinData.length} –∑–∞–ø–∏—Å–µ–π, –Ω–æ–≤—ã—Ö: ${saveResult.newDataCount}`,
        );
      }
    } catch (error) {
      results.bitcoin = {
        success: false,
        count: 0,
        hasNewData: false,
        newDataCount: 0,
        error: error.message,
      };
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Bitcoin ETF:', error);
    }

    try {
      this.logger.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ Solana ETF...');
      const solData = await this.parseETFFlowData('solana');
      if (solData && solData.length > 0) {
        const saveResult = await this.saveETFFlowData('solana', solData);
        results.solana = {
          success: true,
          count: solData.length,
          hasNewData: saveResult.hasNewData,
          newDataCount: saveResult.newDataCount,
          newData: saveResult.newData,
        };
        this.logger.log(
          `‚úÖ Solana ETF: ${solData.length} –∑–∞–ø–∏—Å–µ–π, –Ω–æ–≤—ã—Ö: ${saveResult.newDataCount}`,
        );
      }
    } catch (error) {
      results.solana = {
        success: false,
        count: 0,
        hasNewData: false,
        newDataCount: 0,
        error: error.message,
      };
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Solana ETF:', error);
    }

    this.logger.log('üéØ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö ETF –∑–∞–≤–µ—Ä—à–µ–Ω');
    return results;
  }
}
