import { Injectable, Logger } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { ConfigService } from '@nestjs/config';
import { firstValueFrom } from 'rxjs';

@Injectable()
export class RevenueCatService {
  private readonly logger = new Logger(RevenueCatService.name);
  private readonly apiKey: string;
  private readonly baseUrl = 'https://api.revenuecat.com/v1';

  constructor(
    private readonly httpService: HttpService,
    private readonly configService: ConfigService,
  ) {
    this.apiKey =
      this.configService.get<string>('REVENUECAT_IOS_API_KEY') || '';
    if (!this.apiKey) {
      this.logger.warn('‚ö†Ô∏è RevenueCat API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ RevenueCat
   */
  async getUserInfo(appUserId: string): Promise<any> {
    try {
      this.logger.log(
        `üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ RevenueCat: ${appUserId}`,
      );

      const response = await firstValueFrom(
        this.httpService.get(`${this.baseUrl}/subscribers/${appUserId}`, {
          headers: {
            Authorization: `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
          },
        }),
      );

      this.logger.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ RevenueCat');
      return response.data;
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ RevenueCat: ${error.message}`,
      );
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getActiveSubscriptions(appUserId: string): Promise<any[]> {
    try {
      const userInfo = await this.getUserInfo(appUserId);

      if (!userInfo.subscriber) {
        this.logger.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ RevenueCat');
        return [];
      }

      const activeSubscriptions = [];
      const entitlements = userInfo.subscriber.entitlements || {};

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ entitlements
      for (const [key, entitlement] of Object.entries(entitlements)) {
        const ent = entitlement as any;
        if (ent.expires_date && new Date(ent.expires_date) > new Date()) {
          activeSubscriptions.push({
            productId: ent.product_identifier,
            entitlementId: key,
            isActive: true,
            isPremium: key === 'premium',
            autoRenew: ent.will_renew,
            purchaseDate: ent.purchase_date,
            expirationDate: ent.expires_date,
            originalPurchaseDate: ent.original_purchase_date,
            environment: userInfo.subscriber.original_app_user_id?.includes(
              '$RCAnonymousID',
            )
              ? 'Sandbox'
              : 'Production',
            platform: 'ios', // –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
          });
        }
      }

      this.logger.log(
        `‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${activeSubscriptions.length}`,
      );
      return activeSubscriptions;
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${error.message}`,
      );
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
   */
  async isPremiumUser(appUserId: string): Promise<boolean> {
    try {
      const activeSubscriptions = await this.getActiveSubscriptions(appUserId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
      const hasPremium = activeSubscriptions.some(
        (sub) => sub.isPremium && sub.isActive,
      );

      this.logger.log(`üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${appUserId} –ø—Ä–µ–º–∏—É–º: ${hasPremium}`);
      return hasPremium;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
      return false;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å RevenueCat
   */
  async syncUserWithRevenueCat(
    deviceId: string,
    appUserId?: string,
  ): Promise<any> {
    try {
      this.logger.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${deviceId} —Å RevenueCat`);

      // –ï—Å–ª–∏ appUserId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º deviceId
      const userId = appUserId || deviceId;

      const activeSubscriptions = await this.getActiveSubscriptions(userId);
      const isPremium = await this.isPremiumUser(userId);

      this.logger.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:`);
      this.logger.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${activeSubscriptions.length}`);
      this.logger.log(`   - –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: ${isPremium}`);

      return {
        appUserId: userId,
        activeSubscriptions,
        isPremium,
        lastSyncDate: new Date(),
      };
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å RevenueCat: ${error.message}`,
      );
      throw error;
    }
  }
}
