import { Controller, Post, Body, Logger, Optional } from '@nestjs/common';
import { NotificationService } from './notifications/notification.service';
// import { TelegramBotService } from './telegram-bot/telegram-bot.service';
import { PrismaService } from '../shared/prisma/prisma.service';

@Controller('notifications')
export class TestNotificationController {
  private readonly logger = new Logger(TestNotificationController.name);

  constructor(
    private readonly notificationService: NotificationService,
    // @Optional() private readonly telegramBotService?: TelegramBotService,
    private readonly prismaService: PrismaService,
  ) {}

  @Post('send-test-telegram')
  async sendTestTelegramNotification(
    @Body() body: { userId: string; message: string },
  ) {
    try {
      this.logger.log(
        `üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${body.userId}`,
      );

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.prismaService.user.findUnique({
        where: { id: body.userId },
      });

      if (!user) {
        this.logger.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${body.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      if (!user.telegramChatId) {
        this.logger.error(
          `‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${body.userId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram`,
        );
        return {
          success: false,
          error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        };
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TelegramBotService
      // const success = await this.telegramBotService.sendTestMessage(
      //   user.telegramChatId,
      //   body.message || '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏',
      // );
      const success = false; // Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω

      if (success) {
        this.logger.log(
          `‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${body.userId}`,
        );
        return { success: true, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
      } else {
        this.logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${body.userId}`,
        );
        return { success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
      }
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
        error,
      );
      return { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }

  @Post('send-test-phone')
  async sendTestPhoneNotification(
    @Body() body: { userId: string; message: string },
  ) {
    try {
      this.logger.log(
        `üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${body.userId}`,
      );

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.prismaService.user.findUnique({
        where: { id: body.userId },
      });

      if (!user) {
        this.logger.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${body.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      if (!user.deviceToken) {
        this.logger.error(
          `‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${body.userId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω device token`,
        );
        return {
          success: false,
          error: 'Device token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        };
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NotificationService
      const success = await this.notificationService.sendTestNotification(
        user.deviceToken,
        body.message || '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏',
      );

      if (success) {
        this.logger.log(
          `‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${body.userId}`,
        );
        return { success: true, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
      } else {
        this.logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${body.userId}`,
        );
        return { success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
      }
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω:',
        error,
      );
      return { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }
}
