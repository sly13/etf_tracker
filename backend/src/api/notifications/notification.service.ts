import { Injectable, Logger, Optional } from '@nestjs/common';
import { FirebaseAdminService } from './firebase-admin.service';
import { PrismaService } from '../../shared/prisma/prisma.service';
import { TelegramService } from '../telegram/telegram.service';
import { TelegramBotService } from '../telegram-bot/telegram-bot.service';

export interface ETFNotificationData {
  bitcoinFlow: number;
  ethereumFlow: number;
  bitcoinTotal: number;
  ethereumTotal: number;
  date: string;
  bitcoinData?: any;
  ethereumData?: any;
}

export interface UserSettings {
  notifications: {
    enableETFUpdates: boolean;
    enableSignificantFlow: boolean;
    enableTestNotifications: boolean;
    enableTelegramNotifications: boolean;
    enableFlowAmount?: boolean;
    minFlowThreshold: number;
    significantChangePercent: number;
    flowAmountThreshold?: number;
    quietHoursStart?: string;
    quietHoursEnd?: string;
  };
  preferences: {
    language?: string;
    timezone?: string;
    deviceType?: string;
    appVersion?: string;
    osVersion?: string;
    deviceName?: string;
  };
  profile: {
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
  };
  [key: string]: any; // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Prisma
}

@Injectable()
export class NotificationService {
  private readonly logger = new Logger(NotificationService.name);

  constructor(
    private readonly firebaseAdminService: FirebaseAdminService,
    private readonly prismaService: PrismaService,
    private readonly telegramService: TelegramService,
    @Optional() private readonly telegramBotService?: TelegramBotService,
  ) {}

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async registerDevice(
    token: string,
    appName: string,
    userId?: string,
    deviceId?: string,
    deviceInfo?: {
      deviceType?: string;
      appVersion?: string;
      osVersion?: string;
      language?: string;
      timezone?: string;
      deviceName?: string;
      firstName?: string;
      lastName?: string;
      email?: string;
      phone?: string;
    },
  ): Promise<boolean> {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      this.logger.log('üì• === –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===');
      this.logger.log(`   Token: ${token}`);
      this.logger.log(`   App Name: ${appName}`);
      this.logger.log(`   User ID: ${userId || '–ù–ï –ü–ï–†–ï–î–ê–ù'}`);
      this.logger.log(`   Device ID: ${deviceId || '–ù–ï –ü–ï–†–ï–î–ê–ù'}`);
      this.logger.log(`   Device Info:`, JSON.stringify(deviceInfo, null, 2));
      this.logger.log('=====================================');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
      this.logger.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å FCM —Ç–æ–∫–µ–Ω–∞...');
      const isValid = await this.firebaseAdminService.validateToken(token);
      if (!isValid) {
        this.logger.warn(
          `‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π FCM —Ç–æ–∫–µ–Ω: ${token.substring(0, 20)}...`,
        );
        this.logger.warn('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        this.logger.warn('   - –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω');
        this.logger.warn('   - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.logger.warn('   - –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
        this.logger.warn('   - –ü—Ä–æ–±–ª–µ–º—ã —Å Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
        return false;
      }
      this.logger.log('‚úÖ FCM —Ç–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      const application = await this.prismaService.application.upsert({
        where: { name: appName },
        update: {},
        create: {
          name: appName,
          displayName: this.getAppDisplayName(appName),
          description: this.getAppDescription(appName),
        },
      });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º OS –∏–∑ deviceId –∏ –æ—á–∏—â–∞–µ–º deviceId –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞
      let os: string | undefined;
      let cleanDeviceId: string | undefined;

      this.logger.log('üîç === –û–ë–†–ê–ë–û–¢–ö–ê DEVICE ID ===');
      this.logger.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π deviceId: ${deviceId}`);

      if (deviceId) {
        if (deviceId.startsWith('ios_')) {
          os = 'ios';
          cleanDeviceId = deviceId.substring(4); // –£–±–∏—Ä–∞–µ–º 'ios_'
          this.logger.log(`   –û–±–Ω–∞—Ä—É–∂–µ–Ω iOS –ø—Ä–µ—Ñ–∏–∫—Å, —É–±–∏—Ä–∞–µ–º 'ios_'`);
        } else if (deviceId.startsWith('android_')) {
          os = 'android';
          cleanDeviceId = deviceId.substring(8); // –£–±–∏—Ä–∞–µ–º 'android_'
          this.logger.log(`   –û–±–Ω–∞—Ä—É–∂–µ–Ω Android –ø—Ä–µ—Ñ–∏–∫—Å, —É–±–∏—Ä–∞–µ–º 'android_'`);
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º OS –∏–∑ deviceInfo
          os = deviceInfo?.deviceType?.toLowerCase() || 'unknown';
          cleanDeviceId = deviceId;
          this.logger.log(
            `   –ü—Ä–µ—Ñ–∏–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º deviceType: ${deviceInfo?.deviceType}`,
          );
        }
      } else {
        this.logger.log(`   DeviceId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!`);
      }

      this.logger.log(
        `   –†–µ–∑—É–ª—å—Ç–∞—Ç - OS: ${os}, Clean Device ID: ${cleanDeviceId}`,
      );
      this.logger.log('===============================');

      // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
      const userSettings: UserSettings = {
        notifications: {
          enableETFUpdates: this.getDefaultETFUpdates(appName),
          enableSignificantFlow: this.getDefaultSignificantFlow(appName),
          enableTestNotifications: false,
          enableTelegramNotifications: false,
          enableFlowAmount: false,
          minFlowThreshold: 0.1,
          significantChangePercent: 20.0,
          flowAmountThreshold: 10.0,
        },
        preferences: {
          language: deviceInfo?.language || 'en',
          timezone: deviceInfo?.timezone || 'UTC',
          deviceType: deviceInfo?.deviceType,
          appVersion: deviceInfo?.appVersion,
          osVersion: deviceInfo?.osVersion,
          deviceName: deviceInfo?.deviceName,
        },
        profile: {
          firstName: deviceInfo?.firstName,
          lastName: deviceInfo?.lastName,
          email: deviceInfo?.email,
          phone: deviceInfo?.phone,
        },
      };

      this.logger.log('üíæ === –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î ===');
      this.logger.log(`   Application ID: ${application.id}`);
      this.logger.log(`   Clean Device ID: ${cleanDeviceId}`);
      this.logger.log(`   OS: ${os}`);
      this.logger.log(`   Settings:`, JSON.stringify(userSettings, null, 2));
      this.logger.log('========================');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.prismaService.user.upsert({
        where: { deviceToken: token },
        update: {
          applicationId: application.id,
          deviceId: cleanDeviceId,
          os: os,
          lastUsed: new Date(),
          isActive: true,
          settings: userSettings,
        },
        create: {
          applicationId: application.id,
          deviceId: cleanDeviceId,
          deviceToken: token,
          os: os,
          lastUsed: new Date(),
          isActive: true,
          settings: userSettings,
        },
      });

      this.logger.log(
        `‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ${appName}: ${cleanDeviceId || 'unknown'} (OS: ${os || 'unknown'})`,
      );

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
      const createdUser = await this.prismaService.user.findFirst({
        where: { deviceToken: token },
      });

      if (createdUser) {
        this.logger.log(
          `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ë–î —Å ID: ${createdUser.id}`,
        );
        this.logger.log(`‚úÖ DeviceId –≤ –ë–î: ${createdUser.deviceId}`);
        this.logger.log(`‚úÖ OS –≤ –ë–î: ${createdUser.os}`);
      } else {
        this.logger.error(
          `‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!`,
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ Telegram –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ deviceId
      if (cleanDeviceId) {
        this.checkPendingTelegramAccounts(cleanDeviceId);
      }

      return true;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ ETF —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
   */
  async getUsersWithETFNotifications(appName: string): Promise<any[]> {
    try {
      const users = await this.prismaService.user.findMany({
        where: {
          application: { name: appName },
          isActive: true,
          settings: {
            path: ['notifications', 'enableETFUpdates'],
            equals: true,
          },
        },
        include: { application: true },
      });

      return users;
    } catch (error) {
      this.logger.error(
        '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ETF —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:',
        error,
      );
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
   */
  async getUsersWithTelegramNotifications(appName: string): Promise<any[]> {
    try {
      const users = await this.prismaService.user.findMany({
        where: {
          application: { name: appName },
          isActive: true,
          telegramChatId: { not: null },
          settings: {
            path: ['notifications', 'enableTelegramNotifications'],
            equals: true,
          },
        },
        include: { application: true },
      });

      return users;
    } catch (error) {
      this.logger.error(
        '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:',
        error,
      );
      return [];
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ ETF —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async sendETFNotifications(
    data: ETFNotificationData,
    appName: string,
  ): Promise<void> {
    try {
      const users = await this.getUsersWithETFNotifications(appName);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      for (const user of users) {
        await this.firebaseAdminService.sendNotificationToToken(
          user.deviceToken,
          'üìä ETF Flow Update',
          `Bitcoin: ${data.bitcoinFlow.toFixed(2)}M, Ethereum: ${data.ethereumFlow.toFixed(2)}M`,
          {
            type: 'etf_update',
            bitcoinFlow: data.bitcoinFlow.toString(),
            ethereumFlow: data.ethereumFlow.toString(),
            date: data.date,
          },
        );
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (this.telegramBotService) {
        const telegramUsers =
          await this.getUsersWithTelegramNotifications(appName);
        for (let i = 0; i < telegramUsers.length; i++) {
          await this.telegramBotService.sendETFUpdateNotification(data);
        }
      }

      this.logger.log(
        `‚úÖ ETF —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è ${appName}: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ETF —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ deviceId
   */
  async getUserByDeviceId(appName: string, deviceId: string): Promise<any> {
    try {
      const user = await this.prismaService.user.findFirst({
        where: {
          deviceId: deviceId,
          application: { name: appName },
        },
        include: { application: true },
      });

      return user;
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ deviceId ${deviceId}:`,
        error,
      );
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private getAppDisplayName(appName: string): string {
    const appNames: Record<string, string> = {
      'etf.flow': 'ETF Flow Tracker',
      'crypto.tracker': 'Crypto Tracker',
      'portfolio.manager': 'Portfolio Manager',
      'trading.bot': 'Trading Bot',
    };
    return appNames[appName] || appName;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private getAppDescription(appName: string): string {
    const descriptions: Record<string, string> = {
      'etf.flow': '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ ETF',
      'crypto.tracker': '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç',
      'portfolio.manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è',
      'trading.bot': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç',
    };
    return descriptions[appName] || `–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${appName}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ETF —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private getDefaultETFUpdates(appName: string): boolean {
    const etfApps = ['etf.flow', 'portfolio.manager'];
    return etfApps.includes(appName);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private getDefaultSignificantFlow(appName: string): boolean {
    const significantFlowApps = ['etf.flow', 'crypto.tracker'];
    return significantFlowApps.includes(appName);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
   */
  async sendTestNotificationToAll(): Promise<boolean> {
    try {
      const users = await this.prismaService.user.findMany({
        where: {
          isActive: true,
          settings: {
            path: ['notifications', 'enableTestNotifications'],
            equals: true,
          },
        },
        select: { deviceToken: true },
      });

      for (const user of users) {
        await this.firebaseAdminService.sendNotificationToToken(
          user.deviceToken,
          'üß™ Test Notification',
          'This is a test notification from ETF Flow Tracker',
          { type: 'test' },
        );
      }

      this.logger.log(
        `‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      );
      return true;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
   */
  async sendTestNotification(
    deviceToken: string,
    message: string,
  ): Promise<boolean> {
    try {
      this.logger.log(
        `üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceToken.substring(0, 10)}...`,
      );

      const notification = {
        title: 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        body: message,
        data: {
          type: 'test',
          timestamp: new Date().toISOString(),
        },
      };

      const success = await this.firebaseAdminService.sendNotification(
        deviceToken,
        notification,
      );

      if (success) {
        this.logger.log(
          `‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceToken.substring(0, 10)}...`,
        );
      } else {
        this.logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceToken.substring(0, 10)}...`,
        );
      }

      return success;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ Telegram –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ deviceId
   */
  private checkPendingTelegramAccounts(deviceId: string): void {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–≤—è–∑–æ–∫
      // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

      this.logger.log(
        `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è deviceId: ${deviceId}`,
      );

      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è deviceId ${deviceId}:`,
        error,
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async getDeviceSettings(token: string): Promise<any> {
    try {
      this.logger.log(
        `üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${token.substring(0, 20)}...`,
      );

      const user = await this.prismaService.user.findUnique({
        where: { deviceToken: token },
      });

      if (!user) {
        this.logger.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
      }

      const settings = (user.settings as UserSettings) || {};
      const notifications = settings.notifications || {};

      const deviceSettings = {
        enableETFUpdates: notifications.enableETFUpdates ?? true,
        enableSignificantFlow: notifications.enableSignificantFlow ?? true,
        enableTestNotifications: notifications.enableTestNotifications ?? false,
        enableFlowAmount: notifications.enableFlowAmount ?? false,
        minFlowThreshold: notifications.minFlowThreshold ?? 0.1,
        significantChangePercent:
          notifications.significantChangePercent ?? 20.0,
        flowAmountThreshold: notifications.flowAmountThreshold ?? 10.0,
        quietHoursStart: notifications.quietHoursStart,
        quietHoursEnd: notifications.quietHoursEnd,
        notificationCount: 0, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        lastNotificationSent: null, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      };

      this.logger.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã:', deviceSettings);
      return deviceSettings;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async updateDeviceSettings(
    token: string,
    newSettings: any,
  ): Promise<boolean> {
    try {
      this.logger.log(
        `üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${token.substring(0, 20)}...`,
      );

      const user = await this.prismaService.user.findUnique({
        where: { deviceToken: token },
      });

      if (!user) {
        this.logger.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
      }

      const currentSettings = (user.settings as UserSettings) || {};
      const currentNotifications = currentSettings.notifications || {};

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const updatedNotifications = {
        ...currentNotifications,
        enableETFUpdates:
          newSettings.enableETFUpdates ?? currentNotifications.enableETFUpdates,
        enableSignificantFlow:
          newSettings.enableSignificantFlow ??
          currentNotifications.enableSignificantFlow,
        enableTestNotifications:
          newSettings.enableTestNotifications ??
          currentNotifications.enableTestNotifications,
        enableFlowAmount:
          newSettings.enableFlowAmount ?? currentNotifications.enableFlowAmount,
        minFlowThreshold:
          newSettings.minFlowThreshold ?? currentNotifications.minFlowThreshold,
        significantChangePercent:
          newSettings.significantChangePercent ??
          currentNotifications.significantChangePercent,
        flowAmountThreshold:
          newSettings.flowAmountThreshold ??
          currentNotifications.flowAmountThreshold,
        quietHoursStart:
          newSettings.quietHoursStart ?? currentNotifications.quietHoursStart,
        quietHoursEnd:
          newSettings.quietHoursEnd ?? currentNotifications.quietHoursEnd,
      };

      const updatedSettings: UserSettings = {
        ...currentSettings,
        notifications: updatedNotifications,
      };

      await this.prismaService.user.update({
        where: { deviceToken: token },
        data: {
          settings: updatedSettings,
          lastUsed: new Date(),
        },
      });

      this.logger.log(
        '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:',
        updatedNotifications,
      );
      return true;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
      return false;
    }
  }
}
