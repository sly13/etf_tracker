import { Injectable, Logger } from '@nestjs/common';
import { FirebaseAdminService } from './firebase-admin.service';
import { PrismaService } from '../prisma/prisma.service';

export interface ETFNotificationData {
  bitcoinFlow: number;
  ethereumFlow: number;
  bitcoinTotal: number;
  ethereumTotal: number;
  date: string;
}

@Injectable()
export class NotificationService {
  private readonly logger = new Logger(NotificationService.name);

  constructor(
    private readonly firebaseAdminService: FirebaseAdminService,
    private readonly prismaService: PrismaService,
  ) {}

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async registerDevice(
    token: string,
    deviceInfo?: {
      deviceType?: string;
      appVersion?: string;
      osVersion?: string;
      language?: string;
      timezone?: string;
      deviceName?: string;
    },
  ): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
      const isValid = await this.firebaseAdminService.validateToken(token);
      if (!isValid) {
        this.logger.warn(`‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π FCM —Ç–æ–∫–µ–Ω: ${token}`);
        return false;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.prismaService.device.upsert({
        where: { token },
        update: {
          token,
          lastUsed: new Date(),
          isValid: true,
          isActive: true,
          deviceType: deviceInfo?.deviceType,
          appVersion: deviceInfo?.appVersion,
          osVersion: deviceInfo?.osVersion,
          language: deviceInfo?.language,
          timezone: deviceInfo?.timezone,
          deviceName: deviceInfo?.deviceName,
        },
        create: {
          token,
          lastUsed: new Date(),
          isValid: true,
          isActive: true,
          deviceType: deviceInfo?.deviceType,
          appVersion: deviceInfo?.appVersion,
          osVersion: deviceInfo?.osVersion,
          language: deviceInfo?.language,
          timezone: deviceInfo?.timezone,
          deviceName: deviceInfo?.deviceName,
          enableETFUpdates: true,
          enableSignificantFlow: true,
          enableTestNotifications: false,
          minFlowThreshold: 0.1,
          significantChangePercent: 20.0,
        },
      });

      this.logger.log(
        `‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${token.substring(0, 20)}...`,
      );
      return true;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ETF
   */
  async sendETFUpdateNotification(data: ETFNotificationData): Promise<boolean> {
    try {
      const title = 'üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ETF –ø–æ—Ç–æ–∫–æ–≤';
      const body = this.formatNotificationBody(data);

      const notificationData = {
        type: 'etf_update',
        bitcoin_flow: data.bitcoinFlow.toString(),
        ethereum_flow: data.ethereumFlow.toString(),
        bitcoin_total: data.bitcoinTotal.toString(),
        ethereum_total: data.ethereumTotal.toString(),
        date: data.date,
      };

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è ETF —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const activeTokens = await this.getActiveDevicesForETFUpdates();

      if (activeTokens.length === 0) {
        this.logger.log('üì± –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è ETF —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        return true;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ–ø–∏–∫
      const success = await this.firebaseAdminService.sendNotificationToTopic(
        'etf_updates',
        title,
        body,
        notificationData,
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      if (success) {
        await this.updateDeviceNotificationStats(activeTokens);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await this.logNotification(
        'etf_update',
        title,
        body,
        notificationData,
        activeTokens.length,
        success ? activeTokens.length : 0,
        success ? 0 : activeTokens.length,
      );

      if (success) {
        this.logger.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ETF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }

      return success;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ ETF:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ø–æ—Ç–æ–∫–∞—Ö
   */
  async sendSignificantFlowNotification(
    type: 'bitcoin' | 'ethereum',
    flow: number,
    previousFlow: number,
  ): Promise<boolean> {
    try {
      const change = flow - previousFlow;
      const changePercent =
        previousFlow !== 0 ? (change / Math.abs(previousFlow)) * 100 : 0;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (>20%)
      if (Math.abs(changePercent) < 20) {
        return false;
      }

      const isPositive = change > 0;
      const emoji = isPositive ? 'üìà' : 'üìâ';
      const title = `${emoji} ${type === 'bitcoin' ? 'Bitcoin' : 'Ethereum'} ETF`;

      const body = `${isPositive ? '–ü—Ä–∏—Ç–æ–∫' : '–û—Ç—Ç–æ–∫'}: ${Math.abs(change).toFixed(2)}M$ (${changePercent.toFixed(1)}%)`;

      const notificationData = {
        type: 'significant_flow',
        crypto_type: type,
        flow: flow.toString(),
        previous_flow: previousFlow.toString(),
        change: change.toString(),
        change_percent: changePercent.toString(),
      };

      const success = await this.firebaseAdminService.sendNotificationToTopic(
        'etf_updates',
        title,
        body,
        notificationData,
      );

      if (success) {
        this.logger.log(
          `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ${type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`,
        );
      }

      return success;
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏:',
        error,
      );
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private formatNotificationBody(data: ETFNotificationData): string {
    const bitcoinFlowText =
      data.bitcoinFlow >= 0
        ? `Bitcoin: +${data.bitcoinFlow.toFixed(2)}M$`
        : `Bitcoin: ${data.bitcoinFlow.toFixed(2)}M$`;

    const ethereumFlowText =
      data.ethereumFlow >= 0
        ? `Ethereum: +${data.ethereumFlow.toFixed(2)}M$`
        : `Ethereum: ${data.ethereumFlow.toFixed(2)}M$`;

    return `${bitcoinFlowText}, ${ethereumFlowText}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è ETF —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getActiveDevicesForETFUpdates(): Promise<string[]> {
    try {
      const devices = await this.prismaService.device.findMany({
        where: {
          isValid: true,
          isActive: true,
          enableETFUpdates: true,
        },
        select: { token: true },
      });

      return devices.map((d) => d.token);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getActiveDevicesForTestNotifications(): Promise<string[]> {
    try {
      const devices = await this.prismaService.device.findMany({
        where: {
          isValid: true,
          isActive: true,
          enableTestNotifications: true,
        },
        select: { token: true },
      });

      return devices.map((d) => d.token);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
   */
  async getTokenStats(): Promise<{
    total: number;
    active: number;
    byDeviceType: Record<string, number>;
    byLanguage: Record<string, number>;
  }> {
    try {
      const [total, active, deviceStats, languageStats] = await Promise.all([
        this.prismaService.device.count(),
        this.prismaService.device.count({
          where: { isValid: true, isActive: true },
        }),
        this.prismaService.device.groupBy({
          by: ['deviceType'],
          where: { isValid: true },
          _count: { deviceType: true },
        }),
        this.prismaService.device.groupBy({
          by: ['language'],
          where: { isValid: true },
          _count: { language: true },
        }),
      ]);

      const byDeviceType = deviceStats.reduce(
        (acc, stat) => {
          acc[stat.deviceType || 'unknown'] = stat._count.deviceType;
          return acc;
        },
        {} as Record<string, number>,
      );

      const byLanguage = languageStats.reduce(
        (acc, stat) => {
          acc[stat.language || 'unknown'] = stat._count.language;
          return acc;
        },
        {} as Record<string, number>,
      );

      return {
        total,
        active,
        byDeviceType,
        byLanguage,
      };
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return {
        total: 0,
        active: 0,
        byDeviceType: {},
        byLanguage: {},
      };
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async logNotification(
    type: string,
    title: string,
    body: string,
    data: any,
    sentToTokens: number,
    successCount: number,
    failureCount: number,
  ): Promise<void> {
    try {
      await this.prismaService.notificationLog.create({
        data: {
          type,
          title,
          body,
          data: data ? JSON.stringify(data) : undefined,
          sentToTokens,
          successCount,
          failureCount,
        },
      });
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getNotificationSettings(): Promise<any> {
    try {
      let settings = await this.prismaService.notificationSettings.findFirst();

      if (!settings) {
        // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        settings = await this.prismaService.notificationSettings.create({
          data: {},
        });
      }

      return settings;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async updateNotificationSettings(settings: {
    enableETFUpdates?: boolean;
    enableSignificantFlow?: boolean;
    enableTestNotifications?: boolean;
    minFlowThreshold?: number;
    significantChangePercent?: number;
    quietHoursStart?: string;
    quietHoursEnd?: string;
  }): Promise<boolean> {
    try {
      await this.prismaService.notificationSettings.upsert({
        where: { id: 'default' },
        update: settings,
        create: {
          id: 'default',
          ...settings,
        },
      });

      this.logger.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      return true;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
   */
  async cleanupInvalidTokens(): Promise<void> {
    try {
      const tokens = await this.prismaService.device.findMany({
        where: { isValid: true },
      });

      const invalidTokens: string[] = [];

      for (const tokenRecord of tokens) {
        const isValid = await this.firebaseAdminService.validateToken(
          tokenRecord.token,
        );
        if (!isValid) {
          invalidTokens.push(tokenRecord.token);
        }
      }

      if (invalidTokens.length > 0) {
        await this.prismaService.device.updateMany({
          where: { token: { in: invalidTokens } },
          data: { isValid: false },
        });

        this.logger.log(
          `üßπ –û—á–∏—â–µ–Ω–æ ${invalidTokens.length} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤`,
        );
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   */
  async updateDeviceNotificationStats(tokens: string[]): Promise<void> {
    try {
      await this.prismaService.device.updateMany({
        where: { token: { in: tokens } },
        data: {
          lastNotificationSent: new Date(),
          notificationCount: { increment: 1 },
        },
      });
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async updateDeviceSettings(
    token: string,
    settings: {
      isActive?: boolean;
      enableETFUpdates?: boolean;
      enableSignificantFlow?: boolean;
      enableTestNotifications?: boolean;
      minFlowThreshold?: number;
      significantChangePercent?: number;
      quietHoursStart?: string;
      quietHoursEnd?: string;
    },
  ): Promise<boolean> {
    try {
      await this.prismaService.device.update({
        where: { token },
        data: settings,
      });

      this.logger.log(
        `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${token.substring(0, 20)}...`,
      );
      return true;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async getDeviceSettings(token: string): Promise<any> {
    try {
      const device = await this.prismaService.device.findUnique({
        where: { token },
        select: {
          isActive: true,
          enableETFUpdates: true,
          enableSignificantFlow: true,
          enableTestNotifications: true,
          minFlowThreshold: true,
          significantChangePercent: true,
          quietHoursStart: true,
          quietHoursEnd: true,
          notificationCount: true,
          lastNotificationSent: true,
        },
      });

      return device;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendTestNotification(): Promise<boolean> {
    try {
      const title = 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
      const body = 'ETF Tracker —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!';

      // –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const testTokens = await this.getActiveDevicesForTestNotifications();

      if (testTokens.length === 0) {
        this.logger.log(
          'üì± –ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏',
        );
        return true;
      }

      const success = await this.firebaseAdminService.sendNotificationToTopic(
        'etf_updates',
        title,
        body,
        { type: 'test' },
      );

      if (success) {
        await this.updateDeviceNotificationStats(testTokens);
        this.logger.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }

      return success;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }
}
