#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã sync_eth_klines_5m.mjs
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ ETH —Å–≤–µ—á–∞–º
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testEthDatabaseConnection() {
	try {
		console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ETH...');

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
		await prisma.$connect();
		console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã btc_candles
		const tableExists = await prisma.$queryRaw`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'btc_candles'
      );
    `;

		console.log('üìä –¢–∞–±–ª–∏—Ü–∞ btc_candles:', tableExists[0].exists ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

		if (tableExists[0].exists) {
			// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
			const totalCount = await prisma.bTCandle.count();
			console.log(`üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${totalCount}`);

			// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ BTC
			const btcCount = await prisma.bTCandle.count({
				where: { symbol: 'BTCUSDT' }
			});
			console.log(`‚Çø –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –∑–∞–ø–∏—Å–µ–π: ${btcCount}`);

			// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ETH
			const ethCount = await prisma.bTCandle.count({
				where: { symbol: 'ETHUSDT' }
			});
			console.log(`Œû –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH –∑–∞–ø–∏—Å–µ–π: ${ethCount}`);

			// –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É
			const symbols = ['BTCUSDT', 'ETHUSDT'];

			for (const symbol of symbols) {
				const lastRecord = await prisma.bTCandle.findFirst({
					where: { symbol },
					orderBy: { openTime: 'desc' },
					select: {
						symbol: true,
						interval: true,
						openTime: true,
						closeTime: true,
						open: true,
						high: true,
						low: true,
						close: true,
						volume: true,
						source: true,
					},
				});

				if (lastRecord) {
					console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å ${symbol}:`, {
						–≤—Ä–µ–º—è: lastRecord.openTime.toISOString(),
						—Ü–µ–Ω–∞: lastRecord.close,
						–æ–±—ä–µ–º: lastRecord.volume,
						–∏—Å—Ç–æ—á–Ω–∏–∫: lastRecord.source
					});
				} else {
					console.log(`üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è ${symbol}`);
				}
			}

			// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
			const intervals = await prisma.bTCandle.groupBy({
				by: ['symbol', 'interval'],
				_count: { symbol: true },
				orderBy: [
					{ symbol: 'asc' },
					{ interval: 'asc' }
				]
			});

			console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º:');
			intervals.forEach(item => {
				console.log(`   ${item.symbol} ${item.interval}: ${item._count.symbol} –∑–∞–ø–∏—Å–µ–π`);
			});
		}

		console.log('‚úÖ –¢–µ—Å—Ç ETH –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');

	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ETH:', error.message);
		throw error;
	} finally {
		await prisma.$disconnect();
	}
}

async function main() {
	try {
		await testEthDatabaseConnection();
		process.exit(0);
	} catch (error) {
		console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ ETH:', error.message);
		process.exit(1);
	}
}

main();
