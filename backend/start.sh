#!/bin/sh

echo "üöÄ –ó–∞–ø—É—Å–∫ ETF Tracker Backend..."

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client (–Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
echo "üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client..."
npx prisma generate

# –ñ–¥–µ–º –ø–æ–∫–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
RETRY_COUNT=0
MAX_RETRIES=30

# –î–∞–µ–º –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–ø—É—Å–∫
sleep 2

while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Prisma Client
  CONNECTION_RESULT=$(node -e "
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    (async () => {
      try {
        await prisma.\$queryRawUnsafe('SELECT 1');
        console.log('connected');
      } catch (e) {
        console.log('not_connected');
      } finally {
        await prisma.\$disconnect();
      }
    })();
  " 2>&1)
  
  if echo "$CONNECTION_RESULT" | grep -q "connected"; then
    echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!"
    break
  fi
  
  RETRY_COUNT=$((RETRY_COUNT + 1))
  if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
    echo "   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞, –∂–¥–µ–º... (–ø–æ–ø—ã—Ç–∫–∞ $RETRY_COUNT/$MAX_RETRIES)"
    sleep 2
  fi
done

if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
  echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ $MAX_RETRIES –ø–æ–ø—ã—Ç–æ–∫"
  echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã _prisma_migrations –∏ —Å–æ–∑–¥–∞–µ–º baseline –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π..."
HAS_MIGRATIONS_TABLE=$(node -e "
  const { PrismaClient } = require('@prisma/client');
  const prisma = new PrismaClient();
  (async () => {
    try {
      await prisma.\$queryRawUnsafe('SELECT 1 FROM \"_prisma_migrations\" LIMIT 1');
      console.log('exists');
    } catch (e) {
      console.log('not_exists');
    } finally {
      await prisma.\$disconnect();
    }
  })();
" 2>/dev/null)

if [ "$HAS_MIGRATIONS_TABLE" != "exists" ]; then
  echo "‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ _prisma_migrations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º baseline..."
  
  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ baseline —á–µ—Ä–µ–∑ Node —Å–∫—Ä–∏–ø—Ç
  node -e "
    const { PrismaClient } = require('@prisma/client');
    const fs = require('fs');
    const prisma = new PrismaClient();
    
    (async () => {
      try {
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É _prisma_migrations
        await prisma.\$executeRawUnsafe(\`
          CREATE TABLE IF NOT EXISTS \"_prisma_migrations\" (
            \"id\" VARCHAR(36) PRIMARY KEY,
            \"checksum\" VARCHAR(64) NOT NULL,
            \"finished_at\" TIMESTAMP(3),
            \"migration_name\" VARCHAR(255) NOT NULL,
            \"logs\" TEXT,
            \"rolled_back_at\" TIMESTAMP(3),
            \"started_at\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
            \"applied_steps_count\" INTEGER NOT NULL DEFAULT 0
          );
        \`);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ _prisma_migrations —Å–æ–∑–¥–∞–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–º–µ—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        const tables = await prisma.\$queryRawUnsafe(\`
          SELECT table_name FROM information_schema.tables 
          WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
        \`);
        const tableNames = tables.map(t => t.table_name);
        
        // –ú–∏–≥—Ä–∞—Ü–∏—è 1: init_clean_schema
        if (tableNames.includes('eth_flow') || tableNames.includes('btc_flows')) {
          const existing = await prisma.\$queryRawUnsafe('SELECT 1 FROM "_prisma_migrations" WHERE "migration_name" = \'20251011105336_init_clean_schema\' LIMIT 1').catch(() => []);
          if (existing.length === 0) {
            const id = 'init-' + Date.now();
            await prisma.\$executeRawUnsafe('INSERT INTO "_prisma_migrations" ("id", "checksum", "migration_name", "started_at", "finished_at", "applied_steps_count") VALUES (\'' + id + '\', \'baseline\', \'20251011105336_init_clean_schema\', NOW(), NOW(), 1)');
            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 20251011105336_init_clean_schema –ø–æ–º–µ—á–µ–Ω–∞');
          }
        }
        
        // –ú–∏–≥—Ä–∞—Ü–∏—è 2: add_etf_notification_tables
        if (tableNames.includes('etf_new_records')) {
          const existing = await prisma.\$queryRawUnsafe('SELECT 1 FROM "_prisma_migrations" WHERE "migration_name" = \'20251017095150_add_etf_notification_tables\' LIMIT 1').catch(() => []);
          if (existing.length === 0) {
            const id = 'notif-' + Date.now();
            await prisma.\$executeRawUnsafe('INSERT INTO "_prisma_migrations" ("id", "checksum", "migration_name", "started_at", "finished_at", "applied_steps_count") VALUES (\'' + id + '\', \'baseline\', \'20251017095150_add_etf_notification_tables\', NOW(), NOW(), 1)');
            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 20251017095150_add_etf_notification_tables –ø–æ–º–µ—á–µ–Ω–∞');
          }
        }
        
        // –ú–∏–≥—Ä–∞—Ü–∏—è 3: add_sol_flow
        if (tableNames.includes('sol_flow')) {
          const existing = await prisma.\$queryRawUnsafe('SELECT 1 FROM "_prisma_migrations" WHERE "migration_name" = \'20251029184712_add_sol_flow\' LIMIT 1').catch(() => []);
          if (existing.length === 0) {
            const id = 'sol-' + Date.now();
            await prisma.\$executeRawUnsafe('INSERT INTO "_prisma_migrations" ("id", "checksum", "migration_name", "started_at", "finished_at", "applied_steps_count") VALUES (\'' + id + '\', \'baseline\', \'20251029184712_add_sol_flow\', NOW(), NOW(), 1)');
            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 20251029184712_add_sol_flow –ø–æ–º–µ—á–µ–Ω–∞');
          }
        }
        
        console.log('‚úÖ Baseline —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è baseline:', error.message);
        process.exit(1);
      } finally {
        await prisma.\$disconnect();
      }
    })();
  " || {
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å baseline —á–µ—Ä–µ–∑ Node, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±..."
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ prisma migrate resolve (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã)
    npx prisma migrate resolve --applied 20251011105336_init_clean_schema 2>/dev/null || true
    npx prisma migrate resolve --applied 20251017095150_add_etf_notification_tables 2>/dev/null || true
    npx prisma migrate resolve --applied 20251029184712_add_sol_flow 2>/dev/null || true
  }
fi

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Prisma
echo "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Prisma..."
npx prisma migrate deploy

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π..."
MIGRATION_STATUS=$(npx prisma migrate status 2>&1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü ETF..."
HAS_ETF_TABLES=$(node -e "
  const { PrismaClient } = require('@prisma/client');
  const prisma = new PrismaClient();
  (async () => {
    try {
      await prisma.\$queryRawUnsafe('SELECT 1 FROM \"etf_new_records\" LIMIT 1');
      console.log('exists');
    } catch (e) {
      console.log('not_exists');
    } finally {
      await prisma.\$disconnect();
    }
  })();
" 2>/dev/null)

if [ "$HAS_ETF_TABLES" != "exists" ]; then
  echo "‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ etf_new_records –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Prisma..."
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—á–µ–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–∞—è
  MIGRATION_MARKED=$(node -e "
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    (async () => {
      try {
        const result = await prisma.\$queryRawUnsafe('SELECT 1 FROM \"_prisma_migrations\" WHERE \"migration_name\" = \\'20251017095150_add_etf_notification_tables\\' LIMIT 1');
        console.log('marked');
      } catch (e) {
        console.log('not_marked');
      } finally {
        await prisma.\$disconnect();
      }
    })();
  " 2>/dev/null)
  
  if [ "$MIGRATION_MARKED" = "marked" ]; then
    echo "üìù –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–∞—è, –Ω–æ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç. –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø–æ–º–µ—Ç–∫—É..."
    npx prisma migrate resolve --rolled-back 20251017095150_add_etf_notification_tables 2>/dev/null || true
  fi
  
  echo "üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ..."
  npx prisma migrate deploy
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
  HAS_ETF_TABLES_AFTER=$(node -e "
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    (async () => {
      try {
        await prisma.\$queryRawUnsafe('SELECT 1 FROM \"etf_new_records\" LIMIT 1');
        console.log('exists');
      } catch (e) {
        console.log('not_exists');
      } finally {
        await prisma.\$disconnect();
      }
    })();
  " 2>/dev/null)
  
  if [ "$HAS_ETF_TABLES_AFTER" = "exists" ]; then
    echo "‚úÖ –¢–∞–±–ª–∏—Ü—ã ETF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ Prisma migrate deploy!"
    # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    echo "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π..."
    npx prisma generate
  else
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ Prisma migrate deploy"
    echo "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é: npx prisma migrate deploy"
  fi
else
  echo "‚úÖ –¢–∞–±–ª–∏—Ü—ã ETF —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã sol_flow
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã sol_flow..."
HAS_SOL_FLOW=$(node -e "
  const { PrismaClient } = require('@prisma/client');
  const prisma = new PrismaClient();
  (async () => {
    try {
      await prisma.\$queryRawUnsafe('SELECT 1 FROM \"sol_flow\" LIMIT 1');
      console.log('exists');
    } catch (e) {
      console.log('not_exists');
    } finally {
      await prisma.\$disconnect();
    }
  })();
" 2>/dev/null)

if [ "$HAS_SOL_FLOW" != "exists" ]; then
  echo "‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ sol_flow –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Prisma..."
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—á–µ–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–∞—è
  SOL_MIGRATION_MARKED=$(node -e "
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    (async () => {
      try {
        const result = await prisma.\$queryRawUnsafe('SELECT 1 FROM \"_prisma_migrations\" WHERE \"migration_name\" = \\'20251029184712_add_sol_flow\\' LIMIT 1');
        console.log('marked');
      } catch (e) {
        console.log('not_marked');
      } finally {
        await prisma.\$disconnect();
      }
    })();
  " 2>/dev/null)
  
  if [ "$SOL_MIGRATION_MARKED" = "marked" ]; then
    echo "üìù –ú–∏–≥—Ä–∞—Ü–∏—è sol_flow –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–∞—è, –Ω–æ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç. –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø–æ–º–µ—Ç–∫—É..."
    npx prisma migrate resolve --rolled-back 20251029184712_add_sol_flow 2>/dev/null || true
  fi
  
  echo "üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é sol_flow –∑–∞–Ω–æ–≤–æ..."
  npx prisma migrate deploy
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
  HAS_SOL_FLOW_AFTER=$(node -e "
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    (async () => {
      try {
        await prisma.\$queryRawUnsafe('SELECT 1 FROM \"sol_flow\" LIMIT 1');
        console.log('exists');
      } catch (e) {
        console.log('not_exists');
      } finally {
        await prisma.\$disconnect();
      }
    })();
  " 2>/dev/null)
  
  if [ "$HAS_SOL_FLOW_AFTER" = "exists" ]; then
    echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ sol_flow —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Prisma migrate deploy!"
    # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    echo "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π..."
    npx prisma generate
  else
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É sol_flow —á–µ—Ä–µ–∑ Prisma migrate deploy"
    echo "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é: npx prisma migrate deploy"
  fi
else
  echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ sol_flow —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client –ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏)
echo "üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client..."
npx prisma generate

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
echo "üì± –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
if [ -f "prisma/init-data.sql" ]; then
  # –ò—Å–ø–æ–ª—å–∑—É–µ–º prisma db execute –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL —á–µ—Ä–µ–∑ psql –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  if npx prisma db execute --file prisma/init-data.sql --schema prisma/schema.prisma 2>/dev/null; then
    echo "‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ Prisma"
  else
    # –ï—Å–ª–∏ prisma db execute –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ psql
    if command -v psql > /dev/null 2>&1 && [ -n "$DATABASE_URL" ]; then
      echo "‚ö†Ô∏è Prisma db execute –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ psql..."
      psql "$DATABASE_URL" -f prisma/init-data.sql 2>/dev/null && echo "‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ psql" || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)"
    else
      echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å init-data.sql (–∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)"
    fi
  fi
else
  echo "‚ö†Ô∏è –§–∞–π–ª prisma/init-data.sql –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
echo "üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
exec npm run start:prod
