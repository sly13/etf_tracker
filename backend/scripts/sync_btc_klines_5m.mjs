#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π BTCUSDT –∏–∑ Binance Spot API –≤ PostgreSQL
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Prisma Client –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */

import { PrismaClient } from '@prisma/client';
import axios from 'axios';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const config = {
	// Binance API
	binanceBaseUrl: 'https://api.binance.com/api/v3',

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
	symbol: process.env.SYMBOL || 'BTCUSDT',
	interval: process.env.INTERVAL || '5m',
	source: process.env.SOURCE || 'binance_spot',
	startFrom: process.env.START_FROM || '2017-09-01T00:00:00Z',

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
	batchSize: 1000,
	delayBetweenBatches: 200, // –º—Å
	maxRetries: 5,
	retryDelay: 1000, // –º—Å
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prisma Client
const prisma = new PrismaClient();

/**
 * –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
 */
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
async function fetchKlines(startTime, endTime, retryCount = 0) {
	try {
		const url = `${config.binanceBaseUrl}/klines`;
		const params = {
			symbol: config.symbol,
			interval: config.interval,
			limit: config.batchSize,
			startTime: startTime.getTime(),
			endTime: endTime.getTime(),
		};

		console.log(`üì° –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö: ${startTime.toISOString()} - ${endTime.toISOString()}`);

		const response = await axios.get(url, { params });

		if (response.status !== 200) {
			throw new Error(`HTTP ${response.status}: ${response.statusText}`);
		}

		return response.data;
	} catch (error) {
		if (retryCount < config.maxRetries) {
			const delayMs = config.retryDelay * Math.pow(2, retryCount);
			console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${config.maxRetries}): ${error.message}`);
			console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delayMs}–º—Å...`);

			await delay(delayMs);
			return fetchKlines(startTime, endTime, retryCount + 1);
		}

		throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ ${config.maxRetries} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`);
	}
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ Binance –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
 */
function transformKlineData(kline) {
	return {
		symbol: config.symbol,
		interval: config.interval,
		openTime: new Date(parseInt(kline[0])),
		closeTime: new Date(parseInt(kline[6])),
		open: parseFloat(kline[1]),
		high: parseFloat(kline[2]),
		low: parseFloat(kline[3]),
		close: parseFloat(kline[4]),
		volume: parseFloat(kline[5]),
		quoteVolume: parseFloat(kline[7]),
		trades: parseInt(kline[8]),
		takerBuyBase: parseFloat(kline[9]),
		takerBuyQuote: parseFloat(kline[10]),
		source: config.source,
	};
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã –∏–∑ –ë–î
 */
async function getLastOpenTime() {
	try {
		const lastCandle = await prisma.bTCandle.findFirst({
			where: {
				symbol: config.symbol,
				interval: config.interval,
				source: config.source,
			},
			orderBy: {
				openTime: 'desc',
			},
			select: {
				openTime: true,
			},
		});

		return lastCandle ? lastCandle.openTime : null;
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã:', error.message);
		throw error;
	}
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function upsertCandles(candles) {
	if (candles.length === 0) return 0;

	try {
		let upsertedCount = 0;

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏
		for (const candle of candles) {
			await prisma.bTCandle.upsert({
				where: {
					symbol_interval_openTime: {
						symbol: candle.symbol,
						interval: candle.interval,
						openTime: candle.openTime,
					},
				},
				update: {
					closeTime: candle.closeTime,
					open: candle.open,
					high: candle.high,
					low: candle.low,
					close: candle.close,
					volume: candle.volume,
					quoteVolume: candle.quoteVolume,
					trades: candle.trades,
					takerBuyBase: candle.takerBuyBase,
					takerBuyQuote: candle.takerBuyQuote,
					source: candle.source,
					updatedAt: new Date(),
				},
				create: candle,
			});
			upsertedCount++;
		}

		return upsertedCount;
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ upsert –¥–∞–Ω–Ω—ã—Ö:', error.message);
		throw error;
	}
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
async function syncKlines() {
	let mode = 'init';
	let startTime = new Date(config.startFrom);
	let totalUpserted = 0;
	let batchCount = 0;

	try {
		console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ BTC —Å–≤–µ—á–µ–π...');
		console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${config.symbol} ${config.interval} –∏–∑ ${config.source}`);
		console.log(`üìÖ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –¥–∞—Ç–∞: ${startTime.toISOString()}`);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –≤ –ë–î
		const lastOpenTime = await getLastOpenTime();

		if (lastOpenTime) {
			mode = 'resume';
			startTime = new Date(lastOpenTime.getTime() + 5 * 60 * 1000); // +5 –º–∏–Ω—É—Ç
			console.log(`üîÑ –†–µ–∂–∏–º: ${mode}`);
			console.log(`üìÖ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å: ${startTime.toISOString()}`);
		} else {
			console.log(`üÜï –†–µ–∂–∏–º: ${mode}`);
			console.log(`üìÖ –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å: ${startTime.toISOString()}`);
		}

		const now = new Date();

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
		if (startTime >= now) {
			console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
			return;
		}

		// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
		while (startTime < now) {
			batchCount++;

			// –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–∞—Ç—á–∞
			const endTime = new Date(Math.min(
				startTime.getTime() + config.batchSize * 5 * 60 * 1000, // 1000 —Å–≤–µ—á–µ–π * 5 –º–∏–Ω—É—Ç
				now.getTime()
			));

			try {
				// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance
				const klines = await fetchKlines(startTime, endTime);

				if (klines.length === 0) {
					console.log(`üì≠ –ë–∞—Ç—á ${batchCount}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö`);
					break;
				}

				// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
				const candles = klines.map(transformKlineData);

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
				const upserted = await upsertCandles(candles);
				totalUpserted += upserted;

				const lastCandle = candles[candles.length - 1];
				console.log(`‚úÖ –ë–∞—Ç—á ${batchCount}: ${upserted} —Å–≤–µ—á–µ–π, –ø–æ—Å–ª–µ–¥–Ω—è—è: ${lastCandle.closeTime.toISOString()}`);

				// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
				startTime = new Date(lastCandle.closeTime.getTime() + 5 * 60 * 1000);

				// –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
				if (startTime < now) {
					await delay(config.delayBetweenBatches);
				}

			} catch (error) {
				console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ ${batchCount}:`, error.message);
				throw error;
			}
		}

		console.log('üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
		console.log(`üìä –ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞—Ç—á–µ–π: ${batchCount}`);
		console.log(`üìà –ò—Ç–æ–≥–æ upsert —Å–≤–µ—á–µ–π: ${totalUpserted}`);

	} catch (error) {
		console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
		throw error;
	}
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
	try {
		await syncKlines();
		console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
		process.exit(0);
	} catch (error) {
		console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
		process.exit(1);
	} finally {
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
		await prisma.$disconnect();
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
	console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
	await prisma.$disconnect();
	process.exit(0);
});

process.on('SIGTERM', async () => {
	console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
	await prisma.$disconnect();
	process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
	main();
}
