const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugSpecificUser() {
	console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n');

	const deviceId = 'ios_B8CD09A5-8617-4F7E-BEAA-45DDA503DADD_1757187698765';
	const appName = 'etf.flow';

	try {
		// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º deviceId
		console.log('1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ deviceId:', deviceId);
		const userByDeviceId = await prisma.user.findFirst({
			where: {
				deviceId: deviceId,
				application: { name: appName },
			},
			include: { application: true },
		});

		if (userByDeviceId) {
			console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
			console.log('   ID:', userByDeviceId.id);
			console.log('   Device ID:', userByDeviceId.deviceId);
			console.log('   Application:', userByDeviceId.application.name);
			console.log('   Application Display Name:', userByDeviceId.application.displayName);
			console.log('   Telegram Chat ID:', userByDeviceId.telegramChatId);
			console.log('   Settings:', JSON.stringify(userByDeviceId.settings, null, 2));
		} else {
			console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω');
		}

		console.log('\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ö–æ–∂–∏–º deviceId...');
		const similarUsers = await prisma.user.findMany({
			where: {
				deviceId: {
					contains: 'B8CD09A5-8617-4F7E-BEAA-45DDA503DADD',
				},
			},
			include: { application: true },
		});

		console.log(`–ù–∞–π–¥–µ–Ω–æ ${similarUsers.length} –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
		similarUsers.forEach((user, index) => {
			console.log(`   ${index + 1}. Device ID: ${user.deviceId}`);
			console.log(`      App: ${user.application.name} (${user.application.displayName})`);
			console.log(`      Telegram: ${user.telegramChatId || '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}`);
		});

		console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
		const applications = await prisma.application.findMany();
		console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:');
		applications.forEach((app, index) => {
			console.log(`   ${index + 1}. ${app.name} - ${app.displayName}`);
		});

		console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è etf.flow...');
		const etfFlowUsers = await prisma.user.findMany({
			where: {
				application: { name: 'etf.flow' },
			},
			include: { application: true },
			take: 10, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
		});

		console.log(`–ù–∞–π–¥–µ–Ω–æ ${etfFlowUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π etf.flow:`);
		etfFlowUsers.forEach((user, index) => {
			console.log(`   ${index + 1}. Device ID: ${user.deviceId}`);
			console.log(`      Telegram: ${user.telegramChatId || '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}`);
			console.log(`      Created: ${user.createdAt}`);
		});

	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞:', error);
	} finally {
		await prisma.$disconnect();
	}
}

debugSpecificUser();
