const { NestFactory } = require('@nestjs/core');
const { AppModule } = require('./dist/app.module');
const { UniversalETFFlowService } = require('./dist/etf/universal-etf-flow.service');
const { NotificationService } = require('./dist/notifications/notification.service');

async function testNotificationFlow() {
	console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...\n');

	try {
		const app = await NestFactory.create(AppModule);

		const etfFlowService = app.get(UniversalETFFlowService);
		const notificationService = app.get(NotificationService);

		console.log('‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

		// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
		console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö...');
		const results = await etfFlowService.parseAllETFFlowData();

		console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:');
		console.log(`Ethereum: ${results.ethereum.success ? '‚úÖ' : '‚ùå'} ${results.ethereum.count} –∑–∞–ø–∏—Å–µ–π, –Ω–æ–≤—ã—Ö: ${results.ethereum.newDataCount || 0}`);
		console.log(`Bitcoin: ${results.bitcoin.success ? '‚úÖ' : '‚ùå'} ${results.bitcoin.count} –∑–∞–ø–∏—Å–µ–π, –Ω–æ–≤—ã—Ö: ${results.bitcoin.newDataCount || 0}`);

		// –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if (results.ethereum.hasNewData || results.bitcoin.hasNewData) {
			console.log('\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

			const notificationData = {
				bitcoinFlow: results.bitcoin.newData?.total || 0,
				ethereumFlow: results.ethereum.newData?.total || 0,
				bitcoinTotal: results.bitcoin.newData?.total || 0,
				ethereumTotal: results.ethereum.newData?.total || 0,
				date: new Date().toISOString().split('T')[0],
				bitcoinData: results.bitcoin.newData,
				ethereumData: results.ethereum.newData,
			};

			const success = await notificationService.sendETFUpdateNotification(notificationData);
			console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${success ? '‚úÖ' : '‚ùå'}`);
		} else {
			console.log('\nüì≠ –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è');
		}

		await app.close();

	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
		console.error(error.stack);
	}
}

testNotificationFlow();
