const axios = require('axios');

const BASE_URL = 'http://localhost:3066';

async function testCompleteFlow() {
	console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí Telegram –±–æ—Ç\n');

	// 1. –°–∏–º—É–ª–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º deviceId
	const mobileDeviceId = 'ios_B8CD09A5-8617-4F7E-BEAA-45DDA503DADD_1757187698765';
	const appName = 'etf.flow';

	console.log('üì± 1. –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç deviceId:');
	console.log(`   ${mobileDeviceId}`);
	console.log('');

	// 2. –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
	console.log('üì± 2. –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...');
	const registrationData = {
		token: 'test_telegram_token',
		appName: appName,
		deviceId: mobileDeviceId,
		deviceType: 'ios',
		appVersion: '1.0.0',
		firstName: 'Mobile',
		lastName: 'User',
		email: 'mobile@test.com',
	};

	try {
		const registrationResponse = await axios.post(`${BASE_URL}/notifications/register-device`, registrationData);
		console.log('   ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', registrationResponse.data.success);
		console.log('');

		// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –ë–î
		console.log('üìã 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î...');
		const { exec } = require('child_process');
		const { promisify } = require('util');
		const execAsync = promisify(exec);

		// –û–∂–∏–¥–∞–µ–º—ã–π –æ—á–∏—â–µ–Ω–Ω—ã–π deviceId
		const expectedCleanDeviceId = 'B8CD09A5-8617-4F7E-BEAA-45DDA503DADD_1757187698765';

		const dbQuery = `psql -d etf_flow_db -c "SELECT \\"deviceId\\", \\"os\\", \\"telegramChatId\\" FROM \\"User\\" WHERE \\"deviceId\\" = '${expectedCleanDeviceId}';"`;
		const { stdout } = await execAsync(dbQuery);

		console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ –ë–î:');
		console.log(stdout);

		if (stdout.includes(expectedCleanDeviceId)) {
			console.log('   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º deviceId');
			console.log('');

			// 4. –°–∏–º—É–ª–∏—Ä—É–µ–º Telegram –±–æ—Ç - –∫–æ–º–∞–Ω–¥–∞ /start
			console.log('ü§ñ 4. Telegram –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start...');
			const telegramStartParam = `${appName}:${mobileDeviceId}`;
			console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä start: ${telegramStartParam}`);

			// –õ–æ–≥–∏–∫–∞ Telegram –±–æ—Ç–∞ (–∫–∞–∫ –≤ –∫–æ–¥–µ)
			let parsedAppName = 'etf.flow';
			let parsedDeviceId = '';

			if (telegramStartParam.includes(':')) {
				const parts = telegramStartParam.split(':');
				parsedAppName = parts[0];
				parsedDeviceId = parts[1];
			} else {
				parsedDeviceId = telegramStartParam;
			}

			console.log(`   –ü–∞—Ä—Å–∏–Ω–≥: appName=${parsedAppName}, deviceId=${parsedDeviceId}`);

			// –û—á–∏—â–∞–µ–º deviceId (–∫–∞–∫ –≤ Telegram –±–æ—Ç–µ)
			let cleanDeviceId = parsedDeviceId;
			if (parsedDeviceId.startsWith('ios_')) {
				cleanDeviceId = parsedDeviceId.substring(4);
			} else if (parsedDeviceId.startsWith('android_')) {
				cleanDeviceId = parsedDeviceId.substring(8);
			}

			console.log(`   –û—á–∏—â–µ–Ω–Ω—ã–π deviceId: ${cleanDeviceId}`);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ—Ç –ª–∏ Telegram –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const telegramDbQuery = `psql -d etf_flow_db -c "SELECT \\"deviceId\\", \\"os\\", \\"telegramChatId\\" FROM \\"User\\" WHERE \\"deviceId\\" = '${cleanDeviceId}';"`;
			const { stdout: telegramStdout } = await execAsync(telegramDbQuery);

			console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ Telegram –±–æ—Ç–æ–º:');
			console.log(telegramStdout);

			if (telegramStdout.includes(cleanDeviceId)) {
				console.log('   ‚úÖ Telegram –±–æ—Ç –Ω–∞–π–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
				console.log('   ‚úÖ –ú–æ–∂–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram Chat ID');
				console.log('   ‚úÖ –ú–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ settings');
				console.log('');
				console.log('üéØ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!');
				console.log('üîó Telegram —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
				console.log(`   https://t.me/etf_flows_bot?start=${telegramStartParam}`);
			} else {
				console.log('   ‚ùå Telegram –±–æ—Ç –ù–ï –Ω–∞–π–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
				console.log('   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ –ø–æ–∏—Å–∫–∞');
			}

		} else {
			console.log('   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
			console.log('   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
		}

	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
	}
}

testCompleteFlow();
