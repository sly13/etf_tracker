generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ETFFlow {
  id              String   @id @default(cuid())
  date            DateTime @unique
  blackrock       Float?
  fidelity        Float?
  bitwise         Float?
  twentyOneShares Float?
  vanEck          Float?
  invesco         Float?
  franklin        Float?
  grayscale       Float?
  grayscaleEth    Float?
  total           Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model BTCFlow {
  id              String   @id @default(cuid())
  date            DateTime @unique
  blackrock       Float?
  fidelity        Float?
  bitwise         Float?
  twentyOneShares Float?
  vanEck          Float?
  invesco         Float?
  franklin        Float?
  grayscale       Float?
  grayscaleBtc    Float?
  total           Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  valkyrie        Float?
  wisdomTree      Float?
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email        String?         @unique
  appleId      String?         @unique
  subscription Subscription?
  preferences  UserPreferences?
  createdAt    DateTime        @default(now())
  lastLoginAt  DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Subscription {
  id         String   @id @default(cuid())
  plan       String   @default("free") // "free", "basic", "premium"
  expiresAt  DateTime?
  autoRenew  Boolean  @default(false)
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserPreferences {
  id           String   @id @default(cuid())
  notifications Boolean @default(true)
  theme        String   @default("system")
  favoriteETFs String[] @default([])
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
