generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ETFFlow {
  id              String   @id @default(cuid())
  date            DateTime @unique
  blackrock       Float?
  fidelity        Float?
  bitwise         Float?
  twentyOneShares Float?
  vanEck          Float?
  invesco         Float?
  franklin        Float?
  grayscale       Float?
  grayscaleEth    Float?
  total           Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("eth_flow")
}

model BTCFlow {
  id              String   @id @default(cuid())
  date            DateTime @unique
  blackrock       Float?
  fidelity        Float?
  bitwise         Float?
  twentyOneShares Float?
  vanEck          Float?
  invesco         Float?
  franklin        Float?
  grayscale       Float?
  grayscaleBtc    Float?
  total           Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  valkyrie        Float?
  wisdomTree      Float?

  @@map("btc_flows")
}

model NotificationLog {
  id           String   @id @default(cuid())
  type         String
  title        String
  body         String
  data         Json?
  sentToTokens Int      @default(0)
  successCount Int      @default(0)
  failureCount Int      @default(0)
  createdAt    DateTime @default(now())

  @@map("notification_logs")
}

model Application {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("applications")
}

model User {
  id             String         @id @default(cuid())
  applicationId  String
  deviceId       String?        @unique
  deviceToken    String         @unique
  telegramChatId String?        @unique
  settings       Json?
  isActive       Boolean        @default(true)
  lastUsed       DateTime       @default(now())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  os             String?
  subscriptions  Subscription[]
  application    Application    @relation(fields: [applicationId], references: [id])

  @@index([settings], map: "idx_user_settings", type: Gin)
  @@map("users")
}

model Subscription {
  id                    String    @id @default(cuid())
  userId                String
  revenueCatUserId      String?
  originalTransactionId String?
  productId             String?
  isActive              Boolean   @default(false)
  isPremium             Boolean   @default(false)
  autoRenew             Boolean   @default(false)
  purchaseDate          DateTime?
  expirationDate        DateTime?
  originalPurchaseDate  DateTime?
  environment           String?
  platform              String?
  price                 Float?
  currency              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([revenueCatUserId])
  @@index([originalTransactionId])
  @@map("subscriptions")
}

model Admin {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  email     String?   @unique
  firstName String?
  lastName  String?
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("admins")
}

model TradingPosition {
  id           String    @id @default(cuid())
  symbol       String    // BTC-USDT, ETH-USDT
  side         String    // long, short
  size         Float
  entryPrice   Float     @map("entry_price")
  total        Float     // Значение flow, которое вызвало открытие позиции
  status       String    @default("open") // open, closed, cancelled
  okxOrderId   String?   @map("okx_order_id")
  profitLoss   Float?    @default(0) @map("profit_loss")
  exitPrice    Float?    @map("exit_price")
  closedAt     DateTime? @map("closed_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("trading_positions")
}

model FundDetail {
  id            Int      @id @default(autoincrement())
  fundKey       String   @unique @map("fund_key")
  name          String
  description   String?
  logoUrl       String?  @map("logo_url")
  ticker        String?
  fundType      String?  @map("fund_type")
  feePercentage Float?   @map("fee_percentage")
  launchDate    DateTime? @map("launch_date")
  status        String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  translations  FundTranslation[]

  @@map("fund_details")
}

model FundTranslation {
  id          Int      @id @default(autoincrement())
  fundId      Int      @map("fund_id")
  language    String   // 'en', 'ru', 'es', etc.
  name        String?
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  fund        FundDetail @relation(fields: [fundId], references: [id], onDelete: Cascade)

  @@unique([fundId, language])
  @@map("fund_translations")
}

model BTCandle {
  id               BigInt   @id @default(autoincrement())
  symbol           String   // 'BTCUSDT'
  interval         String   // '1h', '5m', '1d'
  openTime         DateTime @map("open_time") // UTC (время открытия свечи)
  closeTime        DateTime @map("close_time") // UTC (время закрытия свечи)
  open             Float
  high             Float
  low              Float
  close            Float
  volume           Float    // base asset volume (BTC)
  quoteVolume      Float    @map("quote_volume") // quote volume (USDT)
  trades           Int
  takerBuyBase     Float    @map("taker_buy_base")
  takerBuyQuote    Float    @map("taker_buy_quote")
  source           String   @default("binance_spot")
  insertedAt       DateTime @default(now()) @map("inserted_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@unique([symbol, interval, openTime])
  @@index([symbol, interval, openTime], map: "idx_btc_candles_symbol_interval_time")
  @@map("btc_candles")
}
