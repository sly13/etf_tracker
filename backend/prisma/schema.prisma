generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ETFFlow {
  id              String   @id @default(cuid())
  date            DateTime @unique
  blackrock       Float?
  fidelity        Float?
  bitwise         Float?
  twentyOneShares Float?
  vanEck          Float?
  invesco         Float?
  franklin        Float?
  grayscale       Float?
  grayscaleEth    Float?
  total           Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model BTCFlow {
  id              String   @id @default(cuid())
  date            DateTime @unique
  blackrock       Float?
  fidelity        Float?
  bitwise         Float?
  twentyOneShares Float?
  vanEck          Float?
  invesco         Float?
  franklin        Float?
  grayscale       Float?
  grayscaleBtc    Float?
  total           Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  valkyrie        Float?
  wisdomTree      Float?
}

model NotificationLog {
  id           String   @id @default(cuid())
  type         String
  title        String
  body         String
  data         Json?
  sentToTokens Int      @default(0)
  successCount Int      @default(0)
  failureCount Int      @default(0)
  createdAt    DateTime @default(now())
}

model Application {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id               String         @id @default(cuid())
  applicationId    String
  deviceId         String?        @unique
  revenueCatUserId String?        @unique // RevenueCat App User ID
  deviceToken      String         @unique
  telegramChatId   String?        @unique
  os               String?        // Тип ОС: ios, android, web, etc.
  settings         Json?
  isActive         Boolean        @default(true)
  lastUsed         DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  application      Application    @relation(fields: [applicationId], references: [id])
  subscriptions    Subscription[]

  @@index([settings], map: "idx_user_settings", type: Gin)
  @@index([revenueCatUserId])
}

model Subscription {
  id                    String    @id @default(cuid())
  userId                String    // Связь с пользователем
  user                  User      @relation(fields: [userId], references: [id])
  
  // RevenueCat данные
  revenueCatUserId      String?   // RevenueCat App User ID
  originalTransactionId String?   // Apple/Google Transaction ID
  productId             String?   // ID продукта (premium_monthly, etc.)
  
  // Статус подписки
  isActive              Boolean   @default(false)
  isPremium             Boolean   @default(false)
  autoRenew             Boolean   @default(false)
  
  // Даты
  purchaseDate          DateTime?
  expirationDate        DateTime?
  originalPurchaseDate  DateTime?
  
  // Дополнительная информация
  environment           String?   // Sandbox/Production
  platform              String?   // ios/android
  price                 Float?
  currency              String?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([userId])
  @@index([revenueCatUserId])
  @@index([originalTransactionId])
}

model Admin {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  email     String?   @unique
  firstName String?
  lastName  String?
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
