generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ETFFlow {
  id              String   @id @default(cuid())
  date            DateTime @unique
  blackrock       Float?
  fidelity        Float?
  bitwise         Float?
  twentyOneShares Float?
  vanEck          Float?
  invesco         Float?
  franklin        Float?
  grayscale       Float?
  grayscaleEth    Float?
  total           Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model BTCFlow {
  id              String   @id @default(cuid())
  date            DateTime @unique
  blackrock       Float?
  fidelity        Float?
  bitwise         Float?
  twentyOneShares Float?
  vanEck          Float?
  invesco         Float?
  franklin        Float?
  grayscale       Float?
  grayscaleBtc    Float?
  total           Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  valkyrie        Float?
  wisdomTree      Float?
}

model Device {
  id                    String   @id @default(cuid())
  token                 String   @unique
  isValid               Boolean  @default(true)
  isActive              Boolean  @default(true) // активен ли пользователь
  deviceType            String?  // 'android', 'ios', 'web'
  appVersion            String?  // версия приложения
  osVersion             String?  // версия ОС
  language              String?  // язык устройства
  timezone              String?  // часовой пояс
  deviceName            String?  // название устройства
  // Настройки уведомлений
  enableETFUpdates      Boolean  @default(true)
  enableSignificantFlow Boolean  @default(true)
  enableTestNotifications Boolean @default(false)
  minFlowThreshold      Float    @default(0.1) // минимальный порог для уведомлений
  significantChangePercent Float @default(20.0) // процент значительного изменения
  quietHoursStart       String?  // время начала тихих часов (HH:MM)
  quietHoursEnd         String?  // время окончания тихих часов (HH:MM)
  // Метаданные
  lastUsed              DateTime @default(now())
  lastNotificationSent  DateTime? // время последнего отправленного уведомления
  notificationCount     Int      @default(0) // количество отправленных уведомлений
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model NotificationLog {
  id              String   @id @default(cuid())
  type            String   // 'etf_update', 'significant_flow', 'test'
  title           String
  body            String
  data            Json?    // дополнительные данные
  sentToTokens    Int      @default(0) // количество токенов
  successCount    Int      @default(0) // успешно отправлено
  failureCount    Int      @default(0) // неудачно отправлено
  createdAt       DateTime @default(now())
}

model NotificationSettings {
  id                    String   @id @default(cuid())
  enableETFUpdates      Boolean  @default(true)
  enableSignificantFlow Boolean  @default(true)
  enableTestNotifications Boolean @default(false)
  minFlowThreshold      Float    @default(0.1) // минимальный порог для уведомлений
  significantChangePercent Float @default(20.0) // процент значительного изменения
  quietHoursStart       String?  // время начала тихих часов (HH:MM)
  quietHoursEnd         String?  // время окончания тихих часов (HH:MM)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}


