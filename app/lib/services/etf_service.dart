import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/etf_flow_data.dart';
import '../config/app_config.dart';

class ETFService {
  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Ethereum ETF –ø–æ—Ç–æ–∫–æ–≤
  Future<List<ETFFlowData>> getEthereumData() async {
    try {
      final url = AppConfig.getApiUrl('/etf-flow/eth');
      print('üîó –ó–∞–ø—Ä–æ—Å –∫: $url');

      final response = await http.get(Uri.parse(url));
      print(
        'üì° –û—Ç–≤–µ—Ç: ${response.statusCode} - ${response.body.length} —Å–∏–º–≤–æ–ª–æ–≤',
      );

      if (response.statusCode == 200) {
        final List<dynamic> jsonData = json.decode(response.body);
        print('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${jsonData.length} –∑–∞–ø–∏—Å–µ–π Ethereum');
        return jsonData.map((json) => ETFFlowData.fromJson(json)).toList();
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.statusCode}');
        print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
        throw Exception(
          '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Ethereum –¥–∞–Ω–Ω—ã—Ö: ${response.statusCode}',
        );
      }
    } catch (e) {
      print('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $e');
      throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Bitcoin ETF –ø–æ—Ç–æ–∫–æ–≤
  Future<List<ETFFlowData>> getBitcoinData() async {
    try {
      final url = AppConfig.getApiUrl('/etf-flow/bitcoin');
      print('üîó –ó–∞–ø—Ä–æ—Å –∫: $url');

      final response = await http.get(Uri.parse(url));
      print(
        'üì° –û—Ç–≤–µ—Ç: ${response.statusCode} - ${response.body.length} —Å–∏–º–≤–æ–ª–æ–≤',
      );

      if (response.statusCode == 200) {
        final List<dynamic> jsonData = json.decode(response.body);
        print('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${jsonData.length} –∑–∞–ø–∏—Å–µ–π Bitcoin');
        return jsonData.map((json) => ETFFlowData.fromJson(json)).toList();
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.statusCode}');
        print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
        throw Exception(
          '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Bitcoin –¥–∞–Ω–Ω—ã—Ö: ${response.statusCode}',
        );
      }
    } catch (e) {
      print('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $e');
      throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ETF –ø–æ—Ç–æ–∫–æ–≤
  Future<Map<String, dynamic>> getSummaryData() async {
    try {
      final url = AppConfig.getApiUrl('/etf-flow/summary');
      print('üîó –ó–∞–ø—Ä–æ—Å –∫: $url');

      final response = await http.get(Uri.parse(url));
      print(
        'üì° –û—Ç–≤–µ—Ç: ${response.statusCode} - ${response.body.length} —Å–∏–º–≤–æ–ª–æ–≤',
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        print('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å—É–º–º–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return data;
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.statusCode}');
        print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
        throw Exception(
          '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–º–º–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${response.statusCode}',
        );
      }
    } catch (e) {
      print('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $e');
      throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ ETF –ø–æ—Ç–æ–∫–æ–≤
  Future<List<ETFFlowData>> getETFFlowData() async {
    try {
      final url = AppConfig.getApiUrl('/etf-flow');
      print('üîó –ó–∞–ø—Ä–æ—Å –∫: $url');

      final response = await http.get(Uri.parse(url));
      print(
        'üì° –û—Ç–≤–µ—Ç: ${response.statusCode} - ${response.body.length} —Å–∏–º–≤–æ–ª–æ–≤',
      );

      if (response.statusCode == 200) {
        final List<dynamic> jsonData = json.decode(response.body);
        print('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${jsonData.length} –æ–±—â–∏—Ö –∑–∞–ø–∏—Å–µ–π ETF');
        return jsonData.map((json) => ETFFlowData.fromJson(json)).toList();
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.statusCode}');
        print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
        throw Exception(
          '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ETF –ø–æ—Ç–æ–∫–æ–≤: ${response.statusCode}',
        );
      }
    } catch (e) {
      print('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $e');
      throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∞–¥–µ–Ω–∏–∏ —Ñ–æ–Ω–¥–∞–º–∏
  Future<Map<String, dynamic>> getFundHoldings() async {
    try {
      final url = AppConfig.getApiUrl('/etf-flow/holdings');
      print('üîó –ó–∞–ø—Ä–æ—Å –∫: $url');

      final response = await http.get(Uri.parse(url));
      print(
        'üì° –û—Ç–≤–µ—Ç: ${response.statusCode} - ${response.body.length} —Å–∏–º–≤–æ–ª–æ–≤',
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        print('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∞–¥–µ–Ω–∏–∏ —Ñ–æ–Ω–¥–∞–º–∏');
        return data;
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.statusCode}');
        print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
        throw Exception(
          '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–ª–∞–¥–µ–Ω–∏–∏ —Ñ–æ–Ω–¥–∞–º–∏: ${response.statusCode}',
        );
      }
    } catch (e) {
      print('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $e');
      throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    }
  }
}
