import 'dart:convert';
import 'package:http/http.dart' as http;
import '../config/app_config.dart';

class DeviceSettingsService {
  static final DeviceSettingsService _instance =
      DeviceSettingsService._internal();
  factory DeviceSettingsService() => _instance;
  DeviceSettingsService._internal();

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
  static Future<Map<String, dynamic>?> getDeviceSettings(String token) async {
    try {
      final url = AppConfig.getApiUrl('/notifications/device-settings/$token');
      print('üîç DeviceSettingsService: –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ URL: $url');
      print('üîç DeviceSettingsService: –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...');

      final response = await http.get(
        Uri.parse(url),
        headers: {'Content-Type': 'application/json'},
      );

      print('üîç DeviceSettingsService: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      print('üîç DeviceSettingsService: –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        print(
          '‚úÖ DeviceSettingsService: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: ${data['settings']}',
        );
        return data['settings'];
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${response.statusCode}');
        print('‚ùå –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: $e');
      return null;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  static Future<bool> updateDeviceSettings(
    String token,
    Map<String, dynamic> settings,
  ) async {
    try {
      final url = AppConfig.getApiUrl('/notifications/device-settings');
      print('üîç DeviceSettingsService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ URL: $url');
      print('üîç DeviceSettingsService: –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...');
      print('üîç DeviceSettingsService: –ù–∞—Å—Ç—Ä–æ–π–∫–∏: $settings');

      final body = {'token': token, ...settings};

      final response = await http.post(
        Uri.parse(url),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(body),
      );

      print('üîç DeviceSettingsService: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      print('üîç DeviceSettingsService: –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        print('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        return true;
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${response.statusCode}');
        print('‚ùå –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
        return false;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: $e');
      return false;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static Future<bool> sendTestNotification() async {
    try {
      final url = AppConfig.getApiUrl('/notifications/test');

      final response = await http.post(
        Uri.parse(url),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        print('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return true;
      } else {
        print(
          '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${response.statusCode}',
        );
        return false;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static Future<Map<String, dynamic>?> getNotificationStats() async {
    try {
      final url = AppConfig.getApiUrl('/notifications/stats');

      final response = await http.get(
        Uri.parse(url),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return data;
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
      return null;
    }
  }
}
