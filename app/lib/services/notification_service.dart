import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:device_info_plus/device_info_plus.dart';
import '../config/app_config.dart';
import '../firebase_options.dart';
import 'package:http/http.dart' as http;

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  static FirebaseMessaging? _firebaseMessaging;
  static FlutterLocalNotificationsPlugin? _localNotifications;
  static String? _fcmToken;
  static bool _isInitialized = false;

  // Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static Function(Map<String, dynamic>)? onNotificationTap;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
      _firebaseMessaging = FirebaseMessaging.instance;

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      _localNotifications = FlutterLocalNotificationsPlugin();

      const androidSettings = AndroidInitializationSettings(
        '@mipmap/ic_launcher',
      );
      const iosSettings = DarwinInitializationSettings(
        requestAlertPermission: false, // –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å—Ä–∞–∑—É
        requestBadgePermission: false,
        requestSoundPermission: false,
      );

      const initSettings = InitializationSettings(
        android: androidSettings,
        iOS: iosSettings,
      );

      await _localNotifications!.initialize(
        initSettings,
        onDidReceiveNotificationResponse: _onNotificationTap,
      );

      // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android
      await _createNotificationChannel();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Firebase Messaging
      await _setupFirebaseHandlers();

      // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω (–±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)
      await _getFCMToken();

      _isInitialized = true;
      debugPrint(
        '‚úÖ NotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)',
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NotificationService: $e');
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Firebase Messaging
  static Future<void> _setupFirebaseHandlers() async {
    if (_firebaseMessaging == null) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ foreground
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      debugPrint(
        'üì± –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ foreground: ${message.notification?.title}',
      );
      _showLocalNotification(message);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ background
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      debugPrint('üì± –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (background): ${message.data}');
      _handleNotificationTap(message.data);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–æ
    RemoteMessage? initialMessage = await _firebaseMessaging!
        .getInitialMessage();
    if (initialMessage != null) {
      debugPrint(
        'üì± –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (terminated): ${initialMessage.data}',
      );
      _handleNotificationTap(initialMessage.data);
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  static Future<void> _getFCMToken() async {
    try {
      _fcmToken = await _firebaseMessaging!.getToken();
      debugPrint('üîë FCM Token: $_fcmToken');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ SharedPreferences
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('fcm_token', _fcmToken ?? '');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await _sendTokenToServer(_fcmToken);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  static Future<void> _sendTokenToServer(String? token) async {
    if (token == null) return;

    try {
      final url = AppConfig.getApiUrl('/notifications/register-device');

      // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
      final deviceInfo = {
        'token': token,
        'appName': AppConfig.appName, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        'deviceId': await getDeviceId(), // –î–æ–±–∞–≤–ª—è–µ–º deviceId
        'deviceType': _getDeviceType(),
        'appVersion': await _getAppVersion(),
        'osVersion': await _getOSVersion(),
        'language': _getLanguage(),
        'timezone': _getTimezone(),
        'deviceName': await _getDeviceName(),
      };

      final response = await http.post(
        Uri.parse(url),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(deviceInfo),
      );

      if (response.statusCode >= 200 && response.statusCode < 300) {
        debugPrint('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      } else {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${response.statusCode}');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  static String _getDeviceType() {
    if (kIsWeb) return 'web';
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å device_info_plus
    return 'mobile';
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ deviceId —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  static Future<String> getDeviceId() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      String? deviceId = prefs.getString('deviceId');

      if (deviceId == null) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π deviceId
        final deviceInfo = DeviceInfoPlugin();
        String deviceIdentifier;

        if (Platform.isAndroid) {
          final androidInfo = await deviceInfo.androidInfo;
          deviceIdentifier = androidInfo.id;
        } else if (Platform.isIOS) {
          final iosInfo = await deviceInfo.iosInfo;
          deviceIdentifier = iosInfo.identifierForVendor ?? 'unknown';
        } else {
          deviceIdentifier = 'unknown';
        }

        deviceId =
            '${Platform.operatingSystem}_${deviceIdentifier}_${DateTime.now().millisecondsSinceEpoch}';
        await prefs.setString('deviceId', deviceId);
      }

      return deviceId;
    } catch (e) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback deviceId
      return '${Platform.operatingSystem}_fallback_${DateTime.now().millisecondsSinceEpoch}';
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static Future<String> _getAppVersion() async {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å package_info_plus
    return '1.0.0';
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –û–°
  static Future<String> _getOSVersion() async {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å device_info_plus
    return 'unknown';
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  static String _getLanguage() {
    return 'ru'; // –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
  static String _getTimezone() {
    return DateTime.now().timeZoneName;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  static Future<String> _getDeviceName() async {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å device_info_plus
    return 'ETF Flow Device';
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android
  static Future<void> _createNotificationChannel() async {
    if (_localNotifications == null) return;

    try {
      const androidChannel = AndroidNotificationChannel(
        'etf_notifications',
        'ETF Flow Notifications',
        description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Ç–æ–∫–∞—Ö ETF',
        importance: Importance.max,
        playSound: true,
        enableVibration: true,
      );

      await _localNotifications!
          .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin
          >()
          ?.createNotificationChannel(androidChannel);

      debugPrint('‚úÖ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: $e');
    }
  }

  /// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
  static Future<bool> requestPermissions() async {
    try {
      debugPrint('üîî –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');

      // –î–ª—è iOS
      final iosSettings = await _firebaseMessaging!.requestPermission(
        alert: true,
        badge: true,
        sound: true,
        provisional: false,
      );

      // –î–ª—è Android
      final androidPermission = await _localNotifications!
          .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin
          >()
          ?.requestNotificationsPermission();

      final isGranted =
          iosSettings.authorizationStatus == AuthorizationStatus.authorized &&
          (androidPermission ?? false);

      debugPrint(
        '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${isGranted ? "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã" : "–æ—Ç–∫–ª–æ–Ω–µ–Ω—ã"}',
      );
      debugPrint('üì± iOS —Å—Ç–∞—Ç—É—Å: ${iosSettings.authorizationStatus}');
      debugPrint('üì± Android —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: $androidPermission');

      return isGranted;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static Future<bool> checkPermissions() async {
    try {
      final settings = await _firebaseMessaging!.getNotificationSettings();
      return settings.authorizationStatus == AuthorizationStatus.authorized;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
      return false;
    }
  }

  /// –ü–æ–∫–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static Future<void> _showLocalNotification(RemoteMessage message) async {
    if (_localNotifications == null) {
      debugPrint('‚ùå _localNotifications is null');
      return;
    }

    debugPrint(
      'üîî –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message.notification?.title}',
    );

    const androidDetails = AndroidNotificationDetails(
      'etf_notifications',
      'ETF Flow Notifications',
      channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Ç–æ–∫–∞—Ö ETF',
      importance: Importance.max,
      priority: Priority.max,
      icon: '@mipmap/ic_launcher',
      showWhen: true,
      enableVibration: true,
      playSound: true,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'default',
      badgeNumber: 1,
      interruptionLevel: InterruptionLevel.active,
    );

    const notificationDetails = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _localNotifications!.show(
      message.hashCode,
      message.notification?.title ?? 'ETF Flow Update',
      message.notification?.body ?? '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç–æ–∫–∞—Ö ETF',
      notificationDetails,
      payload: json.encode(message.data),
    );

    debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  static void _onNotificationTap(NotificationResponse response) {
    if (response.payload != null) {
      try {
        final data = json.decode(response.payload!);
        _handleNotificationTap(data);
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
      }
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  static void _handleNotificationTap(Map<String, dynamic> data) {
    debugPrint('üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: $data');

    // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (onNotificationTap != null) {
      onNotificationTap!(data);
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π FCM —Ç–æ–∫–µ–Ω
  static String? get fcmToken => _fcmToken;

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å
  static bool get isInitialized => _isInitialized;

  /// –û–±–Ω–æ–≤–∏—Ç—å FCM —Ç–æ–∫–µ–Ω (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞)
  static Future<void> refreshToken() async {
    await _getFCMToken();
  }

  /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–ø–∏–∫
  static Future<void> subscribeToTopic(String topic) async {
    try {
      await _firebaseMessaging!.subscribeToTopic(topic);
      debugPrint('‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–æ–ø–∏–∫: $topic');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫ $topic: $e');
    }
  }

  /// –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–æ–ø–∏–∫–∞
  static Future<void> unsubscribeFromTopic(String topic) async {
    try {
      await _firebaseMessaging!.unsubscribeFromTopic(topic);
      debugPrint('‚úÖ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–æ–ø–∏–∫–∞: $topic');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ç–æ–ø–∏–∫–∞ $topic: $e');
    }
  }
}
