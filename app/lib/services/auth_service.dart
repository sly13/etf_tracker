import 'dart:convert';
import 'dart:async';
import 'package:http/http.dart' as http;
import 'package:sign_in_with_apple/sign_in_with_apple.dart';
import '../models/user.dart';
import '../config/app_config.dart';

class AuthService {
  static const Duration _timeout = Duration(seconds: 10);

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Apple
  Future<User> signInWithApple() async {
    try {
      print('üîß –ù–∞—á–∏–Ω–∞–µ–º Apple Sign-In...');
      print('üîß Bundle ID: com.sly13.etfTracker');
      print('üîß –†–µ–∂–∏–º: ${AppConfig.isDebugMode ? "Debug" : "Release"}');

      // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Apple
      final credential = await SignInWithApple.getAppleIDCredential(
        scopes: [
          AppleIDAuthorizationScopes.email,
          AppleIDAuthorizationScopes.fullName,
        ],
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      final response = await http
          .post(
            Uri.parse(AppConfig.getApiUrl('/auth/apple')),
            headers: {'Content-Type': 'application/json'},
            body: json.encode({
              'identityToken': credential.identityToken,
              'authorizationCode': credential.authorizationCode,
              'userIdentifier': credential.userIdentifier,
              'givenName': credential.givenName,
              'familyName': credential.familyName,
              'email': credential.email,
            }),
          )
          .timeout(_timeout);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return User.fromJson(data['user']);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${response.statusCode}');
      }
    } catch (e) {
      if (e is TimeoutException) {
        throw Exception('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      throw Exception('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Apple: $e');
    }
  }

  // Mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è dev —Ä–µ–∂–∏–º–∞
  User _getMockUser() {
    return User(
      id: 'dev_user_001',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      email: 'test@example.com',
      appleId: 'dev_apple_id_001',
      subscription: Subscription(
        plan: 'free',
        expiresAt: null,
        autoRenew: false,
      ),
      preferences: UserPreferences(
        notifications: true,
        theme: 'system',
        favoriteETFs: ['ARKB', 'IBIT'],
      ),
      createdAt: DateTime.now().subtract(const Duration(days: 30)),
      lastLoginAt: DateTime.now(),
    );
  }

  // –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  Future<void> signOut() async {
    try {
      final response = await http
          .post(Uri.parse(AppConfig.getApiUrl('/auth/logout')))
          .timeout(_timeout);

      if (response.statusCode != 200) {
        throw Exception('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ${response.statusCode}');
      }
    } catch (e) {
      if (e is TimeoutException) {
        throw Exception('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      throw Exception('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: $e');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  Future<User> validateToken(String token) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ dev —Ä–µ–∂–∏–º–µ
      if (AppConfig.isDebugMode) {
        print('üîß Dev —Ä–µ–∂–∏–º: –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è validateToken');
        return _getMockUser();
      }

      final response = await http
          .get(
            Uri.parse(AppConfig.getApiUrl('/auth/validate')),
            headers: {'Authorization': 'Bearer $token'},
          )
          .timeout(_timeout);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return User.fromJson(data['user']);
      } else {
        throw Exception('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: ${response.statusCode}');
      }
    } catch (e) {
      if (e is TimeoutException) {
        throw Exception('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<User> updateProfile({
    required String userId,
    String? name,
    UserPreferences? preferences,
  }) async {
    try {
      final response = await http
          .put(
            Uri.parse(AppConfig.getApiUrl('/auth/profile')),
            headers: {'Content-Type': 'application/json'},
            body: json.encode({
              'userId': userId,
              if (name != null) 'name': name,
              if (preferences != null) 'preferences': preferences.toJson(),
            }),
          )
          .timeout(_timeout);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return User.fromJson(data['user']);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${response.statusCode}');
      }
    } catch (e) {
      if (e is TimeoutException) {
        throw Exception('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<User> updateSubscription({
    required String userId,
    required Subscription subscription,
  }) async {
    try {
      final response = await http
          .put(
            Uri.parse(AppConfig.getApiUrl('/auth/subscription')),
            headers: {'Content-Type': 'application/json'},
            body: json.encode({
              'userId': userId,
              'subscription': subscription.toJson(),
            }),
          )
          .timeout(_timeout);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return User.fromJson(data['user']);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: ${response.statusCode}');
      }
    } catch (e) {
      if (e is TimeoutException) {
        throw Exception('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: $e');
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> registerDevice({
    required String userId,
    required String deviceToken,
  }) async {
    try {
      final response = await http
          .post(
            Uri.parse(AppConfig.getApiUrl('/auth/device')),
            headers: {'Content-Type': 'application/json'},
            body: json.encode({
              'userId': userId,
              'deviceToken': deviceToken,
              'platform': 'ios', // –∏–ª–∏ 'android'
            }),
          )
          .timeout(_timeout);

      if (response.statusCode != 200) {
        throw Exception(
          '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${response.statusCode}',
        );
      }
    } catch (e) {
      if (e is TimeoutException) {
        throw Exception('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      throw Exception('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: $e');
    }
  }
}
