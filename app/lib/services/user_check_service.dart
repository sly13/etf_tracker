import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import '../config/app_config.dart';
import 'notification_service.dart';

class UserCheckService {
  static const Duration _timeout = Duration(seconds: 10);

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  static Future<bool> ensureUserExists() async {
    try {
      print('üë§ === –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===');

      // –ü–æ–ª—É—á–∞–µ–º deviceId
      final deviceId = await NotificationService.getDeviceId();
      print('üì± Device ID: $deviceId');

      if (deviceId == null || deviceId.isEmpty) {
        print('‚ùå Device ID –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      final url = AppConfig.getApiUrl('/subscription/check-or-create-user');

      final response = await http
          .post(
            Uri.parse(url),
            headers: {'Content-Type': 'application/json'},
            body: json.encode({
              'deviceId': deviceId,
              'userId': 'user_${DateTime.now().millisecondsSinceEpoch}',
            }),
          )
          .timeout(_timeout);

      print('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}');
      print('üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode >= 200 && response.statusCode < 300) {
        final data = json.decode(response.body);

        if (data['success'] == true) {
          if (data['created'] == true) {
            print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
          } else {
            print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
          }
          return true;
        } else {
          print('‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${data['error']}');
          return false;
        }
      } else {
        print('‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
  static Future<bool> checkUserBeforePurchase() async {
    try {
      print('üí≥ === –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–ï–†–ï–î –ü–û–ö–£–ü–ö–û–ô ===');

      final userExists = await ensureUserExists();

      if (userExists) {
        print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ');
        return true;
      } else {
        print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ');
        return false;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π: $e');
      return false;
    }
  }

  /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  static Future<bool> registerDeviceWithFullData() async {
    try {
      print('üì± === –ü–û–õ–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–¢–†–û–ô–°–¢–í–ê ===');

      // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω
      final fcmToken = NotificationService.fcmToken;
      if (fcmToken == null) {
        print('‚ùå FCM —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º deviceId
      final deviceId = await NotificationService.getDeviceId();
      if (deviceId == null) {
        print('‚ùå Device ID –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        return false;
      }

      print('üîë FCM Token: ${fcmToken.substring(0, 20)}...');
      print('üì± Device ID: $deviceId');

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ NotificationService
      final url = AppConfig.getApiUrl('/notifications/register-device');

      final deviceInfo = {
        'token': fcmToken,
        'appName': AppConfig.appName,
        'deviceId': deviceId,
        'deviceType': Platform.operatingSystem,
        'appVersion': '1.0.0',
        'osVersion': Platform.operatingSystemVersion,
        'language': 'ru',
        'timezone': DateTime.now().timeZoneName,
        'deviceName': 'ETF Tracker Device',
        'firstName': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'lastName': 'ETF',
        'email': 'user@etftracker.com',
      };

      final response = await http
          .post(
            Uri.parse(url),
            headers: {'Content-Type': 'application/json'},
            body: json.encode(deviceInfo),
          )
          .timeout(_timeout);

      print('üì° –û—Ç–≤–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${response.statusCode}');
      print('üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode >= 200 && response.statusCode < 300) {
        print('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        return true;
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: $e');
      return false;
    }
  }
}
