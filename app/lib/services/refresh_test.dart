import '../providers/etf_provider.dart';
import '../utils/haptic_feedback.dart';

class RefreshTest {
  // –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ pull-to-refresh
  static Future<void> testPullToRefresh(ETFProvider provider) async {
    try {
      print('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å pull-to-refresh...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      print('üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
      print('  - isLoading: ${provider.isLoading}');
      print('  - isDataReady: ${provider.isDataReady}');
      print('  - ethereumData.length: ${provider.ethereumData.length}');
      print('  - bitcoinData.length: ${provider.bitcoinData.length}');

      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      print('üì± –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å...');
      HapticUtils.lightImpact();
      await Future.delayed(Duration(milliseconds: 100));
      HapticUtils.notificationSuccess();

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      print('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
      await provider.forceRefreshAllData();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      print('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      print('  - isLoading: ${provider.isLoading}');
      print('  - isDataReady: ${provider.isDataReady}');
      print('  - ethereumData.length: ${provider.ethereumData.length}');
      print('  - bitcoinData.length: ${provider.bitcoinData.length}');
      print('  - error: ${provider.error}');

      if (provider.error == null) {
        print('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ');
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${provider.error}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è pull-to-refresh: $e');
    }
  }

  // –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  static void testLoadingStates(ETFProvider provider) {
    print('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...');

    print('üìä –¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:');
    print('  - isLoading: ${provider.isLoading}');
    print('  - isInitializing: ${provider.isInitializing}');
    print('  - isEthereumLoaded: ${provider.isEthereumLoaded}');
    print('  - isBitcoinLoaded: ${provider.isBitcoinLoaded}');
    print('  - isDataReady: ${provider.isDataReady}');
    print('  - lastDataUpdate: ${provider.lastDataUpdate}');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    final shouldShowRefresh =
        provider.lastDataUpdate != null &&
        DateTime.now().difference(provider.lastDataUpdate!).inHours >= 1;
    print('  - shouldShowRefreshButton: $shouldShowRefresh');

    print('‚úÖ –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  // –¢–µ—Å—Ç —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  static void testHapticFeedback() {
    print('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å...');

    print('üì± –õ–µ–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è...');
    HapticUtils.lightImpact();

    Future.delayed(Duration(milliseconds: 500), () {
      print('üì± –°—Ä–µ–¥–Ω—è—è –≤–∏–±—Ä–∞—Ü–∏—è...');
      HapticUtils.mediumImpact();

      Future.delayed(Duration(milliseconds: 500), () {
        print('üì± –¢—è–∂–µ–ª–∞—è –≤–∏–±—Ä–∞—Ü–∏—è...');
        HapticUtils.heavyImpact();

        Future.delayed(Duration(milliseconds: 500), () {
          print('üì± –í–∏–±—Ä–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞...');
          HapticUtils.notificationSuccess();

          Future.delayed(Duration(milliseconds: 500), () {
            print('üì± –í–∏–±—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏...');
            HapticUtils.notificationError();
            print('‚úÖ –¢–µ—Å—Ç —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
          });
        });
      });
    });
  }

  // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Bitcoin –¥–∞–Ω–Ω—ã—Ö
  static Future<void> testBitcoinRefresh(ETFProvider provider) async {
    try {
      print('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Bitcoin –¥–∞–Ω–Ω—ã—Ö...');

      print('üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Bitcoin:');
      print('  - bitcoinData.length: ${provider.bitcoinData.length}');
      print('  - isBitcoinLoaded: ${provider.isBitcoinLoaded}');

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Bitcoin –¥–∞–Ω–Ω—ã—Ö
      print('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Bitcoin –¥–∞–Ω–Ω—ã—Ö...');
      await provider.loadBitcoinData();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      print('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ Bitcoin –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      print('  - bitcoinData.length: ${provider.bitcoinData.length}');
      print('  - isBitcoinLoaded: ${provider.isBitcoinLoaded}');
      print('  - error: ${provider.error}');

      if (provider.error == null) {
        print('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Bitcoin –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ');
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Bitcoin: ${provider.error}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Bitcoin refresh: $e');
    }
  }

  // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Ethereum –¥–∞–Ω–Ω—ã—Ö
  static Future<void> testEthereumRefresh(ETFProvider provider) async {
    try {
      print('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Ethereum –¥–∞–Ω–Ω—ã—Ö...');

      print('üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Ethereum:');
      print('  - ethereumData.length: ${provider.ethereumData.length}');
      print('  - isEthereumLoaded: ${provider.isEthereumLoaded}');

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Ethereum –¥–∞–Ω–Ω—ã—Ö
      print('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Ethereum –¥–∞–Ω–Ω—ã—Ö...');
      await provider.loadEthereumData();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      print('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ Ethereum –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      print('  - ethereumData.length: ${provider.ethereumData.length}');
      print('  - isEthereumLoaded: ${provider.isEthereumLoaded}');
      print('  - error: ${provider.error}');

      if (provider.error == null) {
        print('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Ethereum –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ');
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Ethereum: ${provider.error}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ethereum refresh: $e');
    }
  }

  // –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  static Future<void> runAllTests(ETFProvider provider) async {
    print('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');

    testHapticFeedback();
    await Future.delayed(Duration(seconds: 3));

    testLoadingStates(provider);
    await Future.delayed(Duration(seconds: 1));

    await testPullToRefresh(provider);
    await Future.delayed(Duration(seconds: 2));

    await testBitcoinRefresh(provider);
    await Future.delayed(Duration(seconds: 2));

    await testEthereumRefresh(provider);

    print('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  }
}
