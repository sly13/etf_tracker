import 'package:firebase_analytics/firebase_analytics.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firebase Analytics
class AnalyticsService {
  static final FirebaseAnalytics _analytics = FirebaseAnalytics.instance;

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  static Future<void> logScreenView({
    required String screenName,
    String? screenClass,
  }) async {
    try {
      await _analytics.logScreenView(
        screenName: screenName,
        screenClass: screenClass,
      );
      print('üìä Analytics: Screen view logged - $screenName');
    } catch (e) {
      print('‚ùå Analytics error: Failed to log screen view - $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
  static Future<void> logButtonClick({
    required String buttonName,
    String? screenName,
    Map<String, dynamic>? parameters,
  }) async {
    try {
      final eventParams = <String, dynamic>{
        'button_name': buttonName,
        if (screenName != null) 'screen_name': screenName,
        ...?parameters,
      };

      await _analytics.logEvent(
        name: 'button_click',
        parameters: eventParams.cast<String, Object>(),
      );
      print('üìä Analytics: Button click logged - $buttonName');
    } catch (e) {
      print('‚ùå Analytics error: Failed to log button click - $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ETF –¥–∞–Ω–Ω—ã—Ö
  static Future<void> logETFDataView({
    required String etfType, // 'bitcoin' –∏–ª–∏ 'ethereum'
    String? fundName,
    Map<String, dynamic>? additionalParams,
  }) async {
    try {
      final eventParams = <String, dynamic>{
        'etf_type': etfType,
        if (fundName != null) 'fund_name': fundName,
        ...?additionalParams,
      };

      await _analytics.logEvent(
        name: 'etf_data_view',
        parameters: eventParams.cast<String, Object>(),
      );
      print('üìä Analytics: ETF data view logged - $etfType');
    } catch (e) {
      print('‚ùå Analytics error: Failed to log ETF data view - $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  static Future<void> logDataRefresh({
    required String dataType, // 'etf_flows', 'crypto_prices'
    bool success = true,
    String? errorMessage,
  }) async {
    try {
      final eventParams = <String, dynamic>{
        'data_type': dataType,
        'success': success,
        if (errorMessage != null) 'error_message': errorMessage,
      };

      await _analytics.logEvent(
        name: 'data_refresh',
        parameters: eventParams.cast<String, Object>(),
      );
      print(
        'üìä Analytics: Data refresh logged - $dataType (success: $success)',
      );
    } catch (e) {
      print('‚ùå Analytics error: Failed to log data refresh - $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
  static Future<void> logThemeChange({
    required String themeMode, // 'light', 'dark', 'system'
  }) async {
    try {
      await _analytics.logEvent(
        name: 'theme_change',
        parameters: {'theme_mode': themeMode},
      );
      print('üìä Analytics: Theme change logged - $themeMode');
    } catch (e) {
      print('‚ùå Analytics error: Failed to log theme change - $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
  static Future<void> logLanguageChange({
    required String languageCode, // 'en', 'ru'
  }) async {
    try {
      await _analytics.logEvent(
        name: 'language_change',
        parameters: {'language_code': languageCode},
      );
      print('üìä Analytics: Language change logged - $languageCode');
    } catch (e) {
      print('‚ùå Analytics error: Failed to log language change - $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
  static Future<void> logSubscriptionEvent({
    required String eventType, // 'started', 'completed', 'cancelled', 'failed'
    String? packageName,
    String? productId,
    Map<String, dynamic>? additionalParams,
  }) async {
    try {
      final eventParams = <String, dynamic>{
        'event_type': eventType,
        if (packageName != null) 'package_name': packageName,
        if (productId != null) 'product_id': productId,
        ...?additionalParams,
      };

      await _analytics.logEvent(
        name: 'subscription_event',
        parameters: eventParams.cast<String, Object>(),
      );
      print('üìä Analytics: Subscription event logged - $eventType');
    } catch (e) {
      print('‚ùå Analytics error: Failed to log subscription event - $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
  static Future<void> logError({
    required String errorType,
    required String errorMessage,
    String? screenName,
    Map<String, dynamic>? additionalParams,
  }) async {
    try {
      final eventParams = <String, dynamic>{
        'error_type': errorType,
        'error_message': errorMessage,
        if (screenName != null) 'screen_name': screenName,
        ...?additionalParams,
      };

      await _analytics.logEvent(
        name: 'app_error',
        parameters: eventParams.cast<String, Object>(),
      );
      print('üìä Analytics: Error logged - $errorType');
    } catch (e) {
      print('‚ùå Analytics error: Failed to log error - $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
  static Future<void> logSessionDuration({
    required int durationInSeconds,
    String? screenName,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'session_duration',
        parameters: {
          'duration_seconds': durationInSeconds,
          if (screenName != null) 'screen_name': screenName,
        },
      );
      print('üìä Analytics: Session duration logged - ${durationInSeconds}s');
    } catch (e) {
      print('‚ùå Analytics error: Failed to log session duration - $e');
    }
  }

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
  static Future<void> setUserProperty({
    required String name,
    required String value,
  }) async {
    try {
      await _analytics.setUserProperty(name: name, value: value);
      print('üìä Analytics: User property set - $name: $value');
    } catch (e) {
      print('‚ùå Analytics error: Failed to set user property - $e');
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä FirebaseAnalytics –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  static FirebaseAnalytics get instance => _analytics;
}
