import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';

class OnboardingProvider extends ChangeNotifier {
  static const String _onboardingCompletedKey = 'onboarding_completed';
  static const String _onboardingShownKey = 'onboarding_shown';
  static const String _paywallSkippedKey = 'paywall_skipped';

  bool _isOnboardingCompleted = false;
  bool _isOnboardingShown = false;
  bool _isPaywallSkipped = false;
  bool _isInitialized = false;

  // Getters
  bool get isOnboardingCompleted => _isOnboardingCompleted;
  bool get isOnboardingShown => _isOnboardingShown;
  bool get isPaywallSkipped => _isPaywallSkipped;
  bool get isInitialized => _isInitialized;
  bool get shouldShowOnboarding =>
      !_isOnboardingCompleted && !_isOnboardingShown;
  bool get shouldShowPaywall => _isOnboardingCompleted && !_isPaywallSkipped;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      final prefs = await SharedPreferences.getInstance();

      _isOnboardingCompleted = prefs.getBool(_onboardingCompletedKey) ?? false;
      _isOnboardingShown = prefs.getBool(_onboardingShownKey) ?? false;
      _isPaywallSkipped = prefs.getBool(_paywallSkippedKey) ?? false;

      _isInitialized = true;

      if (kDebugMode) {
        print('üîß OnboardingProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        print('   - –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: $_isOnboardingCompleted');
        print('   - –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø–æ–∫–∞–∑–∞–Ω: $_isOnboardingShown');
        print('   - Paywall –ø—Ä–æ–ø—É—â–µ–Ω: $_isPaywallSkipped');
        print('   - –ù—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: $shouldShowOnboarding');
        print('   - –ù—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å paywall: $shouldShowPaywall');
      }

      notifyListeners();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå OnboardingProvider: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
      }
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
  Future<void> markOnboardingAsShown() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_onboardingShownKey, true);

      _isOnboardingShown = true;

      if (kDebugMode) {
        print('‚úÖ OnboardingProvider: –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π');
      }

      notifyListeners();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå OnboardingProvider: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫–∞–∑–∞: $e');
      }
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
  Future<void> markOnboardingAsCompleted() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_onboardingCompletedKey, true);
      await prefs.setBool(_onboardingShownKey, true);

      _isOnboardingCompleted = true;
      _isOnboardingShown = true;

      if (kDebugMode) {
        print('‚úÖ OnboardingProvider: –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π');
      }

      notifyListeners();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå OnboardingProvider: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $e');
      }
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ paywall –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω
  Future<void> markPaywallAsSkipped() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_paywallSkippedKey, true);

      _isPaywallSkipped = true;

      if (kDebugMode) {
        print('‚úÖ OnboardingProvider: Paywall –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π');
      }

      notifyListeners();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå OnboardingProvider: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–ø—É—Å–∫–∞: $e');
      }
    }
  }

  /// –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> resetOnboarding() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_onboardingCompletedKey);
      await prefs.remove(_onboardingShownKey);
      await prefs.remove(_paywallSkippedKey);

      _isOnboardingCompleted = false;
      _isOnboardingShown = false;
      _isPaywallSkipped = false;

      if (kDebugMode) {
        print('üîÑ OnboardingProvider: –°—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å–±—Ä–æ—à–µ–Ω');
      }

      notifyListeners();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå OnboardingProvider: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: $e');
      }
    }
  }
}
