import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/subscription_service.dart';

class SubscriptionProvider extends ChangeNotifier {
  bool _isPremium = false;
  bool _isLoading = false;
  bool _isInitialized = false;
  String? _error;
  static const String _premiumStatusKey = 'premium_status';
  static const String _lastCheckKey = 'last_status_check';

  // Getters
  bool get isPremium => _isPremium;
  bool get isLoading => _isLoading;
  bool get isInitialized => _isInitialized;
  String? get error => _error;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  Future<void> initialize() async {
    if (_isInitialized) return;

    _setLoading(true);
    _clearError();

    try {
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      await _loadCachedStatus();

      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Ñ–æ–Ω–µ
      _checkActualStatusInBackground();

      _isInitialized = true;

      if (kDebugMode) {
        print(
          'üîß SubscriptionProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º: $_isPremium',
        );
      }
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      if (kDebugMode) {
        print('‚ùå SubscriptionProvider: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
      }
    } finally {
      _setLoading(false);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  Future<void> _loadCachedStatus() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final cachedStatus = prefs.getBool(_premiumStatusKey);
      final lastCheck = prefs.getString(_lastCheckKey);

      if (cachedStatus != null && lastCheck != null) {
        final lastCheckTime = DateTime.parse(lastCheck);
        final now = DateTime.now();

        // –ï—Å–ª–∏ –∫—ç—à –Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (now.difference(lastCheckTime).inHours < 1) {
          _isPremium = cachedStatus;
          if (kDebugMode) {
            print(
              'üîß SubscriptionProvider: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: $_isPremium',
            );
          }
          return;
        }
      }

      // –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      await _refreshSubscriptionStatus();
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è SubscriptionProvider: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: $e');
      }
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      await _refreshSubscriptionStatus();
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–æ–Ω–µ
  Future<void> _checkActualStatusInBackground() async {
    try {
      final actualIsPremium = await SubscriptionService.isPremium();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (actualIsPremium != _isPremium) {
        _isPremium = actualIsPremium;
        await _saveCachedStatus();
        notifyListeners();

        if (kDebugMode) {
          print('üîß SubscriptionProvider: –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–æ–Ω–µ: $_isPremium');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è SubscriptionProvider: –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: $e');
      }
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫—ç—à
  Future<void> _saveCachedStatus() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_premiumStatusKey, _isPremium);
      await prefs.setString(_lastCheckKey, DateTime.now().toIso8601String());
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è SubscriptionProvider: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: $e');
      }
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> _refreshSubscriptionStatus() async {
    try {
      final isPremium = await SubscriptionService.isPremium();
      _isPremium = isPremium;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await _saveCachedStatus();

      if (kDebugMode) {
        print('üîß SubscriptionProvider: –°—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º –æ–±–Ω–æ–≤–ª–µ–Ω: $isPremium');
      }
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      if (kDebugMode) {
        print('‚ùå SubscriptionProvider: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: $e');
      }
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
  Future<void> refreshSubscriptionStatus() async {
    _setLoading(true);
    await _refreshSubscriptionStatus();
    _setLoading(false);
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏)
  void setPremiumStatus(bool isPremium) {
    print('üîß SubscriptionProvider.setPremiumStatus() –≤—ã–∑–≤–∞–Ω');
    print('üîß –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: $_isPremium');
    print('üîß –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: $isPremium');

    _isPremium = isPremium;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    _saveCachedStatus();

    if (kDebugMode) {
      print('üîß SubscriptionProvider: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: $isPremium');
    }

    print('üîß –í—ã–∑—ã–≤–∞–µ–º notifyListeners()');
    notifyListeners();
    print('üîß notifyListeners() –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏)
  bool get isPremiumFast => _isPremium;

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
  void _setError(String error) {
    _error = error;
    notifyListeners();
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  void _clearError() {
    _error = null;
    notifyListeners();
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
  void clearError() {
    _clearError();
  }
}
