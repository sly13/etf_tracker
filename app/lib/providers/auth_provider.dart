import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:purchases_flutter/purchases_flutter.dart' show StoreProduct;
import '../models/user.dart';
import '../services/auth_service.dart';
import '../services/subscription_service.dart';

class AuthProvider extends ChangeNotifier {
  User? _currentUser;
  bool _isLoading = false;
  String? _error;
  final AuthService _authService = AuthService();

  // –ì–µ—Ç—Ç–µ—Ä—ã
  User? get currentUser => _currentUser;
  bool get isAuthenticated => _currentUser != null;
  bool get isLoading => _isLoading;
  String? get error => _error;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> initialize() async {
    _setLoading(true);
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RevenueCat
      await SubscriptionService.initialize();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
      final token = await _getStoredToken();
      if (token != null) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        await _validateToken(token);
      }
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
    } finally {
      _setLoading(false);
    }
  }

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Apple
  Future<void> signInWithApple() async {
    _setLoading(true);
    _clearError();

    try {
      final user = await _authService.signInWithApple();
      _setCurrentUser(user);
      await _storeToken(user.id); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ RevenueCat
      await SubscriptionService.setUser(user.id);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å RevenueCat
      await _syncSubscriptionWithRevenueCat(user);

      notifyListeners();
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Apple: $e');
      rethrow;
    } finally {
      _setLoading(false);
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  Future<void> signOut() async {
    _setLoading(true);
    try {
      await _authService.signOut();
      _setCurrentUser(null);
      await _clearStoredToken();
      notifyListeners();
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: $e');
    } finally {
      _setLoading(false);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> updateProfile({
    String? name,
    UserPreferences? preferences,
  }) async {
    if (_currentUser == null) return;

    _setLoading(true);
    try {
      final updatedUser = await _authService.updateProfile(
        userId: _currentUser!.id,
        name: name,
        preferences: preferences,
      );
      _setCurrentUser(updatedUser);
      notifyListeners();
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
    } finally {
      _setLoading(false);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> updateSubscription(Subscription subscription) async {
    if (_currentUser == null) return;

    _setLoading(true);
    try {
      final updatedUser = await _authService.updateSubscription(
        userId: _currentUser!.id,
        subscription: subscription,
      );
      _setCurrentUser(updatedUser);
      notifyListeners();
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: $e');
    } finally {
      _setLoading(false);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  Future<void> _validateToken(String token) async {
    try {
      final user = await _authService.validateToken(token);
      _setCurrentUser(user);
    } catch (e) {
      // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º –µ–≥–æ
      await _clearStoredToken();
      _setCurrentUser(null);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> _storeToken(String token) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('auth_token', token);
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<String?> _getStoredToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getString('auth_token');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: $e');
      return null;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> _clearStoredToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('auth_token');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  void _setCurrentUser(User? user) {
    _currentUser = user;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
  void _setError(String error) {
    _error = error;
    notifyListeners();
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  void _clearError() {
    _error = null;
    notifyListeners();
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
  void clearError() {
    _clearError();
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å RevenueCat
  Future<void> _syncSubscriptionWithRevenueCat(User user) async {
    try {
      final customerInfo = await SubscriptionService.getCustomerInfo();
      final updatedUser = SubscriptionService.updateUserWithSubscription(
        user,
        customerInfo,
      );
      _setCurrentUser(updatedUser);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
    }
  }

  // –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ RevenueCat
  Future<void> purchaseSubscription(StoreProduct product) async {
    if (_currentUser == null) return;

    _setLoading(true);
    try {
      final customerInfo = await SubscriptionService.purchasePackage(product);
      final updatedUser = SubscriptionService.updateUserWithSubscription(
        _currentUser!,
        customerInfo,
      );
      _setCurrentUser(updatedUser);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await _authService.updateSubscription(
        userId: _currentUser!.id,
        subscription: updatedUser.subscription!,
      );

      print('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ AuthProvider');
      notifyListeners();
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      rethrow;
    } finally {
      _setLoading(false);
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
  Future<void> restorePurchases() async {
    if (_currentUser == null) return;

    _setLoading(true);
    try {
      final customerInfo = await SubscriptionService.restorePurchases();
      final updatedUser = SubscriptionService.updateUserWithSubscription(
        _currentUser!,
        customerInfo,
      );
      _setCurrentUser(updatedUser);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await _authService.updateSubscription(
        userId: _currentUser!.id,
        subscription: updatedUser.subscription!,
      );

      notifyListeners();
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫: $e');
    } finally {
      _setLoading(false);
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> refreshSubscriptionStatus() async {
    if (_currentUser == null) return;

    try {
      print(
        'üîß –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ AuthProvider –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${_currentUser!.id}',
      );

      final customerInfo = await SubscriptionService.getCustomerInfo();
      final updatedUser = SubscriptionService.updateUserWithSubscription(
        _currentUser!,
        customerInfo,
      );
      _setCurrentUser(updatedUser);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      if (updatedUser.subscription != null) {
        await _authService.updateSubscription(
          userId: _currentUser!.id,
          subscription: updatedUser.subscription!,
        );
        print('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      } else {
        print('‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ RevenueCat');
      }

      print('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ AuthProvider');
      notifyListeners();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      rethrow;
    }
  }
}
