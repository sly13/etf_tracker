import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:easy_localization/easy_localization.dart';
import 'dart:ui' as ui;

class LanguageProvider with ChangeNotifier {
  static const String _languageKey = 'selected_language';

  // –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
  static const List<String> supportedLanguages = [
    'en',
    'ru',
    'zh',
    'ja',
    'pt',
    'es',
    'tr',
    'vi',
    'ko',
    'ar',
  ];

  Locale _currentLocale = const Locale('en');

  Locale get currentLocale => _currentLocale;

  LanguageProvider() {
    _loadLanguage();
  }

  Future<void> initialize() async {
    await _loadLanguage();
  }

  Future<void> _loadLanguage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final savedLanguage = prefs.getString(_languageKey);

      if (savedLanguage != null) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        _currentLocale = Locale(savedLanguage);
        notifyListeners();
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã
        await _detectSystemLanguage();
      }
    } catch (e) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      _currentLocale = const Locale('en');
      notifyListeners();
    }
  }

  Future<void> _detectSystemLanguage() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã
      final systemLocale = ui.PlatformDispatcher.instance.locale;
      final systemLanguageCode = systemLocale.languageCode;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã
      if (supportedLanguages.contains(systemLanguageCode)) {
        _currentLocale = Locale(systemLanguageCode);
        print('üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã: $systemLanguageCode');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString(_languageKey, systemLanguageCode);
      } else {
        // –ï—Å–ª–∏ —è–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        _currentLocale = const Locale('en');
        print(
          'üåç –Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã $systemLanguageCode –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString(_languageKey, 'en');
      }

      notifyListeners();
    } catch (e) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      _currentLocale = const Locale('en');
      notifyListeners();
    }
  }

  Future<void> setLanguage(Locale locale) async {
    _currentLocale = locale;
    notifyListeners();

    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_languageKey, locale.languageCode);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
  }

  /// –°–±—Ä–æ—Å–∏—Ç—å —è–∑—ã–∫ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É
  Future<void> resetToSystemLanguage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_languageKey); // –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
      await _detectSystemLanguage(); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã –∑–∞–Ω–æ–≤–æ
    } catch (e) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      _currentLocale = const Locale('en');
      notifyListeners();
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å EasyLocalization
  void syncWithEasyLocalization(BuildContext context) {
    final currentLocale = context.locale;
    if (_currentLocale != currentLocale) {
      _currentLocale = currentLocale;
      notifyListeners();
    }
  }

  String getLanguageDisplayName(String languageCode) {
    switch (languageCode) {
      case 'en':
        return 'English';
      case 'ru':
        return '–†—É—Å—Å–∫–∏–π';
      case 'zh':
        return '‰∏≠Êñá';
      case 'ja':
        return 'Êó•Êú¨Ë™û';
      case 'pt':
        return 'Portugu√™s';
      case 'es':
        return 'Espa√±ol';
      case 'tr':
        return 'T√ºrk√ße';
      case 'vi':
        return 'Ti·∫øng Vi·ªát';
      case 'ko':
        return 'ÌïúÍµ≠Ïñ¥';
      case 'ar':
        return 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©';
      default:
        return 'English';
    }
  }

  List<Map<String, String>> get availableLanguages {
    return [
      {'code': 'en', 'name': 'English', 'native': 'English'},
      {'code': 'ru', 'name': 'Russian', 'native': '–†—É—Å—Å–∫–∏–π'},
      {'code': 'zh', 'name': 'Chinese', 'native': '‰∏≠Êñá'},
      {'code': 'ja', 'name': 'Japanese', 'native': 'Êó•Êú¨Ë™û'},
      {'code': 'pt', 'name': 'Portuguese', 'native': 'Portugu√™s'},
      {'code': 'es', 'name': 'Spanish', 'native': 'Espa√±ol'},
      {'code': 'tr', 'name': 'Turkish', 'native': 'T√ºrk√ße'},
      {'code': 'vi', 'name': 'Vietnamese', 'native': 'Ti·∫øng Vi·ªát'},
      {'code': 'ko', 'name': 'Korean', 'native': 'ÌïúÍµ≠Ïñ¥'},
      {'code': 'ar', 'name': 'Arabic', 'native': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'},
    ];
  }
}
