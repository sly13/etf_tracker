import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import '../services/notification_service.dart';
import '../services/device_settings_service.dart';

class NotificationProvider extends ChangeNotifier {
  bool _notificationsEnabled = true;
  bool _isInitialized = false;
  String? _fcmToken;

  // –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  bool _enableETFUpdates = true;
  bool _enableSignificantFlow = true;
  bool _enableTestNotifications = false;
  double _minFlowThreshold = 0.1;
  double _significantChangePercent = 20.0;
  bool _enableFlowAmount = false;
  double _flowAmountThreshold = 10.0;
  String? _quietHoursStart;
  String? _quietHoursEnd;
  int _notificationCount = 0;
  DateTime? _lastNotificationSent;

  // Getters
  bool get notificationsEnabled => _notificationsEnabled;
  bool get isInitialized => _isInitialized;
  String? get fcmToken => _fcmToken;
  bool get enableETFUpdates => _enableETFUpdates;
  bool get enableSignificantFlow => _enableSignificantFlow;
  bool get enableTestNotifications => _enableTestNotifications;
  double get minFlowThreshold => _minFlowThreshold;
  double get significantChangePercent => _significantChangePercent;
  bool get enableFlowAmount => _enableFlowAmount;
  double get flowAmountThreshold => _flowAmountThreshold;
  String? get quietHoursStart => _quietHoursStart;
  String? get quietHoursEnd => _quietHoursEnd;
  int get notificationCount => _notificationCount;
  DateTime? get lastNotificationSent => _lastNotificationSent;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> initialize() async {
    try {
      debugPrint('üîî NotificationProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await NotificationService.initialize();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      NotificationService.onNotificationTap = _handleNotificationTap;

      _isInitialized = NotificationService.isInitialized;
      _fcmToken = NotificationService.fcmToken;

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (_isInitialized) {
        await NotificationService.subscribeToTopic('etf_updates');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        await _loadDeviceSettings();
      }

      debugPrint('‚úÖ NotificationProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      notifyListeners();
    } catch (e) {
      debugPrint('‚ùå NotificationProvider: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> toggleNotifications(bool enabled) async {
    _notificationsEnabled = enabled;

    if (enabled && _isInitialized) {
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫
      await NotificationService.subscribeToTopic('etf_updates');
    } else if (!enabled && _isInitialized) {
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Ç–æ–ø–∏–∫–∞
      await NotificationService.unsubscribeFromTopic('etf_updates');
    }

    notifyListeners();
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  void _handleNotificationTap(Map<String, dynamic> data) {
    debugPrint(
      'üì± NotificationProvider: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: $data',
    );

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–∫—Ä—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notifyListeners();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å FCM —Ç–æ–∫–µ–Ω
  Future<void> refreshToken() async {
    if (_isInitialized) {
      await NotificationService.refreshToken();
      _fcmToken = NotificationService.fcmToken;
      notifyListeners();
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
  Future<void> _loadDeviceSettings() async {
    if (_fcmToken == null) return;

    try {
      final settings = await DeviceSettingsService.getDeviceSettings(
        _fcmToken!,
      );
      if (settings != null) {
        _enableETFUpdates = settings['enableETFUpdates'] ?? true;
        _enableSignificantFlow = settings['enableSignificantFlow'] ?? true;
        _enableTestNotifications = settings['enableTestNotifications'] ?? false;
        _minFlowThreshold = (settings['minFlowThreshold'] ?? 0.1).toDouble();
        _significantChangePercent =
            (settings['significantChangePercent'] ?? 20.0).toDouble();
        _enableFlowAmount = settings['enableFlowAmount'] ?? false;
        _flowAmountThreshold = (settings['flowAmountThreshold'] ?? 10.0)
            .toDouble();
        _quietHoursStart = settings['quietHoursStart'];
        _quietHoursEnd = settings['quietHoursEnd'];
        _notificationCount = settings['notificationCount'] ?? 0;
        _lastNotificationSent = settings['lastNotificationSent'] != null
            ? DateTime.parse(settings['lastNotificationSent'])
            : null;

        debugPrint('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
        notifyListeners();
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: $e');
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  Future<bool> updateDeviceSettings(Map<String, dynamic> settings) async {
    if (_fcmToken == null) return false;

    try {
      final success = await DeviceSettingsService.updateDeviceSettings(
        _fcmToken!,
        settings,
      );
      if (success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (settings.containsKey('enableETFUpdates')) {
          _enableETFUpdates = settings['enableETFUpdates'];
        }
        if (settings.containsKey('enableSignificantFlow')) {
          _enableSignificantFlow = settings['enableSignificantFlow'];
        }
        if (settings.containsKey('enableTestNotifications')) {
          _enableTestNotifications = settings['enableTestNotifications'];
        }
        if (settings.containsKey('minFlowThreshold')) {
          _minFlowThreshold = settings['minFlowThreshold'].toDouble();
        }
        if (settings.containsKey('significantChangePercent')) {
          _significantChangePercent = settings['significantChangePercent']
              .toDouble();
        }
        if (settings.containsKey('enableFlowAmount')) {
          _enableFlowAmount = settings['enableFlowAmount'];
        }
        if (settings.containsKey('flowAmountThreshold')) {
          _flowAmountThreshold = settings['flowAmountThreshold'].toDouble();
        }
        if (settings.containsKey('quietHoursStart')) {
          _quietHoursStart = settings['quietHoursStart'];
        }
        if (settings.containsKey('quietHoursEnd')) {
          _quietHoursEnd = settings['quietHoursEnd'];
        }

        notifyListeners();
        debugPrint('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      }
      return success;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: $e');
      return false;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<bool> sendTestNotification() async {
    try {
      final success = await DeviceSettingsService.sendTestNotification();
      if (success) {
        debugPrint('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }
      return success;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<Map<String, dynamic>?> getNotificationStats() async {
    try {
      return await DeviceSettingsService.getNotificationStats();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Map<String, dynamic> getNotificationStatus() {
    return {
      'enabled': _notificationsEnabled,
      'initialized': _isInitialized,
      'fcmToken': _fcmToken,
      'hasToken': _fcmToken != null && _fcmToken!.isNotEmpty,
      'enableETFUpdates': _enableETFUpdates,
      'enableSignificantFlow': _enableSignificantFlow,
      'enableTestNotifications': _enableTestNotifications,
      'minFlowThreshold': _minFlowThreshold,
      'significantChangePercent': _significantChangePercent,
      'enableFlowAmount': _enableFlowAmount,
      'flowAmountThreshold': _flowAmountThreshold,
      'quietHoursStart': _quietHoursStart,
      'quietHoursEnd': _quietHoursEnd,
      'notificationCount': _notificationCount,
      'lastNotificationSent': _lastNotificationSent?.toIso8601String(),
    };
  }
}
