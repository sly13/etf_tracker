import 'package:flutter/foundation.dart';
import 'package:purchases_flutter/purchases_flutter.dart';
import '../services/subscription_service.dart';

class RevenueCatChecker {
  /// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ RevenueCat
  static Future<Map<String, dynamic>> quickCheck() async {
    final result = <String, dynamic>{
      'status': 'unknown',
      'message': '',
      'issues': <String>[],
      'products': <String>[],
      'canPurchase': false,
    };

    try {
      print('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ RevenueCat...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
      final customerInfo = await Purchases.getCustomerInfo();
      result['status'] = 'initialized';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º offerings
      final offerings = await Purchases.getOfferings();
      final current = offerings.current;

      if (current == null) {
        result['status'] = 'no_offering';
        result['message'] = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ offering';
        result['issues'].add('–°–æ–∑–¥–∞–π—Ç–µ offering –≤ RevenueCat Dashboard');
        return result;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
      final products = current.availablePackages
          .map((package) => package.storeProduct.identifier)
          .toList();

      result['products'] = products;
      result['canPurchase'] = products.isNotEmpty;

      if (products.isEmpty) {
        result['status'] = 'no_products';
        result['message'] = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤';
        result['issues'].add('–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ offering');
        result['issues'].add('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ App Store Connect');
      } else {
        result['status'] = 'ready';
        result['message'] = 'RevenueCat –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ';
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      final expectedProducts = [
        'MONTHLY_ETF_FLOW_PLAN',
        'YEARLY_ETF_FLOW_PLAN',
      ];
      final missingProducts = expectedProducts
          .where((id) => !products.contains(id))
          .toList();

      if (missingProducts.isNotEmpty) {
        result['issues'].add(
          '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–¥—É–∫—Ç—ã: ${missingProducts.join(', ')}',
        );
        result['issues'].add('–°–º. REVENUECAT_FIX_MISSING_METADATA.md');
      }
    } catch (e) {
      result['status'] = 'error';
      result['message'] = '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: $e';
      result['issues'].add('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RevenueCat');
    }

    return result;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
  static String getStatusText(String status) {
    switch (status) {
      case 'ready':
        return '‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ';
      case 'initialized':
        return '‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã';
      case 'no_offering':
        return '‚ùå –ù–µ—Ç offering';
      case 'no_products':
        return '‚ùå –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤';
      case 'error':
        return '‚ùå –û—à–∏–±–∫–∞';
      default:
        return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º
  static Future<bool> isReadyForPurchases() async {
    final check = await quickCheck();
    return check['canPurchase'] == true;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º
  static Future<List<String>> getIssues() async {
    final check = await quickCheck();
    return List<String>.from(check['issues'] ?? []);
  }

  /// –í—ã–≤–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
  static Future<void> printDiagnostics() async {
    if (!kDebugMode) return;

    print('üîç === RevenueCat –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ===');
    final check = await quickCheck();

    print('–°—Ç–∞—Ç—É—Å: ${getStatusText(check['status'])}');
    print('–°–æ–æ–±—â–µ–Ω–∏–µ: ${check['message']}');

    if (check['products'].isNotEmpty) {
      print('–ü—Ä–æ–¥—É–∫—Ç—ã: ${check['products'].join(', ')}');
    }

    if (check['issues'].isNotEmpty) {
      print('–ü—Ä–æ–±–ª–µ–º—ã:');
      for (final issue in check['issues']) {
        print('  - $issue');
      }
    }

    print('–ì–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–∞–º: ${check['canPurchase'] ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}');
    print('================================');
  }
}
