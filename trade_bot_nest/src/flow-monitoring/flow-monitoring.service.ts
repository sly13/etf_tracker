import { Injectable, Logger } from '@nestjs/common';
import { DatabaseService } from '../database/database.service';

@Injectable()
export class FlowMonitoringService {
  private readonly logger = new Logger(FlowMonitoringService.name);
  private isRunning = false;
  private intervalId: NodeJS.Timeout | null = null;
  private lastCheckTime = {
    btc: null as Date | null,
    eth: null as Date | null,
  };
  private stats = {
    totalChecks: 0,
    btcChecks: 0,
    ethChecks: 0,
    positionsOpened: 0,
    errors: 0,
  };

  constructor(private databaseService: DatabaseService) {}

  async start() {
    if (this.isRunning) {
      this.logger.warn('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isRunning = true;
    this.logger.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Flow –¥–∞–Ω–Ω—ã—Ö');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    const checkInterval = parseInt(process.env.CHECK_INTERVAL || '60000');
    this.intervalId = setInterval(() => {
      this.checkFlowData();
    }, checkInterval);

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    await this.checkFlowData();
  }

  async stop() {
    if (!this.isRunning) {
      this.logger.warn('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isRunning = false;
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }

    this.logger.log('üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Flow –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  getStatus() {
    return {
      isRunning: this.isRunning,
      lastCheckTime: this.lastCheckTime,
      stats: this.stats,
    };
  }

  getStats() {
    return this.stats;
  }

  resetStats() {
    this.stats = {
      totalChecks: 0,
      btcChecks: 0,
      ethChecks: 0,
      positionsOpened: 0,
      errors: 0,
    };
    this.logger.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
  }

  private async checkFlowData() {
    try {
      this.stats.totalChecks++;
      this.logger.debug('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Flow –¥–∞–Ω–Ω—ã—Ö...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º BTC Flow
      await this.checkBTCFlow();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º ETH Flow
      await this.checkETHFlow();
    } catch (error) {
      this.stats.errors++;
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Flow –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  private async checkBTCFlow() {
    try {
      this.stats.btcChecks++;
      this.lastCheckTime.btc = new Date();

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ BTC Flow
      const flows = await this.databaseService.getLatestBTCFlow(1);

      if (flows.length > 0) {
        const latestFlow = flows[0];
        const totalFlow = latestFlow.total || 0;

        this.logger.debug(`üìä BTC Flow: ${totalFlow}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const minFlowThreshold = parseFloat(
          process.env.MIN_FLOW_THRESHOLD || '1000000',
        );

        if (Math.abs(totalFlow) >= minFlowThreshold) {
          this.logger.log(`üö® BTC Flow –ø—Ä–µ–≤—ã—Å–∏–ª –ø–æ—Ä–æ–≥: ${totalFlow}`);
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
          await this.handleFlowThreshold('BTC', totalFlow);
        }
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ BTC Flow:', error);
      throw error;
    }
  }

  private async checkETHFlow() {
    try {
      this.stats.ethChecks++;
      this.lastCheckTime.eth = new Date();

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ ETH Flow
      const flows = await this.databaseService.getLatestETHFlow(1);

      if (flows.length > 0) {
        const latestFlow = flows[0];
        const totalFlow = latestFlow.total || 0;

        this.logger.debug(`üìä ETH Flow: ${totalFlow}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const minFlowThreshold = parseFloat(
          process.env.MIN_FLOW_THRESHOLD || '1000000',
        );

        if (Math.abs(totalFlow) >= minFlowThreshold) {
          this.logger.log(`üö® ETH Flow –ø—Ä–µ–≤—ã—Å–∏–ª –ø–æ—Ä–æ–≥: ${totalFlow}`);
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
          await this.handleFlowThreshold('ETH', totalFlow);
        }
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ETH Flow:', error);
      throw error;
    }
  }

  private async handleFlowThreshold(asset: string, flowValue: number) {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞–∫–∞ flow
      const side = flowValue > 0 ? 'long' : 'short';
      const symbol = `${asset}-USDT`;

      this.logger.log(
        `üíº –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: ${symbol} ${side} (Flow: ${flowValue})`,
      );

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ OKX API
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º

      this.stats.positionsOpened++;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ä–æ–≥–∞ Flow –¥–ª—è ${asset}:`, error);
    }
  }
}
