generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ETFFlow {
  id              String   @id @default(cuid())
  date            DateTime @unique
  blackrock       Float?
  fidelity        Float?
  bitwise         Float?
  twentyOneShares Float?
  vanEck          Float?
  invesco         Float?
  franklin        Float?
  grayscale       Float?
  grayscaleEth    Float?
  total           Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model BTCFlow {
  id              String   @id @default(cuid())
  date            DateTime @unique
  blackrock       Float?
  fidelity        Float?
  bitwise         Float?
  twentyOneShares Float?
  vanEck          Float?
  invesco         Float?
  franklin        Float?
  grayscale       Float?
  grayscaleBtc    Float?
  total           Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  valkyrie        Float?
  wisdomTree      Float?
}

model NotificationLog {
  id           String   @id @default(cuid())
  type         String
  title        String
  body         String
  data         Json?
  sentToTokens Int      @default(0)
  successCount Int      @default(0)
  failureCount Int      @default(0)
  createdAt    DateTime @default(now())
}

model Application {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id             String         @id @default(cuid())
  applicationId  String
  deviceId       String?        @unique
  deviceToken    String         @unique
  telegramChatId String?        @unique
  settings       Json?
  isActive       Boolean        @default(true)
  lastUsed       DateTime       @default(now())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  os             String?
  subscriptions  Subscription[]
  application    Application    @relation(fields: [applicationId], references: [id])

  @@index([settings], map: "idx_user_settings", type: Gin)
}

model Subscription {
  id                    String    @id @default(cuid())
  userId                String
  revenueCatUserId      String?
  originalTransactionId String?
  productId             String?
  isActive              Boolean   @default(false)
  isPremium             Boolean   @default(false)
  autoRenew             Boolean   @default(false)
  purchaseDate          DateTime?
  expirationDate        DateTime?
  originalPurchaseDate  DateTime?
  environment           String?
  platform              String?
  price                 Float?
  currency              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([revenueCatUserId])
  @@index([originalTransactionId])
}

model Admin {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  email     String?   @unique
  firstName String?
  lastName  String?
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model TradingPosition {
  id           String    @id @default(cuid())
  symbol       String    // BTC-USDT, ETH-USDT
  side         String    // long, short
  size         Float
  entryPrice   Float     @map("entry_price")
  total        Float     // Значение flow, которое вызвало открытие позиции
  status       String    @default("open") // open, closed, cancelled
  okxOrderId   String?   @map("okx_order_id")
  profitLoss   Float?    @default(0) @map("profit_loss")
  exitPrice    Float?    @map("exit_price")
  closedAt     DateTime? @map("closed_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("TradingPositions")
}
